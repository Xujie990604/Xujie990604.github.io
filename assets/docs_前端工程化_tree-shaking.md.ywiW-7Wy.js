import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"tree-shaking","description":"","frontmatter":{},"headers":[],"relativePath":"docs/前端工程化/tree-shaking.md","filePath":"docs/前端工程化/tree-shaking.md","lastUpdated":1756707094000}'),e={name:"docs/前端工程化/tree-shaking.md"};function o(r,s,c,t,i,b){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="tree-shaking" tabindex="-1">tree-shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;tree-shaking&quot;">​</a></h1><ul><li>tree-shaking(树摇)：移除 JavaScript 上下文中的未引用代码 (dead-code)</li><li>依赖于 ES2015 模块语法的 <code>静态结构</code> 特性(import export)</li><li>ES6 的<code>模块依赖关系是确定</code>的，和<code>运行时</code>的状态无关(所以 ES6 模块不支持<code>条件导入</code>和<code>动态导入</code>)因此可以进行可靠的静态分析，判断哪些模块最终<code>没有被引用</code>，这是 <code>tree shaking</code> 的基础</li></ul><h2 id="一、esm-规范" tabindex="-1">一、ESM 规范 <a class="header-anchor" href="#一、esm-规范" aria-label="Permalink to &quot;一、ESM 规范&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 只能作为模块的顶层语句出现</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bol </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(bol) {</span></span>
<span class="line"><span style="color:#D73A49;">  import</span><span style="color:#24292E;"> ...  </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#24292E;">  export ...  </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. import 的模块名只能是字符串常量</span></span>
<span class="line"><span style="color:#24292E;">let str = </span><span style="color:#032F62;">&#39;./moduleA.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">import A </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> str;    </span><span style="color:#6A737D;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="二、tree-shaking-演示" tabindex="-1">二、tree-shaking 演示 <a class="header-anchor" href="#二、tree-shaking-演示" aria-label="Permalink to &quot;二、tree-shaking 演示&quot;">​</a></h2><ul><li>没有使用到的 add() 函数在打包产物中被剔除</li><li>没有引入的 format.js 模块不会在打包产物中出现</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 rollup 工具进行代码示例</span></span>
<span class="line"><span style="color:#6A737D;">// utils.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> read</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// format.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> format</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// input.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { read } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./utils.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> object</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(object);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成文件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> read</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="三、副作用" tabindex="-1">三、副作用 <a class="header-anchor" href="#三、副作用" aria-label="Permalink to &quot;三、副作用&quot;">​</a></h2><ul><li>如果一个函数调用会产生副作用，那么就不能将以移除。</li><li>read() 虽然目前看起来没有产生副作用，但是在静态分析阶段识别哪些代码是 dead code 的很有难度(假如 obj 是通过 Proxy 创建的代理对象)，只有在运行阶段才能确定</li><li>使用 <code>/*#__PURE__*/</code> 来声明是无副作用的</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// input.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { read } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./utils.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> object</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;"> read</span><span style="color:#24292E;">(object); </span><span style="color:#6A737D;">// 打包产物中不会包含 read() 函数的定义和使用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="四、import-动态导入对-tree-shaking-的影响" tabindex="-1">四、import() 动态导入对 tree-shaking 的影响 <a class="header-anchor" href="#四、import-动态导入对-tree-shaking-的影响" aria-label="Permalink to &quot;四、import() 动态导入对 tree-shaking 的影响&quot;">​</a></h2><ul><li>项目中有如下目录结构</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span>- import-js</span></span>
<span class="line"><span>  - dy-js1.js</span></span>
<span class="line"><span>  - dy-js2.js</span></span>
<span class="line"><span>  - dy-js3.js</span></span>
<span class="line"><span>  - dyn.js</span></span>
<span class="line"><span>- man.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> condition </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#6A737D;">// 一、情况一</span></span>
<span class="line"><span style="color:#6A737D;">// dy-js1、dy-js2 会被打包到 dist 中</span></span>
<span class="line"><span style="color:#6A737D;">// dy-js3、dyn.js 不会被打包到 dist 中</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(condition </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../import-js/dy-js1.js&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;">(condition </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../import-js/dy-js2.js&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、情况二</span></span>
<span class="line"><span style="color:#6A737D;">// dy-js1、dy-js2、dy-js3 会被打包到 dist 中</span></span>
<span class="line"><span style="color:#6A737D;">// dyn.js 不会被打包到 dist 中</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`../import-js/dy-js\${</span><span style="color:#24292E;">condition</span><span style="color:#032F62;">}.js\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 三、情况三</span></span>
<span class="line"><span style="color:#6A737D;">// dy-js1、dy-js2、dy-js3、dyn.js 都会被打包到 dist 中</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`../import-js/\${</span><span style="color:#24292E;">condition</span><span style="color:#032F62;">}.js\`</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,14)]))}const u=n(e,[["render",o]]);export{d as __pageData,u as default};
