import{_ as s,c as n,o as e,ag as l}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"对象上是否有某属性","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/知识块整理/访问对象属性.md","filePath":"docs/JavaScript/知识块整理/访问对象属性.md","lastUpdated":1712646874000}'),o={name:"docs/JavaScript/知识块整理/访问对象属性.md"};function p(r,a,t,i,c,b){return e(),n("div",null,a[0]||(a[0]=[l(`<h1 id="对象上是否有某属性" tabindex="-1">对象上是否有某属性 <a class="header-anchor" href="#对象上是否有某属性" aria-label="Permalink to &quot;对象上是否有某属性&quot;">​</a></h1><h2 id="一、for-in" tabindex="-1">一、for in <a class="header-anchor" href="#一、for-in" aria-label="Permalink to &quot;一、for in&quot;">​</a></h2><ul><li>因为对象的属性是无序的，所以无法保证 for-in 访问属性的顺序</li><li>访问范围：对象本身、以及对象的原型</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">.height </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key); </span><span style="color:#6A737D;">// name age height</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="二、key-in-obj" tabindex="-1">二、key in obj <a class="header-anchor" href="#二、key-in-obj" aria-label="Permalink to &quot;二、key in obj&quot;">​</a></h2><ul><li>返回值：Boolean</li><li>obj 上是否存在名为 key 的属性</li><li>访问范围：对象本身、以及对象的原型</li></ul><h2 id="三、obj-hasownproperty-key" tabindex="-1">三、obj.hasOwnProperty(key) <a class="header-anchor" href="#三、obj-hasownproperty-key" aria-label="Permalink to &quot;三、obj.hasOwnProperty(key)&quot;">​</a></h2><ul><li>返回值: Boolean</li><li>obj 上是否存在名为 key 的属性</li><li>访问范围：只有对象本身、没有对象原型</li></ul><h2 id="四、object-getownprototypenames-obj" tabindex="-1">四、Object.getOwnPrototypeNames(obj) <a class="header-anchor" href="#四、object-getownprototypenames-obj" aria-label="Permalink to &quot;四、Object.getOwnPrototypeNames(obj)&quot;">​</a></h2><ul><li>返回值：Array</li><li>无论是否可枚举 <code>都可以通过这个方法来访问实例上的属性</code></li><li>访问范围：只有对象本身、没有对象原型</li></ul>`,10)]))}const u=s(o,[["render",p]]);export{d as __pageData,u as default};
