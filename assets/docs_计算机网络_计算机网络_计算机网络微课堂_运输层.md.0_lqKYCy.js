import{_ as l,c as i,o as t,ag as e}from"./chunks/framework.BDwTZuFy.js";const T=JSON.parse('{"title":"运输层","description":"","frontmatter":{},"headers":[],"relativePath":"docs/计算机网络/计算机网络/计算机网络微课堂/运输层.md","filePath":"docs/计算机网络/计算机网络/计算机网络微课堂/运输层.md","lastUpdated":1712646874000}'),o={name:"docs/计算机网络/计算机网络/计算机网络微课堂/运输层.md"};function r(s,a,n,P,d,c){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="运输层" tabindex="-1">运输层 <a class="header-anchor" href="#运输层" aria-label="Permalink to &quot;运输层&quot;">​</a></h1><ul><li>物理层，数据链路层，网络层他们共同解决了将主机通过异构网络互联起来所面临的的问题，<strong>实现了主机到主机的通信</strong></li><li>但是实际上在计算机网络中进行通信的真正实体是位于通信两端主机中的进程。</li><li>如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务，运输层协议又称为<strong>端到端协议</strong>。</li></ul><h2 id="运输层端口号" tabindex="-1">运输层端口号 <a class="header-anchor" href="#运输层端口号" aria-label="Permalink to &quot;运输层端口号&quot;">​</a></h2><ul><li>因为因特网上的计算机 并不是统一的操作系统(windows,Linux,MAC)，不同的操作系统使用不同格式的进程标识符。所以需要使用统一的方法对TCP/IP体系的应用进程进行标识。</li><li>常见端口号 FTP：21/20 HTTP: 80 DNS: 53 HTTPS: 443</li></ul><h2 id="udp-用户数据报协议-和tcp-传输控制协议-对比" tabindex="-1">UDP(用户数据报协议)和TCP(传输控制协议)对比 <a class="header-anchor" href="#udp-用户数据报协议-和tcp-传输控制协议-对比" aria-label="Permalink to &quot;UDP(用户数据报协议)和TCP(传输控制协议)对比&quot;">​</a></h2><ul><li>UDP在发送数据时，可以随时发送数据(无连接)</li><li>TCP在传输数据时，必须使用三报文握手建立连接，使用四报文挥手来释放TCP连接。(面向连接)</li><li>UDP支持单播，多播和广播。</li><li>TCP仅仅支持单播</li><li>UDP是面向报文的，运输层的UDP协议直接在应用层交付的数据上加上首部。不拆分数据。(面向报文的)</li><li>TCP是面向字节流的，运输层的TCP协议把应用层交付的数据分割成TCP报文段。(面向字节流的)</li><li>UDP向上层提供的是无连接不可靠的传输服务(适用于IP电话，视频会议等实时应用)</li><li>TCP向上层提供面向连接的可靠传输服务。(适用于文件传输等)</li></ul>',6)]))}const u=l(o,[["render",r]]);export{T as __pageData,u as default};
