import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"扩展运算符","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/知识块整理/扩展运算符.md","filePath":"docs/JavaScript/知识块整理/扩展运算符.md","lastUpdated":1712646874000}'),o={name:"docs/JavaScript/知识块整理/扩展运算符.md"};function e(r,s,c,t,i,y){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="扩展运算符" tabindex="-1">扩展运算符 <a class="header-anchor" href="#扩展运算符" aria-label="Permalink to &quot;扩展运算符&quot;">​</a></h1><ul><li>任何定义了遍历器(Iterator)接口的数据，都可以使用扩展运算符来遍历</li><li>扩展符内部使用的就是 for...of 方法</li></ul><h2 id="一、函数参数" tabindex="-1">一、函数参数 <a class="header-anchor" href="#一、函数参数" aria-label="Permalink to &quot;一、函数参数&quot;">​</a></h2><ul><li>用于函数接收多个参数, 只有函数的最后一个参数才能是剩余参数</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">number1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">number2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">numbers</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(number1); </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(number2); </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numbers); </span><span style="color:#6A737D;">// [3, 4, 5] 注意 numbers 就是数组的形式</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">numbers); </span><span style="color:#6A737D;">// 3, 4, 5</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二、拼接数据" tabindex="-1">二、拼接数据 <a class="header-anchor" href="#二、拼接数据" aria-label="Permalink to &quot;二、拼接数据&quot;">​</a></h2><h3 id="_2-1-用于拼接数组和字符串" tabindex="-1">2.1 用于拼接数组和字符串 <a class="header-anchor" href="#_2-1-用于拼接数组和字符串" aria-label="Permalink to &quot;2.1 用于拼接数组和字符串&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> a</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> b</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;456&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> c</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">a, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">b, </span><span style="color:#032F62;">&quot;7&quot;</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// [1, 2, 3, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-2-可以拼接对象的属性" tabindex="-1">2.2 可以拼接对象的属性 <a class="header-anchor" href="#_2-2-可以拼接对象的属性" aria-label="Permalink to &quot;2.2 可以拼接对象的属性&quot;">​</a></h3><ul><li>展开对象中的键值对</li><li>对象中不允许同名的 key 值，相同 key 值会被覆盖，所以实现了 money 加倍的写法</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> user</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  money: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> a</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">user, money: user.money </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;"> }; </span><span style="color:#6A737D;">// {name: &#39;foo&#39;, age: 18, money: 40}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,11)]))}const d=a(o,[["render",e]]);export{b as __pageData,d as default};
