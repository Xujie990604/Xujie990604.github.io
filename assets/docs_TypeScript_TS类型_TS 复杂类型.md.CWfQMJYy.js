import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"TS 复杂类型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS类型/TS 复杂类型.md","filePath":"docs/TypeScript/TS类型/TS 复杂类型.md","lastUpdated":1722758955000}'),o={name:"docs/TypeScript/TS类型/TS 复杂类型.md"};function e(t,s,r,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ts-复杂类型" tabindex="-1">TS 复杂类型 <a class="header-anchor" href="#ts-复杂类型" aria-label="Permalink to &quot;TS 复杂类型&quot;">​</a></h1><h2 id="一、数组类型" tabindex="-1">一、数组类型 <a class="header-anchor" href="#一、数组类型" aria-label="Permalink to &quot;一、数组类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 类型后面接上 [] 表示由只某种类型元素构成的数组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> list</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// Array&lt;元素类型&gt; 使用数组泛型来定义,(不推荐使用这种形式，&lt;&gt; 语法在 tsx 中会识别异常)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> list</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Array</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 只读数组，数组的值不允许发生改变</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> roArray</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> ReadonlyArray</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> roArray</span><span style="color:#D73A49;">:</span><span style="color:#D73A49;"> readonly</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二、元组类型" tabindex="-1">二、元组类型 <a class="header-anchor" href="#二、元组类型" aria-label="Permalink to &quot;二、元组类型&quot;">​</a></h2><ul><li>允许表示一个已知数量和类型的数组，各元素的类型不必相同，不允许越界访问</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;no One&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;1&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 不能将类型“&quot;1&quot;”分配给类型“undefined”。ts(2322)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">//长度为 &quot;2&quot; 的元组类型 &quot;[string, number]&quot; 在索引 &quot;2&quot; 处没有元素。ts(2493)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="三、枚举类型" tabindex="-1">三、枚举类型 <a class="header-anchor" href="#三、枚举类型" aria-label="Permalink to &quot;三、枚举类型&quot;">​</a></h2><p>是 JS 标准数据类型的一个补充。使用枚举类型可以为一组数值赋予友好的名字，下标值默认从 <code>零</code> 开始，也可以自己手动赋值。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义一组常量</span></span>
<span class="line"><span style="color:#6A737D;">// 这样做的话是代码的可读性特别好</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#6F42C1;"> Position</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">  LEFT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  RIGHT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> test</span><span style="color:#24292E;">(</span><span style="color:#E36209;">position</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Position</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  switch</span><span style="color:#24292E;"> (position) {</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#24292E;"> Position.</span><span style="color:#005CC5;">LEFT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;left&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">      break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    case</span><span style="color:#24292E;"> Position.</span><span style="color:#005CC5;">RIGHT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;right&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">      break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">      // 这是 never 类型的一个典型应用，任何类型的值都不能被赋值给 never</span></span>
<span class="line"><span style="color:#6A737D;">      // 如果正常传入参数的话是不会执行到 default 这步的，如果执行到了这步说明入参有问题</span></span>
<span class="line"><span style="color:#6A737D;">      // 我们就可以在这个错误的逻辑块中执行一个违规的操作。如果进入了这个逻辑块就会报错</span></span>
<span class="line"><span style="color:#D73A49;">      let</span><span style="color:#24292E;"> result</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> never</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> position;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(Position.</span><span style="color:#005CC5;">LEFT</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="四、object-类型" tabindex="-1">四、object 类型 <a class="header-anchor" href="#四、object-类型" aria-label="Permalink to &quot;四、object 类型&quot;">​</a></h2><ul><li>表示非原始类型数据，也就是除了 number、string、boolean、undefined、null(!注意)、symbol、bigint 之外的类型。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 当给一个数据 object 类型注释时，无法拿到对象上的属性，但是可以拿到对象原型链上的方法 toString valueOf 等</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> object</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;no One&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 支持调用</span></span>
<span class="line"><span style="color:#24292E;">obj.name; </span><span style="color:#6A737D;">// 不支持调用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="五、联合类型" tabindex="-1">五、联合类型 <a class="header-anchor" href="#五、联合类型" aria-label="Permalink to &quot;五、联合类型&quot;">​</a></h2><ul><li>联合类型是由两种或多种其他类型组成的类型，表示可能是这些类型中的任何一种的值。我们将这些类型中的每一种都称为联合的成员</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 表示一个变量可能是几种数据类型</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getLength</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> data.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 类型“number”的参数不能赋给类型“string | string[]”的参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字面量类型(字面量类型的值和类型必须保持一致)和联合类型结合</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> a</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &quot;left&quot;</span><span style="color:#D73A49;"> |</span><span style="color:#032F62;"> &quot;right&quot;</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;left&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> b</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &quot;left&quot;</span><span style="color:#D73A49;"> |</span><span style="color:#032F62;"> &quot;right&quot;</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;middle&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 不能将类型“&quot;middle&quot;”分配给类型“&quot;left&quot; | &quot;right&quot;”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="六、包装类类型" tabindex="-1">六、包装类类型 <a class="header-anchor" href="#六、包装类类型" aria-label="Permalink to &quot;六、包装类类型&quot;">​</a></h2><ul><li>:string 代表的是字符串类型</li><li>:String 代表的是字符串包装类类型(代码中很少出现)</li></ul><p>NOTE: 永远不要使用类型 Number、String、Boolean、Symbol、Object 这些<code>原始类型包装类</code>类型。他们几乎从未在 JS 代码中正确使用过</p>`,18)]))}const d=n(o,[["render",e]]);export{b as __pageData,d as default};
