import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"Vue 设计与实现","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vue/Vue设计与实现/Vue.js设计与实现.md","filePath":"docs/Vue/Vue设计与实现/Vue.js设计与实现.md","lastUpdated":1736773414000}'),e={name:"docs/Vue/Vue设计与实现/Vue.js设计与实现.md"};function o(t,s,r,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="vue-设计与实现" tabindex="-1">Vue 设计与实现 <a class="header-anchor" href="#vue-设计与实现" aria-label="Permalink to &quot;Vue 设计与实现&quot;">​</a></h1><h2 id="二、声明式-ui" tabindex="-1">二、声明式 UI <a class="header-anchor" href="#二、声明式-ui" aria-label="Permalink to &quot;二、声明式 UI&quot;">​</a></h2><ol><li>Vue 常见方案(template)使用了接近于原生 HTML 的方式来声明式的描述 UI，不仅是元素，就连事件也能声明式的描述</li><li>Vue 也支持使用 h() 函数来声明式的描述 UI</li><li>React 的 JSX 语法也是声明式描述 UI</li></ol><ul><li>使用 JSX 语法来描述 UI，比 Template 的形式更加灵活(eg: 动态渲染 h1 ~ h6 的 DOM 元素)</li></ul><h3 id="_2-1-vue3-的-template-语法来描述-ui" tabindex="-1">2.1 Vue3 的 template 语法来描述 UI <a class="header-anchor" href="#_2-1-vue3-的-template-语法来描述-ui" aria-label="Permalink to &quot;2.1 Vue3 的 template 语法来描述 UI&quot;">​</a></h3><ul><li>template 写法是平时开发中常见的使用形式</li><li>template 会被编译成 render 函数， render 函数执行会返回 VNode</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h1</span><span style="color:#6F42C1;"> @click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;handler&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;{text}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">  import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> text</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#6F42C1;"> handler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">    alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello World!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-2-vue-的-h-函数来描述-ui" tabindex="-1">2.2 Vue 的 h() 函数来描述 UI <a class="header-anchor" href="#_2-2-vue-的-h-函数来描述-ui" aria-label="Permalink to &quot;2.2 Vue 的 h() 函数来描述 UI&quot;">​</a></h3><blockquote><p>在绝大多数情况下，Vue 推荐使用模版语法来创建应用。然而在某些使用场景下，我们真的需要用到 JavaScript 完全的编程能力。这时候<code>渲染函数</code>就派上用场了</p></blockquote><ul><li>Vue 提供了 <code>h()</code> 函数，为手动创建 VNode 提供了更简洁的方式</li><li><code>h()</code> 是 hyperscript 的简称——意思是 &quot;能生成 HTML (超文本标记语言) 的 JavaScript&quot;</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 完整参数签名</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> h</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#E36209;">  type</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Component</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">  props</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> object</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">  children</span><span style="color:#D73A49;">?:</span><span style="color:#6F42C1;"> Children</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Slot</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Slots</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> VNode</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 省略 props</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> h</span><span style="color:#24292E;">(</span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Component</span><span style="color:#24292E;">, </span><span style="color:#E36209;">children</span><span style="color:#D73A49;">?:</span><span style="color:#6F42C1;"> Children</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Slot</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> VNode</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Children</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> boolean</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> VNode</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Children</span><span style="color:#24292E;">[];</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Slot</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;"> Children</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Slots</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Slot</span><span style="color:#24292E;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Heading</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">Heading</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> lang</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  import { h, ref } from &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  function handler() {</span></span>
<span class="line"><span style="color:#6F42C1;">    alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello World!&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  const text = ref(&#39;Hello&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  const Heading = () =&gt; h(&#39;h1&#39;, { onClick: handler }, [h(&#39;span&#39;, text.value)])</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-3-react-的-jsx-语法-来描述-ui" tabindex="-1">2.3 React 的 jsx 语法 来描述 UI <a class="header-anchor" href="#_2-3-react-的-jsx-语法-来描述-ui" aria-label="Permalink to &quot;2.3 React 的 jsx 语法 来描述 UI&quot;">​</a></h3><ul><li>JSX 语法是 React 框架中常见的组件书写格式</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useState } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> Home</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> [text, useText] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#6F42C1;"> handler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">    alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">h1</span><span style="color:#6F42C1;"> onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{handler}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;{text}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,15)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
