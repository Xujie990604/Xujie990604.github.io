import{_ as a,c as n,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"事件处理函数的 this 指向","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/事件/事件处理的this.md","filePath":"docs/JavaScript/事件/事件处理的this.md","lastUpdated":1712646874000}'),p={name:"docs/JavaScript/事件/事件处理的this.md"};function t(o,s,i,r,c,u){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="事件处理函数的-this-指向" tabindex="-1">事件处理函数的 this 指向 <a class="header-anchor" href="#事件处理函数的-this-指向" aria-label="Permalink to &quot;事件处理函数的 this 指向&quot;">​</a></h1><h2 id="this-指向" tabindex="-1">this 指向 <a class="header-anchor" href="#this-指向" aria-label="Permalink to &quot;this 指向&quot;">​</a></h2><h3 id="通过-javascript-来指定事件处理程序" tabindex="-1">通过 javascript 来指定事件处理程序 <a class="header-anchor" href="#通过-javascript-来指定事件处理程序" aria-label="Permalink to &quot;通过 javascript 来指定事件处理程序&quot;">​</a></h3><ul><li>在事件处理程序中，在动态绑定中(无论是把函数的引用给事件函数还是直接把函数的定义放到事件处理函数上)，函数中的 this 永远指向的是触发它的元素。因为此时是这个元素调用了这个函数。</li><li>但是如果把 test() 赋值给事件上，那么 this 值为 window，因为只给一个函数名是把函数的引用赋值给了事件，将来这个函数是被这个元素调用的，也就是说执行环境是 DOM 元素，但是要是把 test()直接赋值给事件，那就是把函数的执行结果赋值给了事件，那么这个函数时在全局被调用的。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 两种不同的动态绑定事件的方法</span></span>
<span class="line"><span style="color:#24292E;">ele.</span><span style="color:#6F42C1;">onXXX</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">// 程序的this指向dom元素本身</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 程序的this指向dom元素本身</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="在行内绑定事件处理程序" tabindex="-1">在行内绑定事件处理程序 <a class="header-anchor" href="#在行内绑定事件处理程序" aria-label="Permalink to &quot;在行内绑定事件处理程序&quot;">​</a></h4><ul><li>在行内绑定函数时，函数里面的 this 指的是 window。因为此时调用这个函数的是 window。</li><li>行间内引用必须要加()吗？ 是的 因为要求加入的是能够执行的代码，而不是一个函数的引用地址。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#6F42C1;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#6F42C1;"> onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;a()&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  xujie</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> a</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="在行间直接使用语句" tabindex="-1">在行间直接使用语句 <a class="header-anchor" href="#在行间直接使用语句" aria-label="Permalink to &quot;在行间直接使用语句&quot;">​</a></h4><ul><li>没有绑定方法而是直接在元素中指定了语句，这时函数中的 this 就是元素本身。因为 js 代码直接写在了 html 中，此时的 this 就是点击事件发生时的目标元素。</li><li>可以使用 this.href 来直接访问当前元素的 href 属性。(也可以直接使用 href，因为 js 的内部机制)</li><li>在行间内直接使用语句的时候，在执行时会动态的创建一个函数，在这个函数中使用 with 改变了作用域，使用了 with(this)语句，因为 this 就是执行当前元素，所以直接使用 href 就能直接访问，(如果是 input，能够直接访问到 input 的父元素 Form 的作用域，方便各个 input 表单之间互相通信)</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#6F42C1;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#6F42C1;"> onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;console.log(this)&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  xujie</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,11)]))}const b=a(p,[["render",t]]);export{h as __pageData,b as default};
