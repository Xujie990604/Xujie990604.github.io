import{_ as a,c as l,o as n,ag as e}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"MYSQL","description":"","frontmatter":{},"headers":[],"relativePath":"docs/MySql/MYSQL基础.md","filePath":"docs/MySql/MYSQL基础.md","lastUpdated":1712646874000}'),o={name:"docs/MySql/MYSQL基础.md"};function p(r,s,i,t,c,u){return n(),l("div",null,s[0]||(s[0]=[e(`<h1 id="mysql" tabindex="-1">MYSQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MYSQL&quot;">​</a></h1><h2 id="sql语句" tabindex="-1">SQL语句 <a class="header-anchor" href="#sql语句" aria-label="Permalink to &quot;SQL语句&quot;">​</a></h2><ul><li><p>sql 语句大小写不敏感</p></li><li><p>表名 列名 大小写敏感</p></li><li><p>语句的后面需要 ; 结尾</p></li><li><p>关键字或者表明作为字段名称使用 \`\` 包裹</p></li><li><p>sql主句</p></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">-- 从 指定表名称 中查询出 所有 的数据</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#D73A49;"> *</span><span style="color:#D73A49;"> from</span><span style="color:#24292E;"> 表名称;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 从 指定表名称 中查询出 指定列 的数据</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> 列名称 </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> 表名称;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 向 指定数据表 中插入数据</span></span>
<span class="line"><span style="color:#D73A49;">insert into</span><span style="color:#24292E;"> 指定表 (列1， 列2) </span><span style="color:#D73A49;">values</span><span style="color:#24292E;"> (值1， 值2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 当满足某个条件时，在 指定数据表中 更新数据 (=两端不准有空格)</span></span>
<span class="line"><span style="color:#D73A49;">update</span><span style="color:#24292E;"> 指定表 </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> 列名1</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;值&#39;</span><span style="color:#24292E;">, 列名2</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;值2&#39;</span><span style="color:#D73A49;"> where</span><span style="color:#032F62;"> \`列名3\`</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;值3&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 当满足某个条件时，在 是指定数据表 删除数据</span></span>
<span class="line"><span style="color:#D73A49;">delete</span><span style="color:#D73A49;"> from</span><span style="color:#24292E;"> 指定表名称 </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> 列名</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;值&#39;</span><span style="color:#24292E;"> ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="where-子句-限定条件" tabindex="-1">where 子句 限定条件 <a class="header-anchor" href="#where-子句-限定条件" aria-label="Permalink to &quot;where 子句 限定条件&quot;">​</a></h3><ol><li>and</li><li>or</li></ol><h3 id="模糊查询使用-like-关键字" tabindex="-1">模糊查询使用 like 关键字 <a class="header-anchor" href="#模糊查询使用-like-关键字" aria-label="Permalink to &quot;模糊查询使用 like 关键字&quot;">​</a></h3><ol><li>% 匹配任意个任意字符</li><li>_ 匹配一个任意字符</li></ol><h3 id="order-by-子句-默认升序排序" tabindex="-1">order by 子句(默认升序排序) <a class="header-anchor" href="#order-by-子句-默认升序排序" aria-label="Permalink to &quot;order by 子句(默认升序排序)&quot;">​</a></h3><ol><li>asc 关键字是指定升序排序</li><li>desc 关键字是指定降序排序</li></ol><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">-- 得到的数据先按照status降序排序，在按照username升序排序</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#D73A49;"> *</span><span style="color:#D73A49;"> from</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">order by</span><span style="color:#D73A49;"> status</span><span style="color:#D73A49;"> DESC</span><span style="color:#24292E;">, username </span><span style="color:#D73A49;">ASC</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="聚合函数-将数据表中的数据看成一组进行操作" tabindex="-1">聚合函数: 将数据表中的数据看成一组进行操作 <a class="header-anchor" href="#聚合函数-将数据表中的数据看成一组进行操作" aria-label="Permalink to &quot;聚合函数: 将数据表中的数据看成一组进行操作&quot;">​</a></h3><ul><li>sum(&#39;xxx&#39;) 求和</li><li>avg(&#39;xxx&#39;) 平均值</li><li>max(&#39;xxx&#39;) 最大值</li><li>min(&#39;xxx&#39;) 最小值</li><li>count(*) 查询结果的总数据条数</li></ul><h4 id="group-by分组" tabindex="-1">group by分组 <a class="header-anchor" href="#group-by分组" aria-label="Permalink to &quot;group by分组&quot;">​</a></h4><ul><li>使用聚合函数的时候相当于将整个数据表中的数据看成一组数据，group by 就是将整个数据表按照某个字段进行分类，分成多组数据</li><li>group by 的约束 having: 对查询的结果进行一些约束(之前以班级为分组查出来了平均分数，现在通过 having 来限定展示平均分高于 80 分的班级)</li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li>as 关键字可以给列去设置别名</li></ul><h2 id="多表查询" tabindex="-1">多表查询 <a class="header-anchor" href="#多表查询" aria-label="Permalink to &quot;多表查询&quot;">​</a></h2><ul><li>所有数据都放到一张表中会导致数据表难以维护</li><li>并且会存储很多的冗余数据</li><li>使用外键将当前表的内容和其他表中的内容关联起来</li></ul><h3 id="表连接" tabindex="-1">表连接 <a class="header-anchor" href="#表连接" aria-label="Permalink to &quot;表连接&quot;">​</a></h3><ul><li>直接查询两个表的话，得到的结果是笛卡尔乘积 X*Y</li></ul><ol><li>左连接 X left join Y on</li><li>右连接</li><li>内连接</li><li>外连接</li></ol><h3 id="表关系" tabindex="-1">表关系 <a class="header-anchor" href="#表关系" aria-label="Permalink to &quot;表关系&quot;">​</a></h3><ul><li>一对一</li><li>一对多</li><li>多对多</li></ul>`,24)]))}const h=a(o,[["render",p]]);export{b as __pageData,h as default};
