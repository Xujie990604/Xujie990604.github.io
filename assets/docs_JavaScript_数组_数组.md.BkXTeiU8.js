import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/数组/数组.md","filePath":"docs/JavaScript/数组/数组.md","lastUpdated":1712646874000}'),o={name:"docs/JavaScript/数组/数组.md"};function e(r,s,c,t,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><h2 id="一、javascript-数组的特点" tabindex="-1">一、JavaScript 数组的特点 <a class="header-anchor" href="#一、javascript-数组的特点" aria-label="Permalink to &quot;一、JavaScript 数组的特点&quot;">​</a></h2><ol><li>JS 里面的数组十分不严格，几乎不报错。数组是一种特殊的对象(<code>映射表</code>)。</li><li>溢出读和溢出写(溢出写的话会重新定义数组的长度)都不会报错。数组中<code>未定义</code>、<code>溢出访问</code>的数据都是 <code>undefined</code></li><li>存储任意类型：由于 JavaScript 弱处理性语言，数组的每一项都可以是不同类型的数据</li><li>动态大小：JavaScript 中的数组大小是可以动态调整的，可以随着数据的添加自动增长以容纳更多的数据</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 溢出读</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 溢出写</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [1, 2, 3, undefined, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 存储任意类型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> fuc</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#032F62;"> &quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, fuc, obj];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_1-1-length-属性" tabindex="-1">1.1 length 属性 <a class="header-anchor" href="#_1-1-length-属性" aria-label="Permalink to &quot;1.1 length 属性&quot;">​</a></h3><ul><li>数组的长度</li><li>不是只读的, 可以通过 length 属性重新定义数组的长度，</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 通过 length 缩短数组长度</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> colors</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">colors.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">colors; </span><span style="color:#6A737D;">// [&quot;green&quot;, &quot;blue&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 通过 length 扩充数组长度，数组中未定义的值都是 undefined。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> colors</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">colors.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">colors; </span><span style="color:#6A737D;">// [&quot;green&quot;, &quot;blue&quot;, &quot;red&quot;, undefined]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="二、数组的定义形式" tabindex="-1">二、数组的定义形式 <a class="header-anchor" href="#二、数组的定义形式" aria-label="Permalink to &quot;二、数组的定义形式&quot;">​</a></h2><h3 id="_2-1-数组字面量" tabindex="-1">2.1 数组字面量 <a class="header-anchor" href="#_2-1-数组字面量" aria-label="Permalink to &quot;2.1 数组字面量&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 数组字面量定义</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-2-使用构造函数-不推荐使用" tabindex="-1">2.2 使用构造函数 <code>!不推荐使用</code> <a class="header-anchor" href="#_2-2-使用构造函数-不推荐使用" aria-label="Permalink to &quot;2.2 使用构造函数 \`!不推荐使用\`&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 创建初始长度为 3 的稀松数组(\`!构造函数没办法生成仅单个数值的数组\` \`!JS糟粕之一\`)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 创建一个 colors 数组</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> colors </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Array</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [&#39;green&#39;, &#39;blue&#39;, &#39;red&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="三、数组方法" tabindex="-1">三、数组方法 <a class="header-anchor" href="#三、数组方法" aria-label="Permalink to &quot;三、数组方法&quot;">​</a></h2><h3 id="_3-1-生成数组的方法" tabindex="-1">3.1 生成数组的方法 <a class="header-anchor" href="#_3-1-生成数组的方法" aria-label="Permalink to &quot;3.1 生成数组的方法&quot;">​</a></h3><h4 id="_1-array-from" tabindex="-1">(1) Array.from <a class="header-anchor" href="#_1-array-from" aria-label="Permalink to &quot;(1) Array.from&quot;">​</a></h4><ul><li>用于将两类对象转化为真正的数组 1.类数组 2. 任何可迭代(Iterable)的结构</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. arguments(属于类数组) 转化为数组</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">num2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">  arguments</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// { 0: 1, 1: 2, callee: add(num1, num2), ... }</span></span>
<span class="line"><span style="color:#24292E;">  Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1, 2]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. Set(可迭代结构) 转化为数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> set</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Set</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">set; </span><span style="color:#6A737D;">// Set(3) {1, 2, 3}</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(set); </span><span style="color:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 进行数组的浅拷贝</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, obj];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr2</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, obj]); </span><span style="color:#6A737D;">// [1, &quot;2&quot;, { name: &#39;foo&#39; }]</span></span>
<span class="line"><span style="color:#24292E;">arr2.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;bar&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr1[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].name; </span><span style="color:#6A737D;">// bar</span></span>
<span class="line"><span style="color:#24292E;">arr2[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].name; </span><span style="color:#6A737D;">// bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4. 使用第二个参数，增强新数组的值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(arr, (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [2, 4, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="_2-array-of" tabindex="-1">(2) Array.of <a class="header-anchor" href="#_2-array-of" aria-label="Permalink to &quot;(2) Array.of&quot;">​</a></h4><ul><li>用于将一组值转化为数组(<code>!是为了弥补 Array() 构造函数的缺陷</code>)</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">new Array()</td><td style="text-align:center;">[]</td></tr><tr><td style="text-align:center;">Array.of()</td><td style="text-align:center;">[]</td></tr><tr><td style="text-align:center;">new Array(3) <code>!注意结果</code></td><td style="text-align:center;">[undefined, undefined, undefined]</td></tr><tr><td style="text-align:center;">Array.of(3)</td><td style="text-align:center;">[3]</td></tr><tr><td style="text-align:center;">new Array(3, 11, 8)</td><td style="text-align:center;">[3, 11, 8]</td></tr><tr><td style="text-align:center;">Array.of(3, 11, 8)</td><td style="text-align:center;">[3, 11, 8]</td></tr></tbody></table><h3 id="_3-2-检测数组类型" tabindex="-1">3.2 检测数组类型 <a class="header-anchor" href="#_3-2-检测数组类型" aria-label="Permalink to &quot;3.2 检测数组类型&quot;">​</a></h3><h4 id="_1-instanceof" tabindex="-1">（1）instanceof <a class="header-anchor" href="#_1-instanceof" aria-label="Permalink to &quot;（1）instanceof&quot;">​</a></h4><ul><li>在只有一个网页的情况下，可以使用 instanceof 判断是数组还是对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> colors</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">colors </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Array</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-array-isarray" tabindex="-1">(2) Array.isArray <a class="header-anchor" href="#_2-array-isarray" aria-label="Permalink to &quot;(2) Array.isArray&quot;">​</a></h4><ul><li>ES6 提供了 Array.isArray() 方法来判断一个值是否为数组</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 验证数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> colors</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(colors); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 验证类数组</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-3-迭代器方法" tabindex="-1">3.3 迭代器方法 <a class="header-anchor" href="#_3-3-迭代器方法" aria-label="Permalink to &quot;3.3 迭代器方法&quot;">​</a></h3><ul><li><code>注意</code>，这三个方法的返回值不是数组，而是迭代器</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> colors</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(colors.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// [0, 1, 2]</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(colors.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// [&quot;green&quot;, &quot;blue&quot;, &quot;red&quot;]</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(colors.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// [[0, &#39;green&#39;], [1, &#39;blue&#39;], [2, &#39;red&#39;]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-4-数组填充方法" tabindex="-1">3.4 数组填充方法 <a class="header-anchor" href="#_3-4-数组填充方法" aria-label="Permalink to &quot;3.4 数组填充方法&quot;">​</a></h3><ul><li>fill 向已有数组中插入值</li><li>返回值：新数组</li><li>改变原数组</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 指定填充值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> zeroes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">zeroes.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [6, 6, 6, 6, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定填充值 + 开始索引</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> zeroes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">zeroes.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [0, 0, 0, 6, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定填充值 + 开始索引 + 结束索引</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> zeroes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">zeroes.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [0, 0, 0, 6, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定填充值 + 开始索引(支持负数)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> zeroes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">zeroes.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [0, 0, 6, 6, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 结束索引超出数组真实长度，超过部分会自动忽略，不会改变原数组的长度</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> zeroes</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">zeroes.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [0, 0, 0, 6, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_3-5-数组转化方法" tabindex="-1">3.5 数组转化方法 <a class="header-anchor" href="#_3-5-数组转化方法" aria-label="Permalink to &quot;3.5 数组转化方法&quot;">​</a></h3><ul><li>数组转字符串</li><li>返回值：字符串</li><li>不改变原数组</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 按照传入的参数来连接数组，并返回字符串，默认用 , 连接</span></span>
<span class="line"><span style="color:#6A737D;">// undefined null 会转化为空</span></span>
<span class="line"><span style="color:#24292E;">(method) Array.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(separator</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): string</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// &#39;1-2---5&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-6-栈方法" tabindex="-1">3.6 栈方法 <a class="header-anchor" href="#_3-6-栈方法" aria-label="Permalink to &quot;3.6 栈方法&quot;">​</a></h3><ul><li>ECMAScript 数组提供了 push()和 pop()方法，以实现类似栈的行为</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 向栈顶推入数据, 返回值为当前数组长度</span></span>
<span class="line"><span style="color:#24292E;">(method) Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">any</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">items: any[]): number</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">arr;    </span><span style="color:#6A737D;">// [1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从栈顶取一条数据，返回值为取出的值</span></span>
<span class="line"><span style="color:#24292E;">(method) Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">any</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(): any</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">()   </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">arr         </span><span style="color:#6A737D;">// [1, 2, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_3-7-队列方法" tabindex="-1">3.7 队列方法 <a class="header-anchor" href="#_3-7-队列方法" aria-label="Permalink to &quot;3.7 队列方法&quot;">​</a></h3><ul><li>ECMAScript 数组提供了 push()和 shift()方法, 以实现类似队列的行为</li><li>通过使用 unshift()和 pop()方法，能在相反的方向上操作队列</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// push 向队列尾部添加数据</span></span>
<span class="line"><span style="color:#6A737D;">// shift 从队列头部拿取数据</span></span>
<span class="line"><span style="color:#24292E;">(method) Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">any</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">(): any</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [2, 3, 4, 5, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-8-排序方法" tabindex="-1">3.8 排序方法 <a class="header-anchor" href="#_3-8-排序方法" aria-label="Permalink to &quot;3.8 排序方法&quot;">​</a></h3><h4 id="_1-reverse" tabindex="-1">(1) reverse <a class="header-anchor" href="#_1-reverse" aria-label="Permalink to &quot;(1) reverse&quot;">​</a></h4><ul><li>将数组逆转</li><li>返回值：新数组</li><li>改变原数组</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(method) Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">any</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(): any[]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [5, 4, 3, 2, 1]</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [5, 4, 3, 2, 1]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-sort" tabindex="-1">(2) sort <a class="header-anchor" href="#_2-sort" aria-label="Permalink to &quot;(2) sort&quot;">​</a></h4><ul><li>返回值：新数组</li><li>改变原数组</li><li><code>sort 默认的排序方式有问题</code>，需要自己写回调函数来决定排序顺序，排序结果由<code>回调函数返回值</code>决定 <ol><li>返回值负数，前面的数在前面</li><li>返回值为正数，后面的数在前面</li><li>为 0 ，不动</li></ol></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [1, 15, 2, 20, 3, 4, 5] 结果并不是我们想要的</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5, 15, 20]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-9-操作方法" tabindex="-1">3.9 操作方法 <a class="header-anchor" href="#_3-9-操作方法" aria-label="Permalink to &quot;3.9 操作方法&quot;">​</a></h3><h4 id="_1-concat" tabindex="-1">（1）concat <a class="header-anchor" href="#_1-concat" aria-label="Permalink to &quot;（1）concat&quot;">​</a></h4><ul><li>concat 用于连接数组</li><li>返回值: 新数组</li><li>不改变原数组</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">arr2; </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-slice" tabindex="-1">(2) slice <a class="header-anchor" href="#_2-slice" aria-label="Permalink to &quot;(2) slice&quot;">​</a></h4><ul><li>用于创建一个包含原数组中一个或者多个元素的新数组</li><li>返回值：新数组</li><li>不改变原数组</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(method) Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">any</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(start</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">, end</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): any[]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#6A737D;">// 支持负数索引</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3-splice" tabindex="-1">(3) splice <a class="header-anchor" href="#_3-splice" aria-label="Permalink to &quot;(3) splice&quot;">​</a></h4><ul><li><code>最强大的方法</code>, 可实现删除，插入，替换</li><li>返回值：截取数据时-截取的数据， 添加数据时-空数组</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 删除数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [1, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 添加数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// []</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [1, &#39;foo&#39;, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 替换</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#24292E;">arr; </span><span style="color:#6A737D;">// [1, &#39;foo&#39;, &#39;bar&#39;, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3-10-搜索和位置方法" tabindex="-1">3.10 搜索和位置方法 <a class="header-anchor" href="#_3-10-搜索和位置方法" aria-label="Permalink to &quot;3.10 搜索和位置方法&quot;">​</a></h3><h4 id="_1-严格相等" tabindex="-1">(1) 严格相等 <a class="header-anchor" href="#_1-严格相等" aria-label="Permalink to &quot;(1) 严格相等&quot;">​</a></h4><ul><li>使用严格相等 <code>===</code> 的搜索方法</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第四位往\`后\`搜索</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#6A737D;">// 从第四位往\`前\`搜索</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#6A737D;">// 从第四位往\`后\`搜索</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_2-断言函数" tabindex="-1">(2) 断言函数 <a class="header-anchor" href="#_2-断言函数" aria-label="Permalink to &quot;(2) 断言函数&quot;">​</a></h4><ul><li>断言函数接收 3 个参数：<code>元素</code>、<code>索引</code>和<code>数组本身</code>。断言函数<code>返回真值</code>，表示是否匹配。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 找到匹配项之后，不再继续搜索</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item.age </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 19</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// {name:&#39;bar&#39;age: 19}</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">findIndex</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item.age </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 19</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_3-11-迭代方法" tabindex="-1">3.11 迭代方法 <a class="header-anchor" href="#_3-11-迭代方法" aria-label="Permalink to &quot;3.11 迭代方法&quot;">​</a></h3><ul><li>第一个参数为回调函数、第二个参数为函数运行上下文的作用域对象</li><li>都不会改变原数组、都不会对空数组进行检测</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 用于检测数组所有元素是否都符合指定条件</span></span>
<span class="line"><span style="color:#6A737D;">// 返回值：布尔值</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 用于检测数组中是否有元素满足指定条件</span></span>
<span class="line"><span style="color:#6A737D;">// 返回值：布尔值</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 用于遍历数组的每个元素</span></span>
<span class="line"><span style="color:#6A737D;">// 返回值: void</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(item));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4. 用于遍历数组的每个元素, 并将每个元素都执行一次回调函数的运算</span></span>
<span class="line"><span style="color:#6A737D;">// 返回值：经过回调函数运算的元素组成的新数组</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 5. 用于筛选数组中符合条件的所有元素</span></span>
<span class="line"><span style="color:#6A737D;">// 返回值：所有符合条件的元素</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_3-12-归并方法" tabindex="-1">3.12 归并方法 <a class="header-anchor" href="#_3-12-归并方法" aria-label="Permalink to &quot;3.12 归并方法&quot;">​</a></h3><ul><li>接收一个函数作为累加器，数组中的每个值（从左到右）进行累加，最终计算为一个值</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 不设置初始值时，total 直接被赋值为数组的第一项，从而减少一次循环次数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">total</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  number</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">number; </span><span style="color:#6A737D;">// 4  比数组长度少一</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 设置初始值时，循环次数与数组长度一致</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">total</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  number</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">number; </span><span style="color:#6A737D;">// 5  和数组长度一致</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,72)]))}const C=n(o,[["render",e]]);export{u as __pageData,C as default};
