import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const y=JSON.parse('{"title":"Vue 组件的基础","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vue/Vue官方文档解读/vue组件的基础.md","filePath":"docs/Vue/Vue官方文档解读/vue组件的基础.md","lastUpdated":1712646874000}'),p={name:"docs/Vue/Vue官方文档解读/vue组件的基础.md"};function o(t,s,r,c,i,u){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="vue-组件的基础" tabindex="-1">Vue 组件的基础 <a class="header-anchor" href="#vue-组件的基础" aria-label="Permalink to &quot;Vue 组件的基础&quot;">​</a></h1><ul><li>所有的 Vue 组件都是 Vue 实例, 全部都接受相同的选项对象(根实例独有的 el 特性除外)</li></ul><h2 id="组件和根实例的区别是实例拥有-el-选项" tabindex="-1">组件和根实例的区别是实例拥有 el 选项 <a class="header-anchor" href="#组件和根实例的区别是实例拥有-el-选项" aria-label="Permalink to &quot;组件和根实例的区别是实例拥有 el 选项&quot;">​</a></h2><h3 id="vue-extend" tabindex="-1">Vue.extend() <a class="header-anchor" href="#vue-extend" aria-label="Permalink to &quot;Vue.extend()&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用 Vue.extend(options) 生成的不是一个组件实例，而是一个构造器(带有一部分预设参数的 构造函数)</span></span>
<span class="line"><span style="color:#6A737D;">// Myself ==  ƒ VueComponent(options) {this._init(options);}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> Myself</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> Vue.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">&quot;&lt;p&gt;使用Vue.extend()创建的组件&lt;/p&gt;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> mySelfComponent</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Myself</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 new 来执行构造函数，mySelfComponent 的值是一个 Vue 对象</span></span>
<span class="line"><span style="color:#6A737D;">// mySelfComponent == VueComponent {_uid: 2, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: VueComponent, …}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 需要使用 $mount() 方法来把这个组件挂载到 DOM 节点上</span></span>
<span class="line"><span style="color:#6A737D;">// 或者使用 Vue.component() 来把这个组件注册为全局组件</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Myself</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#my-self&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="全局注册-router-link-组件就是-router-自动注册的全局组件-我们不需要在当前组件中-import-就可以使用" tabindex="-1">全局注册(router-link 组件就是 router 自动注册的全局组件，我们不需要在当前组件中 import 就可以使用) <a class="header-anchor" href="#全局注册-router-link-组件就是-router-自动注册的全局组件-我们不需要在当前组件中-import-就可以使用" aria-label="Permalink to &quot;全局注册(router-link 组件就是 router 自动注册的全局组件，我们不需要在当前组件中 import 就可以使用)&quot;">​</a></h3><ul><li>对于一些使用频率很高，但是逻辑非常少的组件，我们可以在 main.js 中全局注册组件(在 new Vue({...})之前)</li><li>Vue.component 的作用仅是用来注册(把一个 Vue 实例赋给一个名字，或者挂载到 DOM 上)。Vue.component 内部默认调用了 Vue.extend 方法来生成 Vue 实例。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在 main.js 中定义全局组件，然后在整个项目中都可以直接使用这个组件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> GlobalButton </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./GlobalButton.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;global-button&quot;</span><span style="color:#24292E;">, GlobalButton);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 options 参数的方式来注册全局组件。</span></span>
<span class="line"><span style="color:#6A737D;">// 其实 Vue.component 内部默认调用了 Vue.extend 方法</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;myself-component&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&quot;自定义的全局组件&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">&quot;&lt;div&gt;{{name}}&lt;/div&gt;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="局部注册" tabindex="-1">局部注册 <a class="header-anchor" href="#局部注册" aria-label="Permalink to &quot;局部注册&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> TestViewPageVue </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./TestViewPage.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 import 导入的 TestViewPageVue 本质上就是一个对象</span></span>
<span class="line"><span style="color:#6A737D;">// Vue 会在导出 .vue 文件的时候将 template 模板编译为 render 函数，放到 TestViewPageVue 对象中</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(TestViewPageVue);</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 在一个组件的 components 属性中定义的组件就是一个局部组件</span></span>
<span class="line"><span style="color:#6A737D;">  // 在这里也是默认调用了一次 Vue.extend()</span></span>
<span class="line"><span style="color:#24292E;">  components: { TestViewPage },</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;TestView&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h2><ul><li>为了让组件更加的具有扩展性。</li><li>普通插槽如果想要使用变量的话，只能使用父级模板里面的内容。不能使用子模板里面的内容</li><li>后备内容：直接在子组件的插槽(slot)标签里面放置内容。如果父级没有传内容过来，默认显示，如果父级有东西传入，显示父级传入的内容。</li><li>插槽的具体作用就是替换，直接使用组件内的内容替换定义的插槽的标签，所以就导致一些问题，不要再 slot 插槽标签上使用一些语句(v-if :class={...})，尽量在 slot 外面添加一层 div 用于处理业务逻辑。</li></ul><h3 id="具名插槽" tabindex="-1">具名插槽 <a class="header-anchor" href="#具名插槽" aria-label="Permalink to &quot;具名插槽&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">// 在子组件中使用 slot 元素 搭配 name 属性来定义一个具名插槽</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">// 在父组件中使用 template 搭配 v-slot 指令替换指定的某一个插槽</span><span style="color:#24292E;"> // v-slot</span></span>
<span class="line"><span style="color:#24292E;">指令的语法糖为 # (和 v-bind</span></span>
<span class="line"><span style="color:#24292E;">等其他指令一样，只有在有参数的时候才可以使用语法糖的形式)</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#6F42C1;"> v-slot:header</span><span style="color:#24292E;">&gt; ...... &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>如果只有一个插槽，其实这个插槽是有一个默认的名字的：default(记住这个名字在使用作用域插槽时很重要)</li></ul><h3 id="作用域插槽" tabindex="-1">作用域插槽 <a class="header-anchor" href="#作用域插槽" aria-label="Permalink to &quot;作用域插槽&quot;">​</a></h3><ul><li>在父组件的作用域内获取子组件的变量的值，用来插槽中。</li><li>过程其实和父子组件用 props 传值类似，只不过作用域插槽是从子组件往父组件传。</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 子组件中定义名字为 header 的具名插槽，并且传递数据 data 给父组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#6F42C1;"> :data</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 父组件中引入子组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">app-model</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 表示将 header 具名插槽中传递过来的数据，命名为slotData进行使用 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#6F42C1;"> v-slot:header</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;slotData&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;{{slotData.data}}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">app-model</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h2><ul><li>动态切换组件的时候，可以使用 <code>&lt;keep-alive&gt;</code> 组件来保留动态组件的状态(和路由切换保留状态类似)</li></ul><h3 id="attribute-和-property-的区别" tabindex="-1">attribute 和 property 的区别 <a class="header-anchor" href="#attribute-和-property-的区别" aria-label="Permalink to &quot;attribute 和 property 的区别&quot;">​</a></h3><ul><li>attribute 是元素标签的属性，property 是元素对象的属性</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// input 的 value attribute 是通过标签里的 value=&#39;test value&#39;定义的，可以通过input.getAttribute(&#39;value&#39;) 获取，可以通过 input.setAttribute(&#39;value&#39;, &#39;new Value&#39;) 更新</span></span>
<span class="line"><span style="color:#6A737D;">// input 的 value property 可通过 input.value 获取和更新，初始值是与 attribute 中的赋值一致的</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#6F42C1;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test value&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  let input = document.getElementById(&#39;input&#39;);</span></span>
<span class="line"><span style="color:#24292E;">  console.log(input.getAttribute(&#39;value&#39;)); // test value</span></span>
<span class="line"><span style="color:#24292E;">  console.log(input.value); // test value</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="异步组件" tabindex="-1">异步组件 <a class="header-anchor" href="#异步组件" aria-label="Permalink to &quot;异步组件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 注册全局异步组件</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;async-component&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./my-async-component&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">// 注册局部异步组件</span></span>
<span class="line"><span style="color:#6F42C1;">components</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">    &#39;async-component&#39;</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#D73A49;"> import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./AsyncComponent.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 会渲染出哪个组件，由 currentTabComponent 动态决定</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">component</span><span style="color:#6F42C1;"> v-bind</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">is</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;currentTabComponent&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">component</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="解析-dom-模板时注意事项" tabindex="-1">解析 DOM 模板时注意事项 <a class="header-anchor" href="#解析-dom-模板时注意事项" aria-label="Permalink to &quot;解析 DOM 模板时注意事项&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span></span>
<span class="line"><span style="color:#6F42C1;">    is</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;todo-item&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">    v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;(todo, index) in todos&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">    v-bind:key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;todo.id&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">    v-bind:title</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;todo.title&quot;</span></span>
<span class="line"><span style="color:#24292E;">  &gt;&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>这个 is attribute 是十分必要的，is attribute 的作用是将 li DOM 结构变成 todo-item 组件来加载。</li><li>不直接将 todo-item 组件 写在 ul 中，是因为 ul 中只能包含 li。否则浏览器 DOM 解析时会报错。(Vue 的模板加载策略是先按照 html 语法来解析模板，然后再用 Vue 来解析 Vue 使用到的语法)</li></ul>`,29)]))}const d=n(p,[["render",o]]);export{y as __pageData,d as default};
