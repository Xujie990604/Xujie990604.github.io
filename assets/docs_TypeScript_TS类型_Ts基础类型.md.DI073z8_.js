import{_ as a,c as n,o as e,ag as l}from"./chunks/framework.BDwTZuFy.js";const y=JSON.parse('{"title":"基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS类型/Ts基础类型.md","filePath":"docs/TypeScript/TS类型/Ts基础类型.md","lastUpdated":1722758955000}'),o={name:"docs/TypeScript/TS类型/Ts基础类型.md"};function p(t,s,r,i,c,d){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h1><h2 id="一、布尔类型" tabindex="-1">一、布尔类型 <a class="header-anchor" href="#一、布尔类型" aria-label="Permalink to &quot;一、布尔类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isTrue</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> boolean</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="二、数字类型" tabindex="-1">二、数字类型 <a class="header-anchor" href="#二、数字类型" aria-label="Permalink to &quot;二、数字类型&quot;">​</a></h2><ul><li>TS 中所有的数字都是浮点数(不区分浮点数和整数类型)</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 12</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="三、字符串类型" tabindex="-1">三、字符串类型 <a class="header-anchor" href="#三、字符串类型" aria-label="Permalink to &quot;三、字符串类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;no One&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="四、undefined-null" tabindex="-1">四、undefined null <a class="header-anchor" href="#四、undefined-null" aria-label="Permalink to &quot;四、undefined null&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> u</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> undefined</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> null</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="五、any" tabindex="-1">五、any <a class="header-anchor" href="#五、any" aria-label="Permalink to &quot;五、any&quot;">​</a></h2><ul><li>在你不确定变量的指定类型的时候，使用 any 来<code>取消类型检查</code>。any 是类型系统的<code>顶级类型</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 利用 any 来定义包含不同数据类型的数组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> list</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;no One&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">list[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">//no One</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="六、unknown" tabindex="-1">六、unknown <a class="header-anchor" href="#六、unknown" aria-label="Permalink to &quot;六、unknown&quot;">​</a></h2><ul><li>unknown 类型能接受任何类型(unknown 也是类型系统的顶级类型)</li><li>unknown 类型代表任何值，类似于 any, 但是更安全。给 unknown 类型赋值时可以避免类型错误，但是不能访问任何属性.</li></ul><h2 id="七、void" tabindex="-1">七、void <a class="header-anchor" href="#七、void" aria-label="Permalink to &quot;七、void&quot;">​</a></h2><ul><li>表现不返回显式值的函数的返回值</li><li>在 JavaScript 中 不返回任何值的函数将返回 undefined, 但是在 TypeScript 中 void 与 undefined 不同</li></ul><h2 id="八、never-类型" tabindex="-1">八、never 类型 <a class="header-anchor" href="#八、never-类型" aria-label="Permalink to &quot;八、never 类型&quot;">​</a></h2><ol><li>表示的是永不存在的值的类型</li><li>never 是任何类型的子类型，可以赋值给任何类型，没有任何类型是 never 的子类型(除了自身),即使是 any 也不能赋值给 never。</li></ol>`,19)]))}const h=a(o,[["render",p]]);export{y as __pageData,h as default};
