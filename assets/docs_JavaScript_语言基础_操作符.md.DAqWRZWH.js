import{_ as l,c as e,o as s,ag as o}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"操作符","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/语言基础/操作符.md","filePath":"docs/JavaScript/语言基础/操作符.md","lastUpdated":1735478813000}'),n={name:"docs/JavaScript/语言基础/操作符.md"};function i(t,a,r,c,p,d){return s(),e("div",null,a[0]||(a[0]=[o(`<h1 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;操作符&quot;">​</a></h1><h2 id="一、运算优先级" tabindex="-1">一、运算优先级 <a class="header-anchor" href="#一、运算优先级" aria-label="Permalink to &quot;一、运算优先级&quot;">​</a></h2><ol><li>计算的顺序从左到右</li><li>()的计算优先级最高</li><li>运算符主要还是看运算的结果，运算过程中<code>产生的数值是附属品</code></li></ol><h2 id="二、赋值运算符" tabindex="-1">二、赋值运算符 <a class="header-anchor" href="#二、赋值运算符" aria-label="Permalink to &quot;二、赋值运算符&quot;">​</a></h2><ol><li><code>=</code>: 赋值的顺序从右到左</li><li>赋值表达式有<code>返回值</code></li></ol><h2 id="三、逻辑运算符" tabindex="-1">三、逻辑运算符 <a class="header-anchor" href="#三、逻辑运算符" aria-label="Permalink to &quot;三、逻辑运算符&quot;">​</a></h2><ul><li>|| 运算符碰到表达式转化为布尔值为 true 时就输出该表达式。直到最后一个表达式无论真假都输出。(<code>短路操作符</code>)</li><li>&amp;&amp; 运算符碰到表达式转化为布尔值为 false 时就输出该表达式。直到最后一个表达式无论真假都输出。(<code>短路操作符</code>)</li></ul><ol><li>&amp;&amp; 优先级大于 ||</li><li>|| 经常在兼容里用到, 返回一个能用的。</li><li>obj.name &amp;&amp; obj.name.length 可以避免因为 obj.name 是 undefined 而报错</li></ol><ul><li>! 逻辑非：把表达式转化为布尔值在取反</li><li>！！ 把表达式转化为布尔值在取反后再取反，相当于表达式转换为布尔值, 和 Boolean() 函数作用一样。</li></ul><h2 id="四、乘性运算符" tabindex="-1">四、乘性运算符 <a class="header-anchor" href="#四、乘性运算符" aria-label="Permalink to &quot;四、乘性运算符&quot;">​</a></h2><ul><li><p><code>*</code>乘法</p></li><li><p><code>/</code> 除法</p></li><li><p>求模 <code>%</code></p></li><li><p>指数操作符 <code>**</code></p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">3</span><span style="color:#D73A49;"> **</span><span style="color:#005CC5;"> 2</span><span style="color:#D73A49;"> ===</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="五、加性运算符" tabindex="-1">五、加性运算符 <a class="header-anchor" href="#五、加性运算符" aria-label="Permalink to &quot;五、加性运算符&quot;">​</a></h2><ul><li><p><code>+</code> 加法</p></li><li><p>减法 <code>-</code></p></li></ul><h2 id="六、关系运算符" tabindex="-1">六、关系运算符 &gt; &lt; &gt;= &lt;= <a class="header-anchor" href="#六、关系运算符" aria-label="Permalink to &quot;六、关系运算符 &gt; &lt; &gt;= &lt;=&quot;">​</a></h2><ul><li>字符串在对比时，对比的是字符的 asc 码值。且从第一个符号开始，依次对比</li><li>任何关系运算符在比较 NaN 时返回值都是 false</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">NaN</span><span style="color:#D73A49;"> &lt;</span><span style="color:#005CC5;"> 3</span><span style="color:#6A737D;">  // false</span></span>
<span class="line"><span style="color:#005CC5;">NaN</span><span style="color:#D73A49;"> &gt;=</span><span style="color:#005CC5;"> 3</span><span style="color:#6A737D;"> // false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 先比较 &quot;1&quot; 和&quot;8&quot;, &quot;1&quot; 是小于 &quot;8&quot; 的</span></span>
<span class="line"><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#D73A49;"> &gt;</span><span style="color:#032F62;"> &quot;8&quot;</span><span style="color:#6A737D;">  // false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="七、-和" tabindex="-1">七、== 和 ！= <a class="header-anchor" href="#七、-和" aria-label="Permalink to &quot;七、== 和 ！=&quot;">​</a></h2><ul><li>对比时，会发生类型转换</li><li>引用值：比较的是地址。</li><li>原始值：比较的是数值。</li><li>null 与 undefined 相等</li><li>null 与 undefined 不能转化为其他类型的值再进行比较</li><li><code>!不推荐使用</code></li></ul><h2 id="八、-和" tabindex="-1">八、 === 和！== <a class="header-anchor" href="#八、-和" aria-label="Permalink to &quot;八、 === 和！==&quot;">​</a></h2><ul><li>不会发生类型转换</li><li><code>!推荐使用全等和不全等符号</code></li></ul><h2 id="九、逗号运算符" tabindex="-1">九、逗号运算符 <a class="header-anchor" href="#九、逗号运算符" aria-label="Permalink to &quot;九、逗号运算符&quot;">​</a></h2><ul><li>使用逗号运算符可以在一条语句执行多个操作，例如 <code>var a = 1, b = 2, c = 3;</code>(每一个变量都是相当于有 var 声明过的)，(但是 <code>var a = b = 123;</code> a声明过，b没有声明过)</li><li>用于返回表达式中的最后一项 <code>var num = (1, 2, 3, 4);</code> 那么 num 的值为4，因为他是最后一项</li></ul><h2 id="十、一元操作符" tabindex="-1">十、一元操作符 <a class="header-anchor" href="#十、一元操作符" aria-label="Permalink to &quot;十、一元操作符&quot;">​</a></h2><ul><li>--a(前缀减) ++a(前缀加) a--(后缀减) a++(后缀加)</li></ul><h2 id="十一、位操作符" tabindex="-1">十一、位操作符 <a class="header-anchor" href="#十一、位操作符" aria-label="Permalink to &quot;十一、位操作符&quot;">​</a></h2><ul><li>数值的底层操作，也就是操作内存中表示数据的比特(位) TODO：未涉及到实际应用场景，按照需求扩展</li></ul>`,28)]))}const b=l(n,[["render",i]]);export{h as __pageData,b as default};
