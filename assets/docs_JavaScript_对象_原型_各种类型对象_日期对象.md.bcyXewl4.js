import{_ as e,c as t,o as l,ag as s}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"Date对象","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/各种类型对象/日期对象.md","filePath":"docs/JavaScript/对象&原型/各种类型对象/日期对象.md","lastUpdated":1735478813000}'),n={name:"docs/JavaScript/对象&原型/各种类型对象/日期对象.md"};function o(i,a,r,c,d,p){return l(),t("div",null,a[0]||(a[0]=[s('<h1 id="date对象" tabindex="-1">Date对象 <a class="header-anchor" href="#date对象" aria-label="Permalink to &quot;Date对象&quot;">​</a></h1><ul><li>data 使用国际协调时间(1970年1月1日零时)经过的毫秒数进行保存日期</li><li>getTime() 返回 1970 年至今的毫秒数 测时间差(时间戳)</li></ul><h2 id="一、创建日期对象" tabindex="-1">一、创建日期对象 <a class="header-anchor" href="#一、创建日期对象" aria-label="Permalink to &quot;一、创建日期对象&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> date</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="二、继承对象方法的重写" tabindex="-1">二、继承对象方法的重写 <a class="header-anchor" href="#二、继承对象方法的重写" aria-label="Permalink to &quot;二、继承对象方法的重写&quot;">​</a></h2><ul><li>toString() 通常返回带时区信息的日期和时间</li><li>toLocaleString() 与浏览器运行的本地环境一致的日期和时间</li><li>valueOf() 返回日期的毫秒数表示。因此日期对象可以使用比较运算符进行比较，因为日期对象会调用 valueOf() 方法来隐式转换自己。</li></ul><h2 id="三、其他方法" tabindex="-1">三、其他方法 <a class="header-anchor" href="#三、其他方法" aria-label="Permalink to &quot;三、其他方法&quot;">​</a></h2><ul><li>Date.now() 方法，用于返回调用该方法时与标准时间的毫秒数。用于计算时间差。</li></ul>',8)]))}const _=e(n,[["render",o]]);export{h as __pageData,_ as default};
