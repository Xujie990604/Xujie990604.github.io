import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"IOC 控制反转","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Nest/框架哲学/控制反转.md","filePath":"docs/Nest/框架哲学/控制反转.md","lastUpdated":1750570799000}'),e={name:"docs/Nest/框架哲学/控制反转.md"};function o(c,s,r,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ioc-控制反转" tabindex="-1">IOC 控制反转 <a class="header-anchor" href="#ioc-控制反转" aria-label="Permalink to &quot;IOC 控制反转&quot;">​</a></h1><ul><li>是一种面向对象编程中的一种设计原则，用来降低计算机代码之间的耦合度，基本思想: 借助于 <code>第三方</code> 实现具有依赖关系的对象之间的解耦。第三方也就是指 <code>IOC容器</code>。使得对象依赖关系的控制权不在由开发者进行控制，而是转交给 <code>第三方</code> IOC容器。</li><li>当 A 类依赖于 B 类时，不在由开发者手动去创建 B 实例添加到 A 实例中，而是交给 <code>IOC容器</code> 去创建。A 依赖 B 的过程由主动行为变成了被动的行为，控制权颠倒过来了，这就是 <code>控制反转</code> 名称的由来</li><li>高层模块不应该依赖低层模块</li><li>控制反转是一种<code>思想</code>，<code>依赖注入</code>则是实现控制反转最典型的<code>实现方式</code>。</li><li>IOC 架构的好处就是不需要手动创建对象和根据依赖关系传入不同对象的构造器中，一切都是自动扫描并创建，注入的</li></ul><h2 id="di-依赖注入" tabindex="-1">DI 依赖注入 <a class="header-anchor" href="#di-依赖注入" aria-label="Permalink to &quot;DI 依赖注入&quot;">​</a></h2><ul><li>A 依赖 B 时，不是在 A 的实例过程中去主动 new B()。而是在 new A() 之前就初始化好了 B 实例，然后将 B 实例通过参数的形式传入 A 实例。这种非自己主动初始化依赖，而是通过外部来传入依赖的方式被称之为 <code>依赖注入</code></li><li>通过 <code>@Controller</code> <code>@Injectable</code> 装饰器声明的 class 会被 NestJS 扫描，创建对应的对象并添加到一个容器里，这些所有的对象会根据构造器里声明的依赖自动注入，也就是 <code>依赖注入</code></li></ul><h3 id="不使用依赖注入" tabindex="-1">不使用依赖注入 <a class="header-anchor" href="#不使用依赖注入" aria-label="Permalink to &quot;不使用依赖注入&quot;">​</a></h3><ul><li>不使用依赖注入， B 类依赖 A 类的话，就直接在 B 类中 new A()</li><li>耦合很强，如果哪天需要更换依赖，必须要在 B 类中修改代码(伤筋动骨)</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> A</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;xujie&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// B 类严重依赖 A 类</span></span>
<span class="line"><span style="color:#6A737D;">// ! 强耦合</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> A</span><span style="color:#24292E;">().name</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h3><ul><li>使用依赖注入， 把依赖 A 当作 B 类的一个参数进行传入</li><li>耦合较低，如果哪天需要更换依赖，只需要在实例化 B 时传入不同的参数</li></ul><div class="language-TS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> A</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;xujie&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// B 类不再依赖某个具体的类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 实例化 B 的时候将依赖当作参数传入</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> b</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> A</span><span style="color:#24292E;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="ioc-容器" tabindex="-1">IOC 容器 <a class="header-anchor" href="#ioc-容器" aria-label="Permalink to &quot;IOC 容器&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> A</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 容器</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  mo</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.mo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 依赖注入</span></span>
<span class="line"><span style="color:#6F42C1;">  provide</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">mo</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.mo[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 取出依赖</span></span>
<span class="line"><span style="color:#6F42C1;">  get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.mo[key];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  a</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> A</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">mo</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Container</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // A 类的获取不在直接操作 A 而是变成操作 Container 容器</span></span>
<span class="line"><span style="color:#6A737D;">    // 由容器来负责依赖的读取</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mo.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// B 类现在已经不在依赖 A 类, 而是依赖 Container 容器</span></span>
<span class="line"><span style="color:#6A737D;">// 由容器来负责依赖的注入</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> mo</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Container</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">,  </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> A</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xujieAAA&#39;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xujieBBB&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">// 直接将容器实例 mo 注入到 B 实例中即可</span></span>
<span class="line"><span style="color:#6A737D;">// 在创建多个 B 实例的时候，不需要一遍遍的 new A() new B()。只需要制作好一个容器就可以重复使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> b1</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">(mo)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> b2</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">(mo)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> b3</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">(mo)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>`,12)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
