import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"高阶函数","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/函数&作用域/高阶函数.md","filePath":"docs/JavaScript/函数&作用域/高阶函数.md","lastUpdated":1735478813000}'),e={name:"docs/JavaScript/函数&作用域/高阶函数.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h1><p>高阶函数是指至少满足下列条件之一的函数。</p><ol><li>函数可以作为参数被传递；</li><li>函数可以作为返回值输出</li></ol><h2 id="函数当做参数进行传递" tabindex="-1">函数当做参数进行传递 <a class="header-anchor" href="#函数当做参数进行传递" aria-label="Permalink to &quot;函数当做参数进行传递&quot;">​</a></h2><ul><li>回调函数：分离业务代码中不变和变化的部分，将业务代码中变化的部分封装到函数参数里</li></ul><h2 id="函数作为返回值输出" tabindex="-1">函数作为返回值输出 <a class="header-anchor" href="#函数作为返回值输出" aria-label="Permalink to &quot;函数作为返回值输出&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 自动生成一个 isType 对象。其中的三个方法可以用来判断数据类型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> isType</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> typeArray</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;String&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Array&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Number&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  (type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeArray[index]), index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> typeArray.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  index</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  isType[</span><span style="color:#032F62;">&quot;is&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> type] </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj) </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> \`[object \${</span><span style="color:#24292E;">type</span><span style="color:#032F62;">}]\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="高阶函数实现-aop-切片编程" tabindex="-1">高阶函数实现 AOP (切片编程) <a class="header-anchor" href="#高阶函数实现-aop-切片编程" aria-label="Permalink to &quot;高阶函数实现 AOP (切片编程)&quot;">​</a></h2><h2 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-label="Permalink to &quot;函数柯里化&quot;">​</a></h2><ul><li>柯里化又称为部分求值，是把接受<code>多个参数</code>的函数变成接受<code>单一参数</code>的函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 将传入的函数包装成 柯里化 的函数</span></span>
<span class="line"><span style="color:#6A737D;">// 本例的效果为实现 **延迟调用**</span></span>
<span class="line"><span style="color:#6A737D;">// currying 函数是不变的部分(通用函数)  callback 函数是变化的部分</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> currying</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 利用闭包的特性，将多次调用的参数全部存储到 args 数组中</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> args</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">    // 1. 当无传入参数时， 输出结果</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> ===</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#6F42C1;"> callback</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 2. 当有参数传入时，将参数存储到闭包中，并再次返回当前函数等待下一次的调用</span></span>
<span class="line"><span style="color:#24292E;">      args.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">.callee;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 具体的行为，将数组中的值求和</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> cost</span><span style="color:#24292E;">(</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">total</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> item);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 cost 函数包装成 柯里化 的函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> Xcost</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> currying</span><span style="color:#24292E;">(cost);</span></span>
<span class="line"><span style="color:#6A737D;">// 经过柯里化的函数，单次调用不会运算出结果，只有当传入参数为空时才会将之前所有的调用整合到一起进行计算</span></span>
<span class="line"><span style="color:#6F42C1;">Xcost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">Xcost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">Xcost</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 300</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,11)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
