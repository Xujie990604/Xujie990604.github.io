import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const e="/assets/%E4%BF%AE%E6%94%B9props.Clx-VSvi.png",o="/assets/%E6%8E%A5%E6%94%B6%E9%83%A8%E5%88%86props.BLn8Hsxm.jpg",r="/assets/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.CH5uGog3.png",t="/assets/%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0.BAW8N63L.png",C=JSON.parse('{"title":"组件通信","description":"","frontmatter":{},"headers":[],"relativePath":"docs/技术文档总结/Vue框架/Vue组件之间的通信.md","filePath":"docs/技术文档总结/Vue框架/Vue组件之间的通信.md","lastUpdated":1727002980000}'),c={name:"docs/技术文档总结/Vue框架/Vue组件之间的通信.md"};function i(y,s,b,u,m,d){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h1><p>TODO：各种通信方式的优缺点总结，加上拓扑图</p><h2 id="一、父子组件通信" tabindex="-1">一、父子组件通信 <a class="header-anchor" href="#一、父子组件通信" aria-label="Permalink to &quot;一、父子组件通信&quot;">​</a></h2><h3 id="_1-1-props-和-emit" tabindex="-1">1.1 props 和 $emit() <a class="header-anchor" href="#_1-1-props-和-emit" aria-label="Permalink to &quot;1.1 props 和 $emit()&quot;">​</a></h3><h4 id="_1-单向数据流" tabindex="-1">(1) 单向数据流 <a class="header-anchor" href="#_1-单向数据流" aria-label="Permalink to &quot;(1) 单向数据流&quot;">​</a></h4><blockquote><p>所有的 props 都遵循着<code>单向绑定</code>原则，props 因父组件的更新而变化，自然地将新的状态<code>向下流</code>往子组件，而<code>不会逆向传递</code>。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</p></blockquote><blockquote><p>另外，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着你不应该在子组件中去更改一个 prop。若你这么做了，Vue 会在控制台上向你抛出警告：</p></blockquote><ol><li>父组件中的 props 更新会自动的流入子组件中</li><li>不可以在子组件中直接修改父组件传过来的值(无论是基本类型还是引用类型)</li><li>优点：组件数据变化的来源入口<code>只有一处</code>，便于数据变化流程的理解。例如，多个子组件依赖同一个父组件的数据，在其中一个子组件中修改数据会引起其他所有组件的变化, 对于其他子组件来说很难找到数据的变化来源于哪里</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  person</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    type</span><span style="color:#24292E;">: Object,</span></span>
<span class="line"><span style="color:#6F42C1;">    required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  myName</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    type</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#6F42C1;">    required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">created</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.myName </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;foo&#39;</span><span style="color:#6A737D;">  // 报错警告</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {      </span><span style="color:#6A737D;">// 报错警告</span></span>
<span class="line"><span style="color:#24292E;">    job: </span><span style="color:#032F62;">&quot;WEB&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">29</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.person.age </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 29</span><span style="color:#6A737D;">  // 不报错</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="`+e+`" alt="Vue 修改 直接修改 Props 报错"></p><ul><li>虽然在子组件中修改父组件传过来的<code>引用类型数据的属性</code>不会报错(Vue 出于性能的考虑，没有对引用类型的属性修改做限制)，但是不推荐这种写法。</li></ul><h5 id="vue-推荐-props-修改方式" tabindex="-1">Vue 推荐 Props 修改方式 <a class="header-anchor" href="#vue-推荐-props-修改方式" aria-label="Permalink to &quot;Vue 推荐 Props 修改方式&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. Props 被用于传入初始值，子组件重新声明局部数据</span></span>
<span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sonName: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.myName</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 基于 Props 定义一个计算属性</span></span>
<span class="line"><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  sonFormatName</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.myName.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_2-通过-props-来向子组件传递数据-通过-emit-来向父组件提交事件修改数据" tabindex="-1">(2) 通过 props 来向子组件传递数据，通过 $emit() 来向父组件提交事件修改数据 <a class="header-anchor" href="#_2-通过-props-来向子组件传递数据-通过-emit-来向父组件提交事件修改数据" aria-label="Permalink to &quot;(2) 通过 props 来向子组件传递数据，通过 $emit() 来向父组件提交事件修改数据&quot;">​</a></h4><h5 id="vue2-的写法" tabindex="-1">Vue2 的写法 <a class="header-anchor" href="#vue2-的写法" aria-label="Permalink to &quot;Vue2 的写法&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件传值&amp;修改数据</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">SonCpt</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  :person=&quot;person&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  :my-name=&quot;myName&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  @update-person=&quot;(number)</span><span style="color:#B31D28;font-style:italic;"> =&gt;</span><span style="color:#B31D28;font-style:italic;"> updatePerson(number)&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  @update-name=&quot;updateName&quot;</span></span>
<span class="line"><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">SonCpt</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SonCpt </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;../components/son-cpts.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    person: {</span></span>
<span class="line"><span style="color:#24292E;">      job: </span><span style="color:#032F62;">&quot;WEB&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      age: </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    myName: </span><span style="color:#032F62;">&quot;no one&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  updatePerson</span><span style="color:#24292E;">(number) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.person.age </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> number</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  updateName</span><span style="color:#24292E;">(newName) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.myName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newName</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 子组件接收值&amp;提交事件</span></span>
<span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  person</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    type</span><span style="color:#24292E;">: Object,</span></span>
<span class="line"><span style="color:#6F42C1;">    required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">    default</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">      job: </span><span style="color:#032F62;">&quot;APP&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  myName</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    type</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#6F42C1;">    required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  updatePerson</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update-person&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  updateName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update-name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Snow&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h5 id="vue3-的写法" tabindex="-1">Vue3 的写法 <a class="header-anchor" href="#vue3-的写法" aria-label="Permalink to &quot;Vue3 的写法&quot;">​</a></h5><div class="language-TS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件传值&amp;修改数据</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">sonCpts</span></span>
<span class="line"><span style="color:#24292E;">  :person</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;person&quot;</span></span>
<span class="line"><span style="color:#24292E;">  :myName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;myName&quot;</span></span>
<span class="line"><span style="color:#24292E;">  @update</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">person</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;number =&gt; updatePerson(number)&quot;</span></span>
<span class="line"><span style="color:#24292E;">  @update</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;updateName&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">&lt;/</span><span style="color:#6F42C1;">sonCpts</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sonCpts </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;../cpts/son-cpts.vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> person</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  job: </span><span style="color:#032F62;">&#39;WEB&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> myName</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;no one&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> updatePerson</span><span style="color:#24292E;">(</span><span style="color:#E36209;">number</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  person.age </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> updateName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  myName.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newName</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 子组件接收值&amp;提交事件</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> IProps</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  person</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">    job</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#E36209;">    age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#E36209;">  myName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">withDefaults</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">defineProps</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IProps</span><span style="color:#24292E;">&gt;(), {</span></span>
<span class="line"><span style="color:#6F42C1;">  person</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">    job: </span><span style="color:#032F62;">&#39;APP&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }),</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> emits</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> defineEmits</span><span style="color:#24292E;">&lt;{</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &#39;update-person&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">number</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &#39;update-name&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span></span>
<span class="line"><span style="color:#24292E;">}&gt;()</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> updatePerson</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">  emits</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update-person&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> updateName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">  emits</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update-name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Snow&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h4 id="_3-透传" tabindex="-1">(3)透传 <a class="header-anchor" href="#_3-透传" aria-label="Permalink to &quot;(3)透传&quot;">​</a></h4><ul><li>子组件没有显式接受的数据会被当做子组件根节点的 attribute 属性</li><li>对于绝大多数 attribute 来说，从外部提供的值会替换掉组件内部设置好的值</li><li><code>class</code> <code>style</code> 会和组件内部的值进行合并</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 父组件向子组件传递数据</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">SonCpt</span><span style="color:#B31D28;font-style:italic;"> :foo=&quot;foo&quot;</span><span style="color:#B31D28;font-style:italic;"> :bar=&quot;bar&quot;</span><span style="color:#B31D28;font-style:italic;"> :class=&quot;sonClass&quot;&gt;&lt;/SonCpt&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">data()</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  return {</span></span>
<span class="line"><span style="color:#24292E;">    foo: </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    bar: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    sonClass: </span><span style="color:#032F62;">&#39;my-class&#39;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;font-style:italic;">,</span></span>
<span class="line"><span style="color:#6A737D;">// 子组件接受部分数据</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;son-cpts&quot;</span><span style="color:#6F42C1;"> bar</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;sonBar&quot;</span><span style="color:#24292E;">&gt; {{ foo }} &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  foo</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    type</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#6F42C1;">    required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="`+o+`" alt="接受部分props"></p><ul><li>可以通过 <code>inheritAttrs: false</code> 来关闭组件的根元素继承 attribute(不会影响 style 和 class 的绑定)</li></ul><h5 id="vue2-写法" tabindex="-1">Vue2 写法 <a class="header-anchor" href="#vue2-写法" aria-label="Permalink to &quot;Vue2 写法&quot;">​</a></h5><ul><li>使用 <code>$attrs</code> 和 <code>$listeners</code> 实现多层透传</li><li>$attrs: 包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件</li><li>$listeners: 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件通过 props 传递数据，并且监听孙组件提交的事件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">SonCpt</span><span style="color:#B31D28;font-style:italic;"> :foo=&quot;foo&quot;</span><span style="color:#B31D28;font-style:italic;"> :bar=&quot;bar&quot;</span><span style="color:#B31D28;font-style:italic;"> @update-bar=&quot;updateBar&quot;&gt;&lt;/SonCpt&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">data()</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  return {</span></span>
<span class="line"><span style="color:#24292E;">    foo: </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    bar: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;font-style:italic;">,</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">methods:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  changeBar</span><span style="color:#24292E;">(bar) {</span></span>
<span class="line"><span style="color:#24292E;">    this.bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 子组件显式接受 foo 变量，并且透传 bar , 并且透传 update-bar 事件监听器</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;SunCpts</span><span style="color:#6F42C1;"> v-bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$attrs&quot;</span><span style="color:#6F42C1;"> v-on</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$listeners&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">SunCpts</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">inheritAttrs</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  foo</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    type</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#6F42C1;">    required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 孙组件接受 bar 变量，并且提交 up-bar 事件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;sun-cpts&quot;</span><span style="color:#B31D28;font-style:italic;"> @click=&quot;$emit(&#39;update-bar&#39;,</span><span style="color:#032F62;"> &#39;sunBar&#39;</span><span style="color:#B31D28;font-style:italic;">)&quot;&gt;</span><span style="color:#24292E;"> {{ bar }} </span><span style="color:#B31D28;font-style:italic;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">props:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  bar: {</span></span>
<span class="line"><span style="color:#24292E;">    type: String,</span></span>
<span class="line"><span style="color:#24292E;">    required: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h5 id="vue3-写法" tabindex="-1">Vue3 写法 <a class="header-anchor" href="#vue3-写法" aria-label="Permalink to &quot;Vue3 写法&quot;">​</a></h5><ol><li>去掉了 <code>$listeners</code> API 属性和事件都会通过 <code>$attrs</code> 来传递</li><li>由于 Vue3 支持碎片(一个组件可以多个根元素)所以在子组件不仅一个根元素时，需要开发者手动控制 <code>$attrs</code> 数据的走向</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件通过 props 传递数据，并且监听孙组件提交的事件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">SonCpts</span><span style="color:#B31D28;font-style:italic;"> :foo=&quot;foo&quot;</span><span style="color:#B31D28;font-style:italic;"> :bar=&quot;bar&quot;</span><span style="color:#B31D28;font-style:italic;"> @update-bar=&quot;updateBar&quot;&gt;&lt;/SonCpts&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 子组件显式接受 foo 变量，并且透传 bar , 并且透传 update-bar 事件监听器</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  &lt;div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;son-content&quot;</span><span style="color:#24292E;">&gt;son&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">SunCpts</span><span style="color:#6F42C1;"> v-bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$attrs&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">SunCpts</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// 拥有多个根节点时，必须手动指定 \`$attrs\` 赋值给谁</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> IProps</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  foo</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">defineProps</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IProps</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 孙组件接受 bar 变量，并且提交 up-bar 事件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#B31D28;font-style:italic;"> @click=&quot;$emit(&#39;update-bar&#39;,</span><span style="color:#032F62;"> &#39;sunBar&#39;</span><span style="color:#B31D28;font-style:italic;">)&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {{ bar }}</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">interface</span><span style="color:#6F42C1;"> IProps</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  bar: string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">defineProps&lt;IProps&gt;()</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">defineEmits&lt;{</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  (e:</span><span style="color:#032F62;"> &#39;update-bar&#39;</span><span style="color:#B31D28;font-style:italic;">,</span><span style="color:#B31D28;font-style:italic;"> newBar:</span><span style="color:#B31D28;font-style:italic;"> string):</span><span style="color:#6F42C1;"> void</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">}&gt;()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h5 id="透传优点" tabindex="-1">透传优点 <a class="header-anchor" href="#透传优点" aria-label="Permalink to &quot;透传优点&quot;">​</a></h5><ul><li>在多层组件结构中进行数据，方法传递时。使用透传能减少大部分代码量，使得代码结构更加清晰</li></ul><h3 id="_1-2-依赖注入-vue3-语法" tabindex="-1">1.2 依赖注入 (Vue3 语法) <a class="header-anchor" href="#_1-2-依赖注入-vue3-语法" aria-label="Permalink to &quot;1.2 依赖注入 (Vue3 语法)&quot;">​</a></h3><ol><li>依赖注入更加方便跨组件传值</li><li>依赖注入不仅可以用来跨组件传值，还可以用来声明全局变量</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 在 父组件中 provide 数据&amp;更改数据的方式</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> foo</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> updateFoo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newFoo</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  foo.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newFoo</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  foo,</span></span>
<span class="line"><span style="color:#24292E;">  updateFoo,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 在子组件中 inject 数据&amp;更改数据的方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">injectInfo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">updateInjectInfo</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> inject</span><span style="color:#24292E;">(injectInfoKey);</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> IFoo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  foo</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Ref</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">  updateFoo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">newFoo</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> void</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">updateFoo</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> inject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#6F42C1;"> IFoo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 注册全局的变量</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_1-3-双向数据绑定" tabindex="-1">1.3 双向数据绑定 <a class="header-anchor" href="#_1-3-双向数据绑定" aria-label="Permalink to &quot;1.3 双向数据绑定&quot;">​</a></h3><h4 id="_1-v-model" tabindex="-1">（1）v-model <a class="header-anchor" href="#_1-v-model" aria-label="Permalink to &quot;（1）v-model&quot;">​</a></h4><ul><li>双向绑定并没有违背单向数据流。v-model 本质上是一个语法糖，同时使用了两个指令</li></ul><ol><li>:value=&quot;value&quot;</li><li>@input=&quot;value = $event&quot;</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在组件上可以直接使用 v-model API</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">test-view-page</span><span style="color:#6F42C1;"> v-model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">test-view-page</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 不使用 v-model 语法糖</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">test-view-page</span><span style="color:#B31D28;font-style:italic;"> :value=&quot;name&quot;</span><span style="color:#B31D28;font-style:italic;"> @input=&quot;name</span><span style="color:#B31D28;font-style:italic;"> =</span><span style="color:#B31D28;font-style:italic;"> $event&quot;&gt;&lt;/test-view-page&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子组件中通过 model 来指定 v-model 会绑定的值和监听的事件</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  &lt;div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test-view-page&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#B31D28;font-style:italic;"> :value=&quot;value&quot;</span><span style="color:#B31D28;font-style:italic;"> @input=&quot;$emit(&#39;input&#39;,</span><span style="color:#B31D28;font-style:italic;"> $event.target.value)&quot;&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">model:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  prop: </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  event: </span><span style="color:#032F62;">&#39;input&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;font-style:italic;">,</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">props:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  value: {</span></span>
<span class="line"><span style="color:#24292E;">    type: String,</span></span>
<span class="line"><span style="color:#24292E;">    default: </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_2-sync-修饰符" tabindex="-1">（2）.sync 修饰符 <a class="header-anchor" href="#_2-sync-修饰符" aria-label="Permalink to &quot;（2）.sync 修饰符&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 父组件使用 sync 修饰符</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">test-view-page</span><span style="color:#B31D28;font-style:italic;"> :visible.sync=&quot;isShow&quot;&gt;&lt;/test-view-page&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 父组件不使用 sync 修饰符</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;test-view-page</span><span style="color:#B31D28;font-style:italic;"> :visible=&quot;isShow&quot;</span><span style="color:#B31D28;font-style:italic;"> @update:visible</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;visible = $event&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">test-view-page</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子组件中定义</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test-view-page&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;visible&quot;</span><span style="color:#24292E;">&gt;我是不一定可见的&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click=&quot;$emit(&#39;update:visible&#39;,</span><span style="color:#B31D28;font-style:italic;"> false)&quot;&gt;隐藏&lt;/button&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">props:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  visible: {</span></span>
<span class="line"><span style="color:#24292E;">    type: Boolean,</span></span>
<span class="line"><span style="color:#24292E;">    default: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_3-两者的对比" tabindex="-1">（3）两者的对比 <a class="header-anchor" href="#_3-两者的对比" aria-label="Permalink to &quot;（3）两者的对比&quot;">​</a></h4><ol><li>都是语法糖，同时使用了属性绑定和事件监听两个 Vue 指令</li><li>v-model 可以通过 model 模块指定要绑定的变量和监听的事件，适用于添加到表单元素上</li><li>.sync 更倾向于对其他类型变量的绑定(element 组件有很多支持这个修饰符 eg: dialog 对话框)</li></ol><h3 id="_1-4-直接访问组件的方法-属性" tabindex="-1">1.4 直接访问组件的方法/属性 <a class="header-anchor" href="#_1-4-直接访问组件的方法-属性" aria-label="Permalink to &quot;1.4 直接访问组件的方法/属性&quot;">​</a></h3><ol><li>$children 是一个数组，数组里面是当前组件所有的子组件对象(慎用，破坏组件的独立性)</li><li>$parent 是一个数组，数组里面是当前组件的父组件对象(慎用，破坏组件的独立性)</li><li>$refs 添加到子组件上，就可以通过 $refs.name.xxx 访问子组件的属性和方法(Vue3 需要使用 defineExpose 指定暴露的属性)</li></ol><h2 id="二、非父子组件通信" tabindex="-1">二、非父子组件通信 <a class="header-anchor" href="#二、非父子组件通信" aria-label="Permalink to &quot;二、非父子组件通信&quot;">​</a></h2><h3 id="_2-1-事件总线" tabindex="-1">2.1 事件总线 <a class="header-anchor" href="#_2-1-事件总线" aria-label="Permalink to &quot;2.1 事件总线&quot;">​</a></h3><ul><li>使用事件总线来实现跨组件之间的通信</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在 Vue 原型上添加一个属性</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$bus </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Vue</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在提交事件的组件内提交事件</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;itemImageLoad&quot;</span><span style="color:#24292E;">, index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在处理事件的组件内监听事件</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;itemImageLoad&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="`+r+`" alt="父子组件的生命周期"></p><p>要保证事件的监听发生在事件的提交之前(在没有开启对应监听的情况下就提交事件，会导致事件的丢失) 父子组件之间可以通过关系图来保证监听和提交的先后顺序，但是兄弟组件之间如何确定先后顺序？</p><p>TODO： 补充观察者模式的相关概念</p><h3 id="_2-2-vuex" tabindex="-1">2.2 Vuex <a class="header-anchor" href="#_2-2-vuex" aria-label="Permalink to &quot;2.2 Vuex&quot;">​</a></h3><ul><li>官方推荐在 Vue2 生态中需要使用的插件</li></ul><p>TODO： 补充单例模式的相关概念</p><h3 id="_2-3-pinia" tabindex="-1">2.3 Pinia <a class="header-anchor" href="#_2-3-pinia" aria-label="Permalink to &quot;2.3 Pinia&quot;">​</a></h3><ul><li>官方推荐在 Vue3 生态中使用的插件</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> useUserInfoStore</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> defineStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 定义data，相当于 Vuex 中的 store</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> userList</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> reactive</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&quot;no one&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&quot;tom&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  ]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 定义计算属性，相当于 Vuex 中的 getter</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> adultList</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> userList.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">user</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> user.age </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 18</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 定义方法，相当于 Vuex 中的 action   (Pinia 中没有 mutation 的概念)</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#6F42C1;"> addUser</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    userList.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;Anna&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> { userList, adultList, addUser };</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_2-4-全局依赖注入-vue3" tabindex="-1">2.4 全局依赖注入(Vue3) <a class="header-anchor" href="#_2-4-全局依赖注入-vue3" aria-label="Permalink to &quot;2.4 全局依赖注入(Vue3)&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 提供</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 注入</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> message</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> inject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三、扩展" tabindex="-1">三、扩展 <a class="header-anchor" href="#三、扩展" aria-label="Permalink to &quot;三、扩展&quot;">​</a></h2><ul><li>把父组件中的函数当做变量传递给子组件调用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件内通过 props 传值给子组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">test-view-page</span><span style="color:#B31D28;font-style:italic;"> :sEvent=&quot;outputName&quot;&gt;&lt;/test-view-page&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">data()</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  return { name: </span><span style="color:#032F62;">&#39;我是父组件&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;font-style:italic;">,</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">methods:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  outputName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.log(this.name)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 子组件内调用父组件传递过来的方法</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;button</span><span style="color:#B31D28;font-style:italic;"> @click=&quot;sEvent&quot;&gt;点击&lt;/button&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">props:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  sEvent: {</span></span>
<span class="line"><span style="color:#24292E;">    type: Function,</span></span>
<span class="line"><span style="color:#6F42C1;">    default</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;font-style:italic;">,</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">data()</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  return { name: </span><span style="color:#032F62;">&#39;我是子组件&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><img src="`+t+'" alt="传递函数"></p><ul><li>vue 组件实例化的时候会把定义时的 method 的函数 bind this 到实例上，bind 之后 this 就定死了</li></ul>',65)]))}const D=n(c,[["render",i]]);export{C as __pageData,D as default};
