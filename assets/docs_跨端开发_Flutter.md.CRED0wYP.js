import{_ as t,c as e,o as l,ag as r}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"Flutter","description":"","frontmatter":{},"headers":[],"relativePath":"docs/跨端开发/Flutter.md","filePath":"docs/跨端开发/Flutter.md","lastUpdated":null}'),i={name:"docs/跨端开发/Flutter.md"};function o(d,a,u,n,h,s){return l(),e("div",null,a[0]||(a[0]=[r('<h1 id="flutter" tabindex="-1">Flutter <a class="header-anchor" href="#flutter" aria-label="Permalink to &quot;Flutter&quot;">​</a></h1><h2 id="页面渲染" tabindex="-1">页面渲染 <a class="header-anchor" href="#页面渲染" aria-label="Permalink to &quot;页面渲染&quot;">​</a></h2><ul><li>Flutter 的渲染不依赖原生系统的 UI 组件，而是依靠 <code>Skia</code> 图形渲染引擎自绘界面，从底层图形绘制到界面交互逻辑都由 Flutter 框架和 Dart 代码处理。</li><li>Flutter 不依赖原生系统的 UI 组件，所以在不同的平台上拥有完全一致的界面表现</li></ul><h2 id="逻辑执行" tabindex="-1">逻辑执行 <a class="header-anchor" href="#逻辑执行" aria-label="Permalink to &quot;逻辑执行&quot;">​</a></h2><h3 id="运行阶段" tabindex="-1">运行阶段 <a class="header-anchor" href="#运行阶段" aria-label="Permalink to &quot;运行阶段&quot;">​</a></h3><ul><li>Flutter 会被编译成 Dart 字节码，然后在 Dart 虚拟机中运行。</li></ul><h3 id="生产阶段" tabindex="-1">生产阶段 <a class="header-anchor" href="#生产阶段" aria-label="Permalink to &quot;生产阶段&quot;">​</a></h3><ul><li>Flutter 会通过 AOT 编译，将 Dart 代码编译为 Android、IOS、桌面端等平台特性的机器码</li></ul><h2 id="优势点" tabindex="-1">优势点 <a class="header-anchor" href="#优势点" aria-label="Permalink to &quot;优势点&quot;">​</a></h2><ol><li>各平台页面表现的高度一致性</li><li>较高的性能，拥有堪比原生的性能和流畅性</li><li>热重载</li><li>虽然是非官方的方案，但是已经有团队维护了支持鸿蒙的方案</li></ol><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ol><li>一些较底层的功能实现受限，还是得依赖原生开发</li><li>没有热更新</li></ol>',12)]))}const f=t(i,[["render",o]]);export{_ as __pageData,f as default};
