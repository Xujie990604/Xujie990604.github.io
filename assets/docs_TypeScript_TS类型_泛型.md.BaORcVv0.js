import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"泛型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS类型/泛型.md","filePath":"docs/TypeScript/TS类型/泛型.md","lastUpdated":1721564727000}'),e={name:"docs/TypeScript/TS类型/泛型.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h1><ul><li>让参数的<code>类型\`\`参数化</code></li><li>泛型就是将两个或多个具有相同类型的值关联起来</li></ul><h2 id="一、函数泛型" tabindex="-1">一、函数泛型 <a class="header-anchor" href="#一、函数泛型" aria-label="Permalink to &quot;一、函数泛型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在定义这个函数时，不决定这些参数的类型，而是让调用者以参数的形式告知，函数类型应该是什么</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> sum</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">num</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Type</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Type</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 泛型类型的调用</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;222&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;"> }&gt;({ name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[]&gt;([</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 简化泛型函数的调用</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// NOTE: 函数内部会使用类型推导</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>多个函数参数类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> sum</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">num1</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">num2</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> E</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num1, num2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="二、泛型接口" tabindex="-1">二、泛型接口 <a class="header-anchor" href="#二、泛型接口" aria-label="Permalink to &quot;二、泛型接口&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> person</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> E</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> person</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="三、类泛型" tabindex="-1">三、类泛型 <a class="header-anchor" href="#三、类泛型" aria-label="Permalink to &quot;三、类泛型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> point</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#E36209;">  x</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自动推导类型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p1</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> point</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.22.34&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 声明参数类型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p2</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> point</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;1.22.34&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p3</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> point</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> point</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.22.34&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="四、泛型类型限制-泛型约束" tabindex="-1">四、泛型类型限制(泛型约束) <a class="header-anchor" href="#四、泛型类型限制-泛型约束" aria-label="Permalink to &quot;四、泛型类型限制(泛型约束)&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 接口要求数据有一个 length 属性</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Length</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  length</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 虽然是泛型，但是还是需要对于类型增加一些限制</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> test</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Length</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 想要返回参数的 length 属性</span></span>
<span class="line"><span style="color:#6A737D;">  // 但是不是所有数据都是有 length 属性的(eg: number)</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arg.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 下面三个数据都是有 length 属性的，才能被传进函数中</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;122&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;445&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">({ length: </span><span style="color:#005CC5;">90</span><span style="color:#24292E;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,12)]))}const m=n(e,[["render",o]]);export{b as __pageData,m as default};
