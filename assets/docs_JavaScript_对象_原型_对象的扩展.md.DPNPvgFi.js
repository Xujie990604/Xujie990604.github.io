import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"对象的扩展","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/对象的扩展.md","filePath":"docs/JavaScript/对象&原型/对象的扩展.md","lastUpdated":1735478813000}'),e={name:"docs/JavaScript/对象&原型/对象的扩展.md"};function o(r,s,c,t,i,b){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="对象的扩展" tabindex="-1">对象的扩展 <a class="header-anchor" href="#对象的扩展" aria-label="Permalink to &quot;对象的扩展&quot;">​</a></h1><h2 id="一、增强对象字面量" tabindex="-1">一、增强对象字面量 <a class="header-anchor" href="#一、增强对象字面量" aria-label="Permalink to &quot;一、增强对象字面量&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 当对象属性的 key 和属性的值一样时，就可以简略书写</span></span>
<span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">: item }  </span><span style="color:#D73A49;">==&gt;</span><span style="color:#24292E;">  { item }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 当对象拥有方法属性时，可以简写 function</span></span>
<span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">findItem</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){} }   </span><span style="color:#D73A49;">==&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">findItem</span><span style="color:#24292E;">(){} }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 可计算属性</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">obj[</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &#39;bar&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;baz&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 不需要再提前定义 obj 了</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &#39;bar&#39;</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">&#39;baz&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="二、对象方法" tabindex="-1">二、对象方法 <a class="header-anchor" href="#二、对象方法" aria-label="Permalink to &quot;二、对象方法&quot;">​</a></h2><h3 id="_2-1-遍历对象的方法" tabindex="-1">2.1 遍历对象的方法 <a class="header-anchor" href="#_2-1-遍历对象的方法" aria-label="Permalink to &quot;2.1 遍历对象的方法&quot;">​</a></h3><ul><li>Object.keys() 以数组的形式返回对象的键 (自身的并且可枚举的属性)</li><li>Object.values() 以数组的形式返回对象的值 (自身的并且可枚举的属性)</li><li>Object.entries 以数组的形式返回对象的键值对 (自身的并且可枚举的属性)</li></ul><h3 id="_2-2-object-is" tabindex="-1">2.2 Object.is() <a class="header-anchor" href="#_2-2-object-is" aria-label="Permalink to &quot;2.2 Object.is()&quot;">​</a></h3><ul><li>使用了 SameValueZero 相等性比较算法,</li><li>表现和 === 基本相等, 主要区别于 NaN 和 +0 -0</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Object.is() 修复了 === 中存在的两个问题</span></span>
<span class="line"><span style="color:#005CC5;">NaN</span><span style="color:#D73A49;"> ===</span><span style="color:#005CC5;"> NaN</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;"> ===</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-3-object-assign-obj1-obj" tabindex="-1">2.3 Object.assign(obj1, ...obj) <a class="header-anchor" href="#_2-3-object-assign-obj1-obj" aria-label="Permalink to &quot;2.3 Object.assign(obj1, ...obj)&quot;">​</a></h3><ul><li>将源对象的 <code>自身属性</code> 且为 <code>可枚举属性</code> 的值复制到目标对象。它将返回目标对象。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj2</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  sex: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, obj1, obj2);</span></span>
<span class="line"><span style="color:#24292E;">newObj; </span><span style="color:#6A737D;">// {name: &#39;bar&#39;, age: 12, sex: 1}</span></span>
<span class="line"><span style="color:#24292E;">obj1; </span><span style="color:#6A737D;">// {name: &#39;foo&#39;, age: 12}</span></span>
<span class="line"><span style="color:#24292E;">obj2; </span><span style="color:#6A737D;">// {name: &#39;bar&#39;, sex: 1}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,12)]))}const d=a(e,[["render",o]]);export{u as __pageData,d as default};
