import{_ as l,c as e,o as i,ag as t}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"前端的跨域","description":"","frontmatter":{},"headers":[],"relativePath":"docs/计算机网络/计算机网络/跨域.md","filePath":"docs/计算机网络/计算机网络/跨域.md","lastUpdated":1712646874000}'),o={name:"docs/计算机网络/计算机网络/跨域.md"};function r(c,a,n,d,s,h){return i(),e("div",null,a[0]||(a[0]=[t('<h1 id="前端的跨域" tabindex="-1">前端的跨域 <a class="header-anchor" href="#前端的跨域" aria-label="Permalink to &quot;前端的跨域&quot;">​</a></h1><h2 id="一、什么是跨域" tabindex="-1">一、什么是跨域 <a class="header-anchor" href="#一、什么是跨域" aria-label="Permalink to &quot;一、什么是跨域&quot;">​</a></h2><ul><li>跨域请求：当前发起请求的域与该请求指向的资源所在的域不一样</li><li>所谓同源是指:<code>协议</code>+<code>域名</code>+<code>端口</code>三者相同。</li><li>跨域是浏览器的自我保护机制， 防止其他服务器冒充真实的服务器来获取用户输入的信息。(目的是为了保护使用浏览器的用户，防止用户获取到假信息)</li></ul><h3 id="_1-1-以下的东西都会涉及资源的请求" tabindex="-1">1.1 以下的东西都会涉及资源的请求 <a class="header-anchor" href="#_1-1-以下的东西都会涉及资源的请求" aria-label="Permalink to &quot;1.1 以下的东西都会涉及资源的请求&quot;">​</a></h3><ol><li>资源跳转： A 链接、重定向、表单提交</li><li>资源嵌入： <code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等 dom 标签，还有样式中 background:url()、@font-face()等文件外链</li><li>脚本请求： js 发起的 ajax 请求、dom 和 js 对象的跨域操作等</li></ol><ul><li>通常来说资源跳转和资源嵌入能够正常请求到跨域的资源，脚本请求在不进行设置的情况下无法获取跨域的资源</li></ul><h3 id="_1-2-同源策略" tabindex="-1">1.2 同源策略 <a class="header-anchor" href="#_1-2-同源策略" aria-label="Permalink to &quot;1.2 同源策略&quot;">​</a></h3><ul><li>是浏览器同源策略限制的一类请求场景</li><li>同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。</li><li>同源策略的非绝对性：<code>&lt;script&gt; &lt;img&gt;</code>等带有 src 属性的标签可以从不同的域加载和执行资源。</li></ul><h2 id="二、跨域的解决方案" tabindex="-1">二、跨域的解决方案 <a class="header-anchor" href="#二、跨域的解决方案" aria-label="Permalink to &quot;二、跨域的解决方案&quot;">​</a></h2><h3 id="_2-1-vue-中" tabindex="-1">2.1 vue 中 <a class="header-anchor" href="#_2-1-vue-中" aria-label="Permalink to &quot;2.1 vue 中&quot;">​</a></h3><ul><li>可以在 vue.config.js 文件中配置 devServer.proxy 进行代理</li><li>前端解决跨域的方法最多的情况是代理。</li><li>之所以会跨域是因为浏览器的同源策略。服务器和服务器之间不会存在跨域行为</li><li>跨域是客户端单方面拒绝响应，服务端是接收请求并处理了的。</li><li>代理的本质就是把自己的请求交给第不受跨域限制的三方代理服务器(第三方代理服务器和客户端是同源的，所以不会有跨域)，来规避同源策略</li></ul><h3 id="_2-2-cors-策略-跨域资源共享" tabindex="-1">2.2 CORS 策略(跨域资源共享) <a class="header-anchor" href="#_2-2-cors-策略-跨域资源共享" aria-label="Permalink to &quot;2.2 CORS 策略(跨域资源共享)&quot;">​</a></h3><ul><li>需要后端进行配置 Access-Control-Allow-Origin 字段</li><li>如果想要 http 请求带 cookie 的话，需要前端进行一下配置</li></ul><h3 id="_2-3-nginx-代理转发" tabindex="-1">2.3 nginx 代理转发 <a class="header-anchor" href="#_2-3-nginx-代理转发" aria-label="Permalink to &quot;2.3 nginx 代理转发&quot;">​</a></h3><ul><li>在 nginx 中进行配置，把本地的请求进行代理的转发</li></ul><h3 id="_2-4-jsonp-的方式" tabindex="-1">2.4 JSONP 的方式 <a class="header-anchor" href="#_2-4-jsonp-的方式" aria-label="Permalink to &quot;2.4 JSONP 的方式&quot;">​</a></h3><ul><li>因为同源策略的非绝对性，<code>&lt;script&gt;</code>等标签的 src 属性可以从不同的域来加载资源，所以可以在 src 中和服务器请求数据</li><li>缺点：只能进行 get 请求</li></ul>',17)]))}const m=l(o,[["render",r]]);export{_ as __pageData,m as default};
