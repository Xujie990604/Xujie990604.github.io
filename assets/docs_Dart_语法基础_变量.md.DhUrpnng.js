import{_ as l,c as s,o as e,ag as o}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"变量","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Dart/语法基础/变量.md","filePath":"docs/Dart/语法基础/变量.md","lastUpdated":1748272571000}'),n={name:"docs/Dart/语法基础/变量.md"};function t(r,a,c,i,p,d){return e(),s("div",null,a[0]||(a[0]=[o('<h1 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h1><ul><li>可以放到 Dart 变量中的所有数据都是<code>对象</code>，包括数字、字符串、null</li></ul><h2 id="初始化变量" tabindex="-1">初始化变量 <a class="header-anchor" href="#初始化变量" aria-label="Permalink to &quot;初始化变量&quot;">​</a></h2><ol><li>var: 自动推导类型, 类型确定后不可更改</li><li>Object: 不受限于单一类型</li><li>dynamic: 运行时确定类型</li></ol><h2 id="final、const" tabindex="-1">final、const <a class="header-anchor" href="#final、const" aria-label="Permalink to &quot;final、const&quot;">​</a></h2><ul><li>final: 终值，只能赋值一次，<code>可以</code>是<code>运行时赋值</code></li><li>const: 编译时常量，只能赋值一个<code>常量值</code>，值必须在<code>编译时确定</code></li></ul><h3 id="常量值" tabindex="-1">常量值 <a class="header-anchor" href="#常量值" aria-label="Permalink to &quot;常量值&quot;">​</a></h3><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> const</span><span style="color:#24292E;"> []</span></span>\n<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;">// 可以更改</span></span>\n<span class="line"><span style="color:#24292E;">foo.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 不能更改</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="通配符变量" tabindex="-1">通配符变量 <a class="header-anchor" href="#通配符变量" aria-label="Permalink to &quot;通配符变量&quot;">​</a></h2><ol><li>忽略函数返回值</li><li>解构时忽略值</li><li>匿名函数中忽略参数</li></ol><h2 id="空安全" tabindex="-1">空安全 <a class="header-anchor" href="#空安全" aria-label="Permalink to &quot;空安全&quot;">​</a></h2><ul><li><code>String? name</code> 表示变量可以为空</li><li>非空变量必须<code>初始化</code>或者<code>在使用前赋值</code></li><li>可空类型的未初始化变量的初始值为 null</li></ul><h3 id="延迟初始化" tabindex="-1">延迟初始化 <a class="header-anchor" href="#延迟初始化" aria-label="Permalink to &quot;延迟初始化&quot;">​</a></h3><ul><li>late 修饰符</li><li><code>顶层变量</code>和<code>类变量``延迟初始化</code>，它们会在第一次被使用时再初始化</li></ul>',14)]))}const b=l(n,[["render",t]]);export{u as __pageData,b as default};
