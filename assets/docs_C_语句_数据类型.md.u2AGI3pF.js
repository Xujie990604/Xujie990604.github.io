import{_ as a,c as e,o as i,ag as o}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/C/语句/数据类型.md","filePath":"docs/C/语句/数据类型.md","lastUpdated":1736672901000}'),t={name:"docs/C/语句/数据类型.md"};function r(d,l,n,c,h,s){return i(),e("div",null,l[0]||(l[0]=[o('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><ul><li>C 语言中的数据类型相比于 JS 更加精细和科学，适合用来进行各种科学计算</li></ul><h2 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h2><ul><li>int(%d)、short（%hd）、long(%ld)、long long(%lld) 都是整数数字类型，在计算机存储时具体占用多大的存储空间（位 bit）是不确定的(和计算机的 <code>字长</code> 有关)</li><li>float(%f)、double(输出%f，输入%lf)、long double 都是浮点数数字类型，浮点数字类型通常使用指数计数法（0.000001 -&gt; 1e-6）在内存中存储。浮点数字类型会将一部分空间拿来存储指数和符号（e）</li><li>C 语言中整数溢出并不会有错误提示， 当达到它能表示的最大值时，会重新从起始点开始。</li><li>将一个类型的数值初始化给不同类型的变量时，C 编译器会把值转换成与变量匹配的类型，这可能会导致部分数据丢失（部分公司采用 <code>在变量名中体现类型</code> 的方式来避免这种错误，例如用 i_ 前缀来代表 int 类型）</li></ul><h2 id="字符类型" tabindex="-1">字符类型 <a class="header-anchor" href="#字符类型" aria-label="Permalink to &quot;字符类型&quot;">​</a></h2><ul><li>&#39;&#39; 单引号表示字符(本质上存储的也是数字，最著名的就是 ASCII 码) 用 char 声明，占用一字节的内存, 使用 %c 打印</li><li>&quot;&quot; 双引号表示字符串, C 语言中没有专用用来存储字符串的数字类型，通常使用字符数组来存储字符串。使用 %s 打印</li></ul><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><ul><li>使用 char name[10] 来存储字符串</li><li>字符串数组的最后一位是 \\0(空字符串，非打印字符), 使用它来标记字符串的结束，占用一字节的内存</li><li>使用 strlen() 函数来获取字符串的长度(不包括结尾的空字符串)，使用 %zd 打印，需要声明 string.h 头文件</li></ul><h3 id="转义字符" tabindex="-1">转义字符 <a class="header-anchor" href="#转义字符" aria-label="Permalink to &quot;转义字符&quot;">​</a></h3><ul><li>\\a 警报</li><li>\\n 换行</li><li>\\r 回车</li><li>&#39; &quot; ? 单引号 双引号 问号</li><li>\\ 反斜杠</li></ul><h2 id="布尔类型" tabindex="-1">布尔类型 <a class="header-anchor" href="#布尔类型" aria-label="Permalink to &quot;布尔类型&quot;">​</a></h2><ul><li>bool 代表布尔类型，需要引入头文件 <code>#include &lt;stdbool.h&gt;</code></li><li>true 和 false</li><li>本质上也是整数类型， 0 和 1</li></ul><h2 id="类型大小" tabindex="-1">类型大小 <a class="header-anchor" href="#类型大小" aria-label="Permalink to &quot;类型大小&quot;">​</a></h2><ul><li>使用 sizeof() 来查看 <code>类型</code> 和 <code>值</code> 占用的 <code>字节</code> 大小，使用 %zd 来输出</li></ul>',14)]))}const f=a(t,[["render",r]]);export{_ as __pageData,f as default};
