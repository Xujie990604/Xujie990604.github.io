import{_ as e,c as i,o as l,ag as o}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"WEB 埋点","description":"","frontmatter":{},"headers":[],"relativePath":"docs/技术文档总结/JavaScript文档/WEB埋点实现.md","filePath":"docs/技术文档总结/JavaScript文档/WEB埋点实现.md","lastUpdated":1731159897000}'),r={name:"docs/技术文档总结/JavaScript文档/WEB埋点实现.md"};function t(d,a,h,n,c,s){return l(),i("div",null,a[0]||(a[0]=[o(`<h1 id="web-埋点" tabindex="-1">WEB 埋点 <a class="header-anchor" href="#web-埋点" aria-label="Permalink to &quot;WEB 埋点&quot;">​</a></h1><blockquote><p>埋点是一种<code>数据采集技术</code>，主要用于收集用户在 Web 应用或移动应用中的<code>行为数据</code>。通过在代码中插入特定的<code>监控代码</code>（也称为“埋点代码”），可以在用户触发<code>特定事件</code>（如点击按钮、浏览页面等）时<code>捕获</code>相关信息，并将这些信息发送到数据分析平台进行存储和分析。埋点可以帮助开发者、产品经理和运营团队了解用户在使用应用过程中的<code>操作习惯和需求</code>，为<code>产品优化</code>、<code>营销策略</code>和<code>用户体验</code>改进提供依据。</p></blockquote><h2 id="一、埋点数据收集" tabindex="-1">一、埋点数据收集 <a class="header-anchor" href="#一、埋点数据收集" aria-label="Permalink to &quot;一、埋点数据收集&quot;">​</a></h2><h3 id="_1-1-数据监控" tabindex="-1">1.1 数据监控 <a class="header-anchor" href="#_1-1-数据监控" aria-label="Permalink to &quot;1.1 数据监控&quot;">​</a></h3><h4 id="数据监控概念" tabindex="-1">数据监控概念 <a class="header-anchor" href="#数据监控概念" aria-label="Permalink to &quot;数据监控概念&quot;">​</a></h4><ul><li>用户应用中的行为与交互：应用访问量、功能访问量、页面停留时间、输入框内容</li></ul><h4 id="数据监控意义" tabindex="-1">数据监控意义 <a class="header-anchor" href="#数据监控意义" aria-label="Permalink to &quot;数据监控意义&quot;">​</a></h4><ol><li>了解应用的实际用户量、活跃度</li><li>了解用户最关注的功能，可以将功能的顺序、层级进行调整</li><li>将主要经历投入到重点功能的开发、维护、优化上</li><li>优化产品搜索功能</li></ol><h3 id="_1-2-性能监控" tabindex="-1">1.2 性能监控 <a class="header-anchor" href="#_1-2-性能监控" aria-label="Permalink to &quot;1.2 性能监控&quot;">​</a></h3><h4 id="性能监控概念" tabindex="-1">性能监控概念 <a class="header-anchor" href="#性能监控概念" aria-label="Permalink to &quot;性能监控概念&quot;">​</a></h4><ul><li>应用用户体验：不同机型、系统、服务器的首屏加载时间、页面渲染时间、HTTP 接口响应时间</li></ul><h4 id="性能监控意义" tabindex="-1">性能监控意义 <a class="header-anchor" href="#性能监控意义" aria-label="Permalink to &quot;性能监控意义&quot;">​</a></h4><ul><li>了解网站性能表现，便于了解应用性能瓶颈，优化用户体验</li><li>了解用户使用终端的规格分布、在后续功能实现中起到指导作用</li></ul><h3 id="_1-3-异常监控" tabindex="-1">1.3 异常监控 <a class="header-anchor" href="#_1-3-异常监控" aria-label="Permalink to &quot;1.3 异常监控&quot;">​</a></h3><h4 id="异常监控概念" tabindex="-1">异常监控概念 <a class="header-anchor" href="#异常监控概念" aria-label="Permalink to &quot;异常监控概念&quot;">​</a></h4><ul><li>网站运行过程中的错误：资源加载失败、页面渲染失败、未捕获的错误、接口获取失败</li></ul><h4 id="异常监控意义" tabindex="-1">异常监控意义 <a class="header-anchor" href="#异常监控意义" aria-label="Permalink to &quot;异常监控意义&quot;">​</a></h4><ul><li>帮助产品更快的发现线上 bug, 以便及时进行解决</li><li>帮助开发者定位和解决难复现、条件复现问题</li></ul><h2 id="二、埋点方案" tabindex="-1">二、埋点方案 <a class="header-anchor" href="#二、埋点方案" aria-label="Permalink to &quot;二、埋点方案&quot;">​</a></h2><h3 id="_2-1-代码埋点" tabindex="-1">2.1 代码埋点 <a class="header-anchor" href="#_2-1-代码埋点" aria-label="Permalink to &quot;2.1 代码埋点&quot;">​</a></h3><ul><li>手动添加埋点</li><li>优点：灵活性高、控制精确</li><li>缺点：编写任务量大，维护任务量大</li></ul><h3 id="_2-2-可视化埋点" tabindex="-1">2.2 可视化埋点 <a class="header-anchor" href="#_2-2-可视化埋点" aria-label="Permalink to &quot;2.2 可视化埋点&quot;">​</a></h3><ul><li>使用三方插件、通过可视化页面来选择要跟踪的事件和页面后系统自动生成相应的跟踪代码</li><li>优点：简单</li><li>缺点：灵活性较低</li></ul><h3 id="_2-3-无痕埋点" tabindex="-1">2.3 无痕埋点 <a class="header-anchor" href="#_2-3-无痕埋点" aria-label="Permalink to &quot;2.3 无痕埋点&quot;">​</a></h3><ul><li>使用三方插件、自动采集所有的用户行为数据</li><li>优点：简单、采集全量数据</li><li>缺点：灵活性较低、较多无关数据、服务器压力较大</li></ul><h2 id="四、埋点的具体实现方式" tabindex="-1">四、埋点的具体实现方式 <a class="header-anchor" href="#四、埋点的具体实现方式" aria-label="Permalink to &quot;四、埋点的具体实现方式&quot;">​</a></h2><ul><li>将信息存储进行定时上报，而不是实时上报，减缓服务器的压力</li><li>维护一个栈结构，用于存储数据，定时上报</li><li>进行去重操作，减少数据压力</li></ul><h3 id="_1-uv-unique-visitor" tabindex="-1">（1）UV（Unique visitor） <a class="header-anchor" href="#_1-uv-unique-visitor" aria-label="Permalink to &quot;（1）UV（Unique visitor）&quot;">​</a></h3><p>是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。<code>00:00-24:00</code>内相同的客户端只被计算一次。一天内同个访客多次访问仅计算一个<code>UV</code></p><h3 id="_2-ip-internet-protocol" tabindex="-1">(2) IP（Internet Protocol） <a class="header-anchor" href="#_2-ip-internet-protocol" aria-label="Permalink to &quot;(2) IP（Internet Protocol）&quot;">​</a></h3><p>独立<code>IP</code>是指访问过某站点的<code>IP</code>总数，以用户的 IP 地址作为统计依据。<code>00:00-24:00</code> 内相同<code>IP</code>地址之被计算一次。</p><blockquote><p>如：你和你的家人用各自的账号在同一台电脑上登录新浪微博，则 IP 数+1，UV 数+2。由于使用的是同一台电脑，所以 IP 不变，但使用的不同账号，所以 UV+2</p></blockquote><h3 id="_3-pv-page-view" tabindex="-1">(3) PV（Page View） <a class="header-anchor" href="#_3-pv-page-view" aria-label="Permalink to &quot;(3) PV（Page View）&quot;">​</a></h3><p>即页面浏览量或点击量，用户每 1 次对网站中的每个网页访问均被记录 1 个<code>PV</code>。用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。</p><h3 id="_4-vv-visit-view" tabindex="-1">(4) VV（Visit View） <a class="header-anchor" href="#_4-vv-visit-view" aria-label="Permalink to &quot;(4) VV（Visit View）&quot;">​</a></h3><p>用以统计所有访客 1 天内访问网站的次数。当访客完成所有浏览并最终关掉该网站的所有页面时便完成了一次访问，同一访客 1 天内可能有多次访问行为，访问次数累计。</p><blockquote><p>如：你今天 10 点钟打开了百度，访问了它的三个页面；11 点钟又打开了百度，访问了它的两个页面，则 PV 数+5，VV 数+2.PV 是指页面的浏览次数，VV 是指你访问网站的次数。</p></blockquote><h3 id="_5-页面停留时间" tabindex="-1">(5) 页面停留时间 <a class="header-anchor" href="#_5-页面停留时间" aria-label="Permalink to &quot;(5) 页面停留时间&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 重写 Vue 的路由拦截器</span></span>
<span class="line"><span style="color:#6A737D;">// 只有停留 X 秒才上报数据, 避免无效数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="五、使用三方插件进行集成" tabindex="-1">五、使用三方插件进行集成 <a class="header-anchor" href="#五、使用三方插件进行集成" aria-label="Permalink to &quot;五、使用三方插件进行集成&quot;">​</a></h2><h2 id="六、数据上报" tabindex="-1">六、数据上报 <a class="header-anchor" href="#六、数据上报" aria-label="Permalink to &quot;六、数据上报&quot;">​</a></h2><h3 id="_6-1-xhr-接口请求" tabindex="-1">6.1 xhr 接口请求 <a class="header-anchor" href="#_6-1-xhr-接口请求" aria-label="Permalink to &quot;6.1 xhr 接口请求&quot;">​</a></h3><ul><li>使用服务端接口来上报埋点数据</li><li>优点：简单</li><li>缺点：跨域问题、</li></ul><h3 id="_6-2-img-标签-gif" tabindex="-1">6.2 img 标签(GIF) <a class="header-anchor" href="#_6-2-img-标签-gif" aria-label="Permalink to &quot;6.2 img 标签(GIF)&quot;">​</a></h3><ul><li>将埋点数据伪装成图片的 URL（1 <code>*</code> 1 的透明 <code>GIF</code>）</li><li>优点：无跨域问题</li><li>缺点：URL 对于长度有限制，不适合大量数据</li></ul>`,45)]))}const q=e(r,[["render",t]]);export{b as __pageData,q as default};
