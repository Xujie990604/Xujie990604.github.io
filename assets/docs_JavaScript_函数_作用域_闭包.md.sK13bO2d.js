import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"闭包","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/函数&作用域/闭包.md","filePath":"docs/JavaScript/函数&作用域/闭包.md","lastUpdated":1735478813000}'),e={name:"docs/JavaScript/函数&作用域/闭包.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h1><ul><li>概念: 有权访问另一个函数作用域的变量的函数</li><li>实现方式：内部函数(内部函数使用了外部函数中的变量)被保存到外部(1. 直接返回函数 2. 返回对象，对象的方法是函数 3. setTimeout() 的回调函数被放到定时器线程中)时会生成闭包，是因为被返回出来的内部函数一直持有外部函数的执行期上下文。</li><li>优点：私有化数据并在私有化数据的基础上保持数据</li><li>缺点：闭包会一直持有父函数的执行期上下文(活动对象)，导致占用内存不被清除，造成内存泄露</li></ul><h2 id="闭包的应用" tabindex="-1">闭包的应用 <a class="header-anchor" href="#闭包的应用" aria-label="Permalink to &quot;闭包的应用&quot;">​</a></h2><h3 id="实现私有变量" tabindex="-1">实现私有变量 <a class="header-anchor" href="#实现私有变量" aria-label="Permalink to &quot;实现私有变量&quot;">​</a></h3><ul><li>在实现面向对象系统时使用闭包来模仿私有变量</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> counterNum</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//私有变量</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">add</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    num</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getNum</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> counterNum1</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> counterNum</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> counterNum1.</span><span style="color:#6F42C1;">getNum</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//10</span></span>
<span class="line"><span style="color:#24292E;">counterNum1.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> counterNum1.</span><span style="color:#6F42C1;">getNum</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//11</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(counterNum1.num); </span><span style="color:#6A737D;">// undefined (无法直接读取 num 变量，只能通过定义的方法来操作 num 变量)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="可以做缓存-存储结构" tabindex="-1">可以做缓存(存储结构) <a class="header-anchor" href="#可以做缓存-存储结构" aria-label="Permalink to &quot;可以做缓存(存储结构)&quot;">​</a></h3><ul><li>相当于一个仓库(父函数返回多个子函数，这些子函数都会操作一个共同的变量)</li><li>在 ES6 之前的模块化就是通过这种形式实现的</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> father</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    add</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      num</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    increase</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      num</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    get</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    set</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Snum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Snum;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> father</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//12</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="高阶函数-柯里化" tabindex="-1">高阶函数(柯里化) <a class="header-anchor" href="#高阶函数-柯里化" aria-label="Permalink to &quot;高阶函数(柯里化)&quot;">​</a></h3><h3 id="记忆函数" tabindex="-1">记忆函数 <a class="header-anchor" href="#记忆函数" aria-label="Permalink to &quot;记忆函数&quot;">​</a></h3><ul><li>存储之前计算的结果，避免重复计算</li></ul><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> fibonacci</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> list</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#6F42C1;"> fb</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list[n]</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(result </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> fb</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#6F42C1;"> fb</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      list[n] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> fb</span></span>
<span class="line"><span style="color:#24292E;">}(); </span><span style="color:#6A737D;">//!有一个执行符号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="防抖节流" tabindex="-1">防抖节流 <a class="header-anchor" href="#防抖节流" aria-label="Permalink to &quot;防抖节流&quot;">​</a></h3><p>TODO: 补充防抖、节流的示例</p><p><code>##</code> 闭包带来的问题</p><h3 id="内存泄漏问题" tabindex="-1">内存泄漏问题 <a class="header-anchor" href="#内存泄漏问题" aria-label="Permalink to &quot;内存泄漏问题&quot;">​</a></h3><ul><li>解决内存泄漏问题:</li></ul><ol><li>将保留内部函数的变量赋值为 null, 没有变量持有返回出来的内部函数后，内部函数占用的内存会被自动回收，内部函数持有的父函数执行期上下文也就会被回收</li><li>在退出外部函数之前，将不使用的局部变量赋值为 null</li></ol><h3 id="打印问题" tabindex="-1">打印问题 <a class="header-anchor" href="#打印问题" aria-label="Permalink to &quot;打印问题&quot;">​</a></h3><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// ES6 之前使用立即执行函数来解决(来模仿块级作用域)</span></span>
<span class="line"><span style="color:#6A737D;">// ES6 之后使用块级作用域来解决</span></span>
<span class="line"><span style="color:#6A737D;">// 因为闭包的存在，最后的输出结果会是 4 4 4 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">  setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">  }, j </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用立即执行函数来 实现每隔一秒打印 0  1  2  3</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 3</span><span style="color:#24292E;">; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">j</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">    setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(j)</span></span>
<span class="line"><span style="color:#24292E;">    }, j </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }(index))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用块级作用域来 实现每隔一秒打印 0  1  2  3</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">  setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">  }, j </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,21)]))}const E=n(e,[["render",o]]);export{u as __pageData,E as default};
