import{_ as a,c as n,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const y=JSON.parse('{"title":"AST 抽象语法树","description":"","frontmatter":{},"headers":[],"relativePath":"docs/前端工程化/AST.md","filePath":"docs/前端工程化/AST.md","lastUpdated":1736930537000}'),p={name:"docs/前端工程化/AST.md"};function o(r,s,t,c,i,u){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="ast-抽象语法树" tabindex="-1">AST 抽象语法树 <a class="header-anchor" href="#ast-抽象语法树" aria-label="Permalink to &quot;AST 抽象语法树&quot;">​</a></h1><ul><li>抽象语法树（Abstract Syntax Tree，AST）是源代码语法结构的一种抽象表示，它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构</li><li>DSL：领域特定语言、不要求图灵完备，只需要满足特定场景下的用途即可</li><li>GPL：通用用途语言、要求图灵完备 TODO：补充有限状态机的内容</li><li>有限状态自动机：有限状态 - 有限个状态。正则表达式的本质就是有限自动机</li></ul><h2 id="一、编译" tabindex="-1">一、编译 <a class="header-anchor" href="#一、编译" aria-label="Permalink to &quot;一、编译&quot;">​</a></h2><ul><li>编译器其实只是一段程序，它用来将 <code>一种语言 A</code> 翻译成 <code>另一种语言 B</code></li><li>源代码 -&gt; 词法分析 -&gt; 语法分析 -&gt; 语义分析 -&gt; 生成中间代码 -&gt; 优化 -&gt; 目标代码生成 -&gt; 目标代码</li></ul><ol><li>解析过程: 词法分析(生成 Token)、语法分析(生成 AST)</li><li>转化过程：将原 AST 转化为新的 AST</li><li>代码生成：将新的 AST 转化为目标代码</li></ol><h2 id="编译的具体过程" tabindex="-1">编译的具体过程 <a class="header-anchor" href="#编译的具体过程" aria-label="Permalink to &quot;编译的具体过程&quot;">​</a></h2><h3 id="源代码" tabindex="-1">源代码 <a class="header-anchor" href="#源代码" aria-label="Permalink to &quot;源代码&quot;">​</a></h3><div class="language-lisp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lisp</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(add </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> (subtract </span><span style="color:#005CC5;">4</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="词法分析" tabindex="-1">词法分析 <a class="header-anchor" href="#词法分析" aria-label="Permalink to &quot;词法分析&quot;">​</a></h3><ul><li>使用 <code>tokenizer(分词器)</code> 或者 <code>lexer(词法分析器)</code> ，将源码拆分成 <code>tokens</code></li><li>token: 是一个放置对象的数组，其中的每一个对象都可以看做是一个单元（数字，标签，标点，操作符...）的描述信息。</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;subtract&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="语法分析" tabindex="-1">语法分析 <a class="header-anchor" href="#语法分析" aria-label="Permalink to &quot;语法分析&quot;">​</a></h3><ul><li>将 tokens 重新整理成语法相互关联的表达形式，这种表达形式一般被称为 <code>中间层或者AST</code></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#005CC5;">  type</span><span style="color:#032F62;">:</span><span style="color:#032F62;"> &#39;Program&#39;,</span></span>
<span class="line"><span style="color:#6F42C1;">  body:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#005CC5;">    type</span><span style="color:#032F62;">:</span><span style="color:#032F62;"> &#39;CallExpression&#39;,</span></span>
<span class="line"><span style="color:#6F42C1;">    name:</span><span style="color:#032F62;"> &#39;add&#39;,</span></span>
<span class="line"><span style="color:#6F42C1;">    params:</span></span>
<span class="line"><span style="color:#24292E;">      [{</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;NumberLiteral&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        value: </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;CallExpression&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;subtract&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        params: [{</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&#39;NumberLiteral&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          value: </span><span style="color:#032F62;">&#39;4&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        }, {</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&#39;NumberLiteral&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          value: </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        }]</span></span>
<span class="line"><span style="color:#24292E;">      }]</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="转化-重点" tabindex="-1">转化(重点) <a class="header-anchor" href="#转化-重点" aria-label="Permalink to &quot;转化(重点)&quot;">​</a></h3><ul><li>Traversal(遍历): 深度优化遍历</li><li>Visitors (访问器)：访问器最基本的思想是创建一个“访问器”对象，这个对象可以处理不同类型的节点函数</li><li>这个过程主要是<code>改写AST（抽象语法树</code>），或者根据<code>当前AST（抽象语法树）生成一个新的AST（抽象语法树</code></li></ul><h3 id="代码生成" tabindex="-1">代码生成 <a class="header-anchor" href="#代码生成" aria-label="Permalink to &quot;代码生成&quot;">​</a></h3><ul><li>将新的 AST 树转化为目标代码</li></ul><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><ol><li>代码语法检查：Eslint</li><li>代码的格式化：Prettier</li><li>代码的高亮、代码错误提示、代码自动补全</li><li>babel</li><li>代码压缩</li><li>Vue template 的编译</li></ol>`,20)]))}const d=a(p,[["render",o]]);export{y as __pageData,d as default};
