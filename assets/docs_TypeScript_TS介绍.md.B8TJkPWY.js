import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"TypeScript 基础","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS介绍.md","filePath":"docs/TypeScript/TS介绍.md","lastUpdated":1722758955000}'),e={name:"docs/TypeScript/TS介绍.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="typescript-基础" tabindex="-1">TypeScript 基础 <a class="header-anchor" href="#typescript-基础" aria-label="Permalink to &quot;TypeScript 基础&quot;">​</a></h1><ol><li>复杂性不会凭空消失，只是会从 A 转移到 B</li><li>大型项目没必要非得使用 TS, 只要做好<code>代码规范</code>和<code>注释</code>就行了，但是如何做好<code>代码规范</code>和<code>注释</code>是一个重要的问题</li></ol><h2 id="一、typescript-介绍" tabindex="-1">一、TypeScript 介绍 <a class="header-anchor" href="#一、typescript-介绍" aria-label="Permalink to &quot;一、TypeScript 介绍&quot;">​</a></h2><ul><li>TypeScript 是一门静态类型语言，编译类型语言</li><li>TypeScript 是 JavaScript 的超集(兼容 JavaScript 的所有特性)</li></ul><h3 id="_1-1-为什么要使用-typescript" tabindex="-1">1.1 为什么要使用 TypeScript <a class="header-anchor" href="#_1-1-为什么要使用-typescript" aria-label="Permalink to &quot;1.1 为什么要使用 TypeScript&quot;">​</a></h3><ol><li>JS 缺失类型的概念，TS 在 JS 的基础上增加了类型的概念保证程序的健壮性</li><li>在开发时能够拥有更好的开发体验。使用 TS 后，IDE 可以做到自动提示，自动填充、重构等功能</li><li>JS 中的每个值都有一组行为，你可以通过运行不同的操作来观察这些行为。但是 JS 很难在运行之前预测结果，每种操作的结果取决于我们最初拥有的值。开发者只有在代码运行时才能发现问题。TS 在 JS 的基础上增加了类型系统，静态类型系统描述了当我们运行程序时我们的值的形状和行为。能够提前发现错误，错误代码在编译时期就会报错，而不用非得等到代码已经跑起来。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 即使 message 不是 string, 在 JS 中也可以对它执行 \`()\` 操作</span></span>
<span class="line"><span style="color:#24292E;">message.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">message</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-2-typescript-的特点" tabindex="-1">1.2 TypeScript 的特点 <a class="header-anchor" href="#_1-2-typescript-的特点" aria-label="Permalink to &quot;1.2 TypeScript 的特点&quot;">​</a></h3><ul><li>在代码运行之前（静态）运行的工具并确保程序的类型正确（类型检查）</li><li>TS 的核心原则之一就是对<code>值所具有的结构</code>进行类型检查(结构类型类型系统)</li></ul><h2 id="二、类型的理解" tabindex="-1">二、类型的理解 <a class="header-anchor" href="#二、类型的理解" aria-label="Permalink to &quot;二、类型的理解&quot;">​</a></h2><ul><li>类型：一组具有相同特征的值的集合</li><li>如果两个值具有共同的特征，就可以说，它们属于同一种类型，一旦确定某个值的类型，就意味着，这个值具有该类型的所有特征，可以进行该类型的所有运算。<code>类型是人为添加的一种编程约束和用法提示</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// string 代表可能字符串的无限集合</span></span>
<span class="line"><span style="color:#6A737D;">// never 是一组空值(空类型)，由于集合中没有值，所以 \`永不\` 类型 \`永不\` 能有任何值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> any</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> never</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> never</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> any; </span><span style="color:#6A737D;">// 不能将类型“any”分配给类型“never”。ts(2322)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三、ts特点-结构类型系统" tabindex="-1">三、TS特点：结构类型系统 <a class="header-anchor" href="#三、ts特点-结构类型系统" aria-label="Permalink to &quot;三、TS特点：结构类型系统&quot;">​</a></h2><ul><li>TypeScript 的核心原则之一是类型检查侧重于<code>值的形状</code>。这有时被称为 <code>duck Typing</code> 或 结构类型</li><li>在 TypeScript 中，最好将类型视为一组具有共同点的值。因为类型只是集合，所以一个特定的值可以同时属于多个集合</li></ul><h3 id="_3-1-ts-中的擦除" tabindex="-1">3.1 TS 中的擦除 <a class="header-anchor" href="#_3-1-ts-中的擦除" aria-label="Permalink to &quot;3.1 TS 中的擦除&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> SquareConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  color</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  width</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> createSquare</span><span style="color:#24292E;">(</span><span style="color:#E36209;">config</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> SquareConfig</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">color</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">area</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;"> } {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    color: config.color </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &quot;red&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    area: config.width </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> config.width </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> config.width </span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> 20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 一、直接传入对象字面量</span></span>
<span class="line"><span style="color:#6A737D;">// TS 会报告错误：对象字面在将它们分配给其他变量或将它们作为参数传递时会得到特殊处理并进行额外的属性检查</span></span>
<span class="line"><span style="color:#6F42C1;">createSquare</span><span style="color:#24292E;">({ colour: </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">, width: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">//对象字面量只能指定已知的属性，但“colour”中不存在类型“SquareConfig”。是否要写入 color?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、先将值赋给变量再传入</span></span>
<span class="line"><span style="color:#6A737D;">// 只要你在 squareOptions 和 SquareConfig 之间具有共同属性, TS 就不会报错</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> squareOptions</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { colour: </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">, width: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6F42C1;">createSquare</span><span style="color:#24292E;">(squareOptions);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_3-2-ts-的类型并不存在于运行时中" tabindex="-1">3.2 TS 的类型并不存在于运行时中 <a class="header-anchor" href="#_3-2-ts-的类型并不存在于运行时中" aria-label="Permalink to &quot;3.2 TS 的类型并不存在于运行时中&quot;">​</a></h3><ul><li>TS 编译生成的 JS 代码中，类型信息会被完全删除，类型注释永远不会改变程序的运行时行为。</li><li>但是 JAVA, C# 等语言 &quot;代码中编写的类型在运行时存在&quot;，类型通过他们的声明而不是他们的结构相关</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、打印泛型类型</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> T</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#005CC5;"> T</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// “T”仅表示类型，但在此处却作为值使用</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、打印接口类型</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> IUser</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> user1</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> IUser</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> user1); </span><span style="color:#6A737D;">// object， not IUser</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,19)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
