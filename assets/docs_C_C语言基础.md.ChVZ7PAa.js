import{_ as l,c as e,o as i,ag as o}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"C 语言","description":"","frontmatter":{},"headers":[],"relativePath":"docs/C/C语言基础.md","filePath":"docs/C/C语言基础.md","lastUpdated":1736672901000}'),t={name:"docs/C/C语言基础.md"};function d(r,a,c,n,s,h){return i(),e("div",null,a[0]||(a[0]=[o('<h1 id="c-语言" tabindex="-1">C 语言 <a class="header-anchor" href="#c-语言" aria-label="Permalink to &quot;C 语言&quot;">​</a></h1><ul><li>特点：编译型语言，强类型语言</li><li>编译器：把 高级语言程序 翻译成 计算机能理解的机器语言指令集 的程序， 把 源代码 转换成 可执行代码的程序</li><li>不同 CPU 制造商使用的指令系统和编码格式不同，但是我们可以利用与特定类型 CPU 匹配的编译器， 将源代码翻译成不同 CPU 使用的机器语言</li></ul><h2 id="编译性语言和解释性语言" tabindex="-1">编译性语言和解释性语言 <a class="header-anchor" href="#编译性语言和解释性语言" aria-label="Permalink to &quot;编译性语言和解释性语言&quot;">​</a></h2><h3 id="编译性语言" tabindex="-1">编译性语言 <a class="header-anchor" href="#编译性语言" aria-label="Permalink to &quot;编译性语言&quot;">​</a></h3><ol><li>C Golang C++</li><li>利用编译器，把 源代码 转换成 可执行代码的程序，然后放到环境中运行(保密性好，其他人看不到源码)</li><li>“一次编译，无限运行”。 因为在执行过程中无需再额外去解析语法，所以一般执行效率较高</li><li>编译性语言与解释性语言相比较难上手，需要大量静态的细节指导编译器获取足够的信息，如类型提示</li><li>因为需要将源码编译成可执行程序（程序不能跨平台：不同的操作系统要求不同的程序类型，源代码不能跨平台：不同平台支持的变量，函数，类型可能都不相同），所以可移植性差。</li></ol><h3 id="解释性语言" tabindex="-1">解释性语言 <a class="header-anchor" href="#解释性语言" aria-label="Permalink to &quot;解释性语言&quot;">​</a></h3><ol><li>JavaScript PHP</li><li>利用解释器，直接将源码放到解释器中运行(保密性差，其他人看得到源码)</li><li>一边解释一边执行，所以一般执行效率会比较低</li><li>解释性语言往往很简单就能上手，解释性语言往往都是动态类型语言</li><li>利用解释器的跨平台性，可以让解释性语言方便的实现跨平台运行。 “一份代码，到处执行”（解释器会保证相同的语法，在不同的平台中最终的执行效果是一致的， 解释器帮助你，抹平了各平台之间的差异）</li></ol><h2 id="存储单位" tabindex="-1">存储单位 <a class="header-anchor" href="#存储单位" aria-label="Permalink to &quot;存储单位&quot;">​</a></h2><ol><li>位（bit）：最小的存储单元，可以存储 0 或 1</li><li>字节（byte）：一字节为 8 比特</li><li>字（word）：是设计计算机时给定的 <code>自然存储单位</code>（一般现在的个人计算机都是 64 位，说明一个 <code>字长</code> 是64位 ）</li></ol><h2 id="预处理器" tabindex="-1">预处理器 <a class="header-anchor" href="#预处理器" aria-label="Permalink to &quot;预处理器&quot;">​</a></h2><ul><li>C 预处理器为预处理器指令（以#符号开始）查找源代码程序，并在开始编译程序之前处理它们。处理器根据 <code>#include</code> 指令把另一个文件中的内容添加到该指令所在的位置。<code>#define</code> 指令可以创建明示常量（符号常量），即代表常量的符号</li><li><code>#define NAME value</code> 来声明常量</li><li><code>#include &lt;stdio.h&gt;</code> 来引入头文件</li></ul>',11)]))}const C=l(t,[["render",d]]);export{u as __pageData,C as default};
