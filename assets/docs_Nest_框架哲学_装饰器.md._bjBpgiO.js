import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"装饰器","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Nest/框架哲学/装饰器.md","filePath":"docs/Nest/框架哲学/装饰器.md","lastUpdated":1740575512000}'),e={name:"docs/Nest/框架哲学/装饰器.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h1><ul><li>TS 的语法，实际上就是将对被装饰主体进行操作(添加属性，方法...)使得被装饰主题能够很简单的拥有一类功能</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 自定义一个 GET 方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> Get</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">url</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">descriptor</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 获取到被装饰的方法主体</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> fnc</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> descriptor.value</span></span>
<span class="line"><span style="color:#24292E;">    axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(url)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 成功的话，调用函数主体并传入成功的消息和自定义参数</span></span>
<span class="line"><span style="color:#6F42C1;">      fnc</span><span style="color:#24292E;">(res, status: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">       // 失败的话，调用函数主体并传入失败的错误和自定义参数</span></span>
<span class="line"><span style="color:#6F42C1;">      fnc</span><span style="color:#24292E;">(err, status: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://xxx.com/xxx&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 在运行该函数时，就会把该函数使用装饰器来修饰</span></span>
<span class="line"><span style="color:#6A737D;">// 在修饰的过程中会调用 axios 的 get 方法，并且 axios 有结果之后调用被修饰主体(调用的时候还能传递一些参数)</span></span>
<span class="line"><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">(content, code) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,3)]))}const E=n(e,[["render",o]]);export{u as __pageData,E as default};
