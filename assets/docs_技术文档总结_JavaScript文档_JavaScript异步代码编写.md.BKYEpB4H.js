import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"JS 异步编程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/技术文档总结/JavaScript文档/JavaScript异步代码编写.md","filePath":"docs/技术文档总结/JavaScript文档/JavaScript异步代码编写.md","lastUpdated":1739189099000}'),e={name:"docs/技术文档总结/JavaScript文档/JavaScript异步代码编写.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="js-异步编程" tabindex="-1">JS 异步编程 <a class="header-anchor" href="#js-异步编程" aria-label="Permalink to &quot;JS 异步编程&quot;">​</a></h1><h2 id="一、同步任务和异步任务" tabindex="-1">一、同步任务和异步任务 <a class="header-anchor" href="#一、同步任务和异步任务" aria-label="Permalink to &quot;一、同步任务和异步任务&quot;">​</a></h2><h3 id="_1-1-同步任务" tabindex="-1">1.1 同步任务 <a class="header-anchor" href="#_1-1-同步任务" aria-label="Permalink to &quot;1.1 同步任务&quot;">​</a></h3><ol><li>某段程序执行会阻塞其他程序的执行，一定要等上一个任务执行完毕，拿到结果之后，才能执行下一个任务。</li><li>其表现形式为<code>程序的执行顺序依赖程序本身的书写顺序</code>。</li></ol><h3 id="_1-2-异步任务" tabindex="-1">1.2 异步任务 <a class="header-anchor" href="#_1-2-异步任务" aria-label="Permalink to &quot;1.2 异步任务&quot;">​</a></h3><ol><li>某段程序执行不会阻塞其他程序的执行，不必等待上一个任务执行完毕、拿到结果，就能执行下一个任务</li><li>其表现形式为<code>程序的执行顺序不依赖本身的书写顺序</code>。</li></ol><h2 id="二、封装一个-xmlhttprequest-请求函数" tabindex="-1">二、封装一个 XMLHttpRequest 请求函数 <a class="header-anchor" href="#二、封装一个-xmlhttprequest-请求函数" aria-label="Permalink to &quot;二、封装一个 XMLHttpRequest 请求函数&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一个简易的AJAX请求函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.readyState </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">DONE</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 数据响应成功</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          code: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status,</span></span>
<span class="line"><span style="color:#24292E;">          Data: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText),</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 数据响应失败</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          code: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status,</span></span>
<span class="line"><span style="color:#24292E;">          Data: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText),</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, url);</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="三、基于回调函数的异步代码编写" tabindex="-1">三、基于回调函数的异步代码编写 <a class="header-anchor" href="#三、基于回调函数的异步代码编写" aria-label="Permalink to &quot;三、基于回调函数的异步代码编写&quot;">​</a></h2><ul><li>将上面的 <code>getData</code> 函数与回调函数进行结合</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 网络请求成功、失败之后，使用回调函数的形式来进行后续逻辑处理</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">success</span><span style="color:#24292E;">, </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.readyState </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">DONE</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">        success</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          code: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status,</span></span>
<span class="line"><span style="color:#24292E;">          Data: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText),</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">        error</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          code: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status,</span></span>
<span class="line"><span style="color:#24292E;">          Data: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText),</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, url);</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>单个请求示例</li></ul><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">  &quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求成功&quot;</span><span style="color:#24292E;">, res.Data);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求错误&quot;</span><span style="color:#24292E;">, res.code);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>如果下一个请求需要用到上一个请求返回的值，基于回调函数的这种请求方式就需要<code>嵌套书写</code>代码</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">  &quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">    getData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">      &quot;https://xxxxx/当前市/info/?当前省=res.Data&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">      function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">        getData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">          &quot;https://xxxxx/当前区/info?当前市=res.Data&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">          function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;当前所属区域行政单位&quot;</span><span style="color:#24292E;">, res.Data);</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#D73A49;">          function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求错误&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> res.code);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#D73A49;">      function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求错误&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> res.code);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求错误&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> res.code);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_3-1-回调函数的优缺点" tabindex="-1">3.1 回调函数的优缺点 <a class="header-anchor" href="#_3-1-回调函数的优缺点" aria-label="Permalink to &quot;3.1 回调函数的优缺点&quot;">​</a></h3><h4 id="_1-优点" tabindex="-1">(1) 优点 <a class="header-anchor" href="#_1-优点" aria-label="Permalink to &quot;(1) 优点&quot;">​</a></h4><ol><li>简单性: 对于简单的异步任务，使用回调函数可以快速实现、代码直观易懂</li><li>兼容性: 兼容性很好，兼容所有浏览器</li></ol><h4 id="_2-缺点" tabindex="-1">(2) 缺点 <a class="header-anchor" href="#_2-缺点" aria-label="Permalink to &quot;(2) 缺点&quot;">​</a></h4><ol><li>回调地狱：当多个异步操作互相依赖时，回调函数会嵌套多层，导致代码难以阅读和维护，这种现象被称为<code>回调地狱</code></li><li>非线性：程序的执行没按照程序的书写方式执行，可读性差</li></ol><h2 id="四、事件" tabindex="-1">四、事件 <a class="header-anchor" href="#四、事件" aria-label="Permalink to &quot;四、事件&quot;">​</a></h2><ul><li>使用事件模型的方式来完成异步任务的处理(属于发布订阅模式)。例如，JS DOM 事件、Vue 的事件总线。</li></ul><h3 id="_4-1-js-dom-事件" tabindex="-1">4.1 JS DOM 事件 <a class="header-anchor" href="#_4-1-js-dom-事件" aria-label="Permalink to &quot;4.1 JS DOM 事件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 模拟用户点击</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4-2-vue-的事件总线" tabindex="-1">4.2 Vue 的事件总线 <a class="header-anchor" href="#_4-2-vue-的事件总线" aria-label="Permalink to &quot;4.2 Vue 的事件总线&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> Bus</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Vue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Bus.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;itemImageLoad&quot;</span><span style="color:#24292E;">, index);</span></span>
<span class="line"><span style="color:#24292E;">Bus.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;itemImageLoad&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_4-3-事件的优缺点" tabindex="-1">4.3 事件的优缺点 <a class="header-anchor" href="#_4-3-事件的优缺点" aria-label="Permalink to &quot;4.3 事件的优缺点&quot;">​</a></h3><ol><li>简单易用，适合小项目中的通信</li><li>发布者和订阅者是解耦的，但是在大型项目中会导致订阅者、发布者之间的关系难以维护。定位问题时难以调试</li><li>事件订阅时机晚于事件触发的时机，那这个事件就会丢失。不再能检测到</li></ol><h2 id="五、promise" tabindex="-1">五、Promise <a class="header-anchor" href="#五、promise" aria-label="Permalink to &quot;五、Promise&quot;">​</a></h2><h3 id="_5-1-基于-promise-的异步代码编写" tabindex="-1">5.1 基于 Promise 的异步代码编写 <a class="header-anchor" href="#_5-1-基于-promise-的异步代码编写" aria-label="Permalink to &quot;5.1 基于 Promise 的异步代码编写&quot;">​</a></h3><ul><li>将 <code>getData</code> 函数与 Promise 进行结合</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.readyState </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">DONE</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">          resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            code: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status,</span></span>
<span class="line"><span style="color:#24292E;">            Data: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText),</span></span>
<span class="line"><span style="color:#24292E;">          });</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">          reject</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            code: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.status,</span></span>
<span class="line"><span style="color:#24292E;">            Data: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText),</span></span>
<span class="line"><span style="color:#24292E;">          });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, url);</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>单个请求示例</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求成功&quot;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求失败&quot;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">finally</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求无论成功失败，都会执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>如果下一个请求需要用到上一个请求返回的值，基于 Promise 的这种请求方式就需要<code>链式书写</code>代码</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前市/info/?当前省=res.Data&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前区/info?当前市=res.Data&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;当前所属区域行政单位&quot;</span><span style="color:#24292E;">, res.Data);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求错误&quot;</span><span style="color:#24292E;">, err.code);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="六、async-和-await" tabindex="-1">六、async 和 await <a class="header-anchor" href="#六、async-和-await" aria-label="Permalink to &quot;六、async 和 await&quot;">​</a></h2><ul><li>宣称异步编程的<code>最终解决方案</code>，async await 是基于 Generator 语法的语法糖</li></ul><h3 id="_6-1-generator-语法" tabindex="-1">6.1 Generator 语法 <a class="header-anchor" href="#_6-1-generator-语法" aria-label="Permalink to &quot;6.1 Generator 语法&quot;">​</a></h3><ol><li>Generator 函数的返回值是一个遍历器对象，可以依次遍历该函数内部的每一个表达式。</li><li>Generator 函数是<code>分段执行</code>的， <code>yield</code> 表达式是暂停执行的标记，而 <code>next</code> 方法可以恢复执行</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#6F42C1;"> helloWord</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  yield</span><span style="color:#032F62;"> &quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  yield</span><span style="color:#032F62;"> &quot;word&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#032F62;"> &quot;ending&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> hw</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> helloWord</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 遍历器对象</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// {value: &quot;hello&quot;, done: false}</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// {value: &quot;word&quot;, done: false}</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// {value: &quot;ending&quot;, done: true}</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// {value: &quot;ending&quot;, done: true}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_6-1-代码示例" tabindex="-1">6.1 代码示例 <a class="header-anchor" href="#_6-1-代码示例" aria-label="Permalink to &quot;6.1 代码示例&quot;">​</a></h3><ul><li>如果下一个请求需要用到上一个请求返回的值，基于 async 的这种请求方式可以实现以<code>同步代码的形式</code>实现异步任务</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res1</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res2</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前市/info/?当前省=res1.Data&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res3</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前区/info?当前市=res3.Data&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> res3;</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;当前所属区域行政单位&quot;</span><span style="color:#24292E;">, res3.Data);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="七、异常处理" tabindex="-1">七、异常处理 <a class="header-anchor" href="#七、异常处理" aria-label="Permalink to &quot;七、异常处理&quot;">​</a></h2><ol><li>网络请求的异常处理</li><li>得到数据后，进行数据操作时的异常处理</li></ol><h3 id="_7-1-promise-异常处理" tabindex="-1">7.1 Promise 异常处理 <a class="header-anchor" href="#_7-1-promise-异常处理" aria-label="Permalink to &quot;7.1 Promise 异常处理&quot;">​</a></h3><ul><li>try cath 块无法捕获异步的错误</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、无法使用 try catch 来捕获 Promise 的 reject 事件</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求成功&quot;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求失败&quot;</span><span style="color:#24292E;">, error);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、无法使用 try catch 来捕获 then 回调函数中的错误</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // NOTE: 模拟数据处理问题, 在 undefined 上访问 b 属性，会报错</span></span>
<span class="line"><span style="color:#24292E;">      res.Data.a.b;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求失败&quot;</span><span style="color:#24292E;">, err);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;数据处理失败&quot;</span><span style="color:#24292E;">, error);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>try catch 只能捕获同步代码中的错误</li><li>但是 Promise 的 then 回调函数中，如果代码中存在错误，那么错误信息会通过 catch 回调函数进行捕获</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、使用 try catch 来捕获 then 数据处理问题</span></span>
<span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 用 try catch 来捕获数据处理问题</span></span>
<span class="line"><span style="color:#D73A49;">    try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // NOTE: 模拟数据处理问题, 在 undefined 上访问 b 属性，会报错</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res.Data.a.b);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;数据处理失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、利用 catch 来捕获 Promise 的 then 回调函数中的错误</span></span>
<span class="line"><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // NOTE: 模拟数据处理问题, 在 undefined 上访问 b 属性，会报错</span></span>
<span class="line"><span style="color:#24292E;">    res.Data.a.b;</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    err.code </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求失败&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;数据处理失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_7-2-async-和-await-异常处理" tabindex="-1">7.2 async 和 await 异常处理 <a class="header-anchor" href="#_7-2-async-和-await-异常处理" aria-label="Permalink to &quot;7.2 async 和 await 异常处理&quot;">​</a></h3><ul><li>有两种情况会导致 async 函数返回值 Promise 的状态为 reject</li></ul><ol><li>await 后 Promise 的状态为 reject</li><li>同步代码中出现了错误</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // 一、NOTE: await 后面 Promise 的状态可能为 reject</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 二、 NOTE: 模拟数据处理问题, 在 undefined 上访问 b 属性，会报错</span></span>
<span class="line"><span style="color:#24292E;">  res.a.b;</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>有两种方式可以避免 async 函数返回值 Promise 的状态为 reject</li></ul><ol><li>使用 try catch 来捕获 async 函数中 await 后表达式的异步错误以及同步代码中的错误</li><li>使用 catch 方法来处理 await 后 Promise 的 reject</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、使用 try catch 来捕获 await 后 Promise 的 reject</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // NOTE: await 后面 Promise 的状态可能为 reject</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // NOTE: 模拟数据处理问题, 在 undefined 上访问 b 属性，会报错</span></span>
<span class="line"><span style="color:#24292E;">    res.a.b;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求或者数据处理失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、使用 catch 方法来处理 await 后 Promise 的 reject</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // NOTE: await 后面 Promise 的状态可能为 reject</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://xxxxx/当前省/info&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络请求失败&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>TODO： 是否可以有更优雅的方式来实现错误处理</p><ol><li>使用装饰器，统一进行错误的处理，避免没必要的代码量。</li><li>使用全局异常处理的形式，这样可以减少一些不必要的代码</li></ol><h2 id="八、浏览器与并发" tabindex="-1">八、浏览器与并发 <a class="header-anchor" href="#八、浏览器与并发" aria-label="Permalink to &quot;八、浏览器与并发&quot;">​</a></h2><p>TODO：浏览器支持的接口并发是多少？是否会影响性能？如果解决这个问题</p><h2 id="九、如何消除异步任务的传染性" tabindex="-1">九、如何消除异步任务的传染性 <a class="header-anchor" href="#九、如何消除异步任务的传染性" aria-label="Permalink to &quot;九、如何消除异步任务的传染性&quot;">​</a></h2><p>TODO： 是否可以消除</p><h2 id="十、网络请求是否可以进行中断" tabindex="-1">十、网络请求是否可以进行中断 <a class="header-anchor" href="#十、网络请求是否可以进行中断" aria-label="Permalink to &quot;十、网络请求是否可以进行中断&quot;">​</a></h2><p>TODO: Promise 是否可以中断 TODO：AbortController 方法能否用于网络请求的中断</p>`,66)]))}const E=n(e,[["render",o]]);export{u as __pageData,E as default};
