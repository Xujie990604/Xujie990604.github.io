import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"观察者 && 发布订阅模式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/设计模式/观察者和发布订阅模式.md","filePath":"docs/设计模式/观察者和发布订阅模式.md","lastUpdated":1734874907000}'),e={name:"docs/设计模式/观察者和发布订阅模式.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="观察者-发布订阅模式" tabindex="-1">观察者 &amp;&amp; 发布订阅模式 <a class="header-anchor" href="#观察者-发布订阅模式" aria-label="Permalink to &quot;观察者 &amp;&amp; 发布订阅模式&quot;">​</a></h1><h2 id="一、观察者模式" tabindex="-1">一、观察者模式 <a class="header-anchor" href="#一、观察者模式" aria-label="Permalink to &quot;一、观察者模式&quot;">​</a></h2><ul><li>观察者模式定义对象中一种一对多的依赖关系，当一个对象的状态发生变化时。所有依赖于它的对象都将得到通知。</li></ul><ol><li>被观察者: 发布通知。发布者拥有缓存列表，用于存放订阅者信息</li><li>观察者: 需要去订阅通知</li></ol><h3 id="_1-1-售楼处的例子" tabindex="-1">1.1 售楼处的例子 <a class="header-anchor" href="#_1-1-售楼处的例子" aria-label="Permalink to &quot;1.1 售楼处的例子&quot;">​</a></h3><ul><li>一个简单的观察者模式代码实现</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义售楼处</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> salesOffices</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 缓存列表，存放观察者的回调函数</span></span>
<span class="line"><span style="color:#24292E;">  clientList: [],</span></span>
<span class="line"><span style="color:#6A737D;">  // 增加观察者</span></span>
<span class="line"><span style="color:#6F42C1;">  listen</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 观察的消息添加进缓存列表</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.clientList.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(fn);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 发布消息</span></span>
<span class="line"><span style="color:#6F42C1;">  trigger</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">, fn; (fn </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.clientList[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">]); ) {</span></span>
<span class="line"><span style="color:#6A737D;">      // arguments是发布消息时带上的参数</span></span>
<span class="line"><span style="color:#24292E;">      fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 顾客订阅通知</span></span>
<span class="line"><span style="color:#24292E;">salesOffices.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">price</span><span style="color:#24292E;">, </span><span style="color:#E36209;">squareMeter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;价格= &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> price);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;squareMeter= &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> squareMeter);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 售楼处发布通知</span></span>
<span class="line"><span style="color:#24292E;">salesOffices.</span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">104</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">118</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="二、发布-订阅模式" tabindex="-1">二、发布-订阅模式 <a class="header-anchor" href="#二、发布-订阅模式" aria-label="Permalink to &quot;二、发布-订阅模式&quot;">​</a></h2><ul><li>发布订阅是一种消息范式，消息的发送者不会将消息直接发给特定的接收者。而是将消息发送给中介者</li><li>发布订阅模式中，组件是松耦合的</li></ul><ol><li>发布者: 发布通知</li><li>订阅者: 需要去订阅通知</li><li>中介者：发布者把消息统一发送给中介者，中介者再将消息转发给所有订阅者(中介者负责维护发布、订阅的关系。订阅者不必关心会有几个发布者，发布者也不用关注需要将消息发给谁)</li></ol><h2 id="三、js-事件模型" tabindex="-1">三、JS 事件模型 <a class="header-anchor" href="#三、js-事件模型" aria-label="Permalink to &quot;三、JS 事件模型&quot;">​</a></h2><ul><li>在 JavaScript 中，我们一般用事件模型来代替传统的发布-订阅模式</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">  &quot;click&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6F42C1;">    alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#005CC5;">  false</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">  &quot;click&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">  function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#6F42C1;">    alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#005CC5;">  false</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 模拟用户点击</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,13)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
