import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"深拷贝和浅拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/知识块整理/深拷贝浅拷贝.md","filePath":"docs/JavaScript/知识块整理/深拷贝浅拷贝.md","lastUpdated":1712646874000}'),e={name:"docs/JavaScript/知识块整理/深拷贝浅拷贝.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="深拷贝和浅拷贝" tabindex="-1">深拷贝和浅拷贝 <a class="header-anchor" href="#深拷贝和浅拷贝" aria-label="Permalink to &quot;深拷贝和浅拷贝&quot;">​</a></h1><h2 id="浅拷贝方法" tabindex="-1">浅拷贝方法 <a class="header-anchor" href="#浅拷贝方法" aria-label="Permalink to &quot;浅拷贝方法&quot;">​</a></h2><ul><li>浅拷贝就是拷贝一层,引用类型的深层次还是共享内存地址</li><li>Object.assign() 方法</li><li>[...arr] 扩展运算符</li><li>Array.slice()</li></ul><h2 id="深拷贝方法" tabindex="-1">深拷贝方法 <a class="header-anchor" href="#深拷贝方法" aria-label="Permalink to &quot;深拷贝方法&quot;">​</a></h2><h3 id="使用第三方库" tabindex="-1">使用第三方库 <a class="header-anchor" href="#使用第三方库" aria-label="Permalink to &quot;使用第三方库&quot;">​</a></h3><ul><li>lodash.clonedeep</li></ul><h3 id="手写递归方法" tabindex="-1">手写递归方法 <a class="header-anchor" href="#手写递归方法" aria-label="Permalink to &quot;手写递归方法&quot;">​</a></h3><ol><li>判断是不是原始值(如果是原始值就直接进行赋值 target[prop] = origin[prop])</li><li>判断是不是引用值(如果是引用值接着判断是数组还是对象)(然后建立对应的数组和对象)(然后把新建立的数组或者对象递归的调用)</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> deepClone</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">origin</span><span style="color:#24292E;">, </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    tostr </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString</span></span>
<span class="line"><span style="color:#24292E;">    arrStr </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;[object Array]&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  //  &lt;!-- for in 会遍历对象上的以及原型上的属性 --&gt;</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> prop </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> origin) {</span></span>
<span class="line"><span style="color:#6A737D;">    // origin.hasOwnProperty(prop) 如果 prop 属性在 origin 对象上而不是原型中，则会返回 true</span></span>
<span class="line"><span style="color:#6A737D;">    // for in 和 hasOwnProperty 组合使用用来获取对象上的属性(不包含原型上面的)</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;">(origin.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(prop)) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 因为null, arr[], obj{} 这三种数据的 typeof 都是 &quot;object&quot;，所以在这一步需要排除一下 null 的影响 </span></span>
<span class="line"><span style="color:#6A737D;">            // 如果当前属性是引用值，进一步判断是数组还是对象。</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;">(origin[prop] </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &quot;null&quot;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;">(origin[prop]) </span><span style="color:#D73A49;">==</span><span style="color:#032F62;"> &quot;object&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">                if</span><span style="color:#24292E;">(tostr.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(origin[prop]) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> arrStr) {</span></span>
<span class="line"><span style="color:#6A737D;">                    // 如果是数组则建立新的数组</span></span>
<span class="line"><span style="color:#24292E;">                    target[prop] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                    // 如果是对象则建立新的对象</span></span>
<span class="line"><span style="color:#24292E;">                    target[prop] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#6A737D;">                // 建立完数组或者对象之后，递归的调用本函数</span></span>
<span class="line"><span style="color:#6F42C1;">                deepClone</span><span style="color:#24292E;">(origin[prop], target[prop]);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#6A737D;">            // 如果是基本数据类型直接赋值</span></span>
<span class="line"><span style="color:#D73A49;">            else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                target[prop] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> origin[prop];</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>`,9)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
