import{_ as e,c as a,o as t,ag as o}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"postcss 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"docs/前端工程化/PostCSS/postcss.md","filePath":"docs/前端工程化/PostCSS/postcss.md","lastUpdated":null}'),l={name:"docs/前端工程化/PostCSS/postcss.md"};function r(c,s,i,n,d,p){return t(),a("div",null,s[0]||(s[0]=[o('<h1 id="postcss-介绍" tabindex="-1">postcss 介绍 <a class="header-anchor" href="#postcss-介绍" aria-label="Permalink to &quot;postcss 介绍&quot;">​</a></h1><ul><li>postcss 是一个用 javaScript 工具和插件转换 CSS 代码的工具</li><li>postcss 是一个<code>平台</code>, 和 webpack 是一个概念，postcss 本身没有什么功能，只是用 JS 来处理 CSS。postcss 的<code>插件</code>才是实现功能的主体</li><li>scss 被称为<code>预处理器</code>，是因它的工作环节在 CSS 之前，scss 文件最终会被转化为 css 语法</li><li>postcss 被称为<code>后处理器</code>，是因为它的<code>部分</code>工作环节是在 css 之后，会将 css 语法进行转化(eg： 添加浏览器后缀，编译高级语法到低级语法，px 转成 rem)</li></ul><h2 id="二、功能" tabindex="-1">二、功能 <a class="header-anchor" href="#二、功能" aria-label="Permalink to &quot;二、功能&quot;">​</a></h2><h3 id="_2-1-autoprefixer" tabindex="-1">2.1 Autoprefixer <a class="header-anchor" href="#_2-1-autoprefixer" aria-label="Permalink to &quot;2.1 Autoprefixer&quot;">​</a></h3><ul><li>根据设置的浏览器支持度，和 caniuse 网站的信息，自动给 CSS 规则添加前缀</li></ul><h3 id="_2-2-postcss-preset-env" tabindex="-1">2.2 PostCSS Preset Env <a class="header-anchor" href="#_2-2-postcss-preset-env" aria-label="Permalink to &quot;2.2 PostCSS Preset Env&quot;">​</a></h3><ul><li>将 <code>现代</code> CSS 语法转化为浏览器支持程度高的语法</li></ul><h3 id="_2-3-pxtorem" tabindex="-1">2.3 pxtorem <a class="header-anchor" href="#_2-3-pxtorem" aria-label="Permalink to &quot;2.3 pxtorem&quot;">​</a></h3><ul><li>将 px 转化为 rem</li></ul><h3 id="_2-4-cssnano" tabindex="-1">2.4 cssnano <a class="header-anchor" href="#_2-4-cssnano" aria-label="Permalink to &quot;2.4 cssnano&quot;">​</a></h3><ul><li>压缩 css 代码</li></ul><h3 id="_2-5-stylelint" tabindex="-1">2.5 stylelint <a class="header-anchor" href="#_2-5-stylelint" aria-label="Permalink to &quot;2.5 stylelint&quot;">​</a></h3><ul><li>检测 CSS 代码， 格式化 css 代码</li></ul>',13)]))}const _=e(l,[["render",r]]);export{u as __pageData,_ as default};
