import{_ as o,c as r,o as l,j as e,a as t}from"./chunks/framework.BDwTZuFy.js";const P=JSON.parse('{"title":"AOP 切面编程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Nest/框架哲学/AOP切面编程.md","filePath":"docs/Nest/框架哲学/AOP切面编程.md","lastUpdated":1741070174000}'),n={name:"docs/Nest/框架哲学/AOP切面编程.md"};function s(c,a,d,i,p,_){return l(),r("div",null,a[0]||(a[0]=[e("h1",{id:"aop-切面编程",tabindex:"-1"},[t("AOP 切面编程 "),e("a",{class:"header-anchor",href:"#aop-切面编程","aria-label":'Permalink to "AOP 切面编程"'},"​")],-1),e("ul",null,[e("li",null,[t("一个请求会经过 controller、service、repository 三个地方，如果想要调用链路中加入一些通用的逻辑(日志记录，权限控制，异常处理)。直接加在 controller 中可以实现，但是不优雅，因为这些通用的逻辑会侵入业务层。在调用 controller 之前和之后通过的加入逻辑，这个横向的扩展点就叫切面，这种透明的加入一些切面逻辑的编程方式叫做 "),e("code",null,"AOP 面向切面编程")]),e("li",null,[t("执行顺序："),e("code",null,"请求 -> middleware(中间件) -> Guard(守卫) -> (路由前)Inteceptor(拦截器) -> Pipe(管道) -> 路由处理程序 -> (路由后)Inteceptor(拦截器) -> ExceptionFilter(异常过滤)(如果有异常) -> 响应")])],-1)]))}const m=o(n,[["render",s]]);export{P as __pageData,m as default};
