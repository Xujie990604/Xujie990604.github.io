import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"对象","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/对象.md","filePath":"docs/JavaScript/对象&原型/对象.md","lastUpdated":1735478813000}'),p={name:"docs/JavaScript/对象&原型/对象.md"};function o(r,s,t,c,i,b){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h1><ul><li>对象是一组属性的<code>无序集合</code>，对象是一种数据结构(映射表)</li></ul><ol><li>增： 直接用赋值语句进行增加</li><li>查： 直接访问属性(对象未定义的属性会输出 undefined)</li><li>删： delete x.name 进行删除</li><li>改： 直接用赋值语句进行修改</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 对象的属性可以是一个可计算的值, [] 中可以放置表达式</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> param</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;name&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [param </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;foo&quot;</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// namefoo: &#39;bar&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj[</span><span style="color:#032F62;">&quot;first name&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;foo&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 方括号的另一个特点：一些属性名在使用 \`.\` 操作符时会报错，[] 则不会</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="一、对象的创建方法" tabindex="-1">一、对象的创建方法 <a class="header-anchor" href="#一、对象的创建方法" aria-label="Permalink to &quot;一、对象的创建方法&quot;">​</a></h2><ol><li><code>var obj = {}</code> 对象字面量创建方式</li><li>构造函数 <ol><li>系统自带的构造函数 <code>var obj = new Object();</code></li><li>自定义构造函数</li></ol></li></ol><h3 id="_1-1-构造函数" tabindex="-1">1.1 构造函数 <a class="header-anchor" href="#_1-1-构造函数" aria-label="Permalink to &quot;1.1 构造函数&quot;">​</a></h3><ul><li>构造函数的内部原理(三段论)浅层次理解</li></ul><ol><li>在函数体的最前面<code>隐式</code>的加上 this = {}</li><li>执行 this.xxx = xxx;</li><li>在函数体的末尾<code>隐式</code>的返回 this</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 构造函数在命名时严格符合大驼峰式命名规则</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">(</span><span style="color:#E36209;">height</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 1. var this = {}  this 是一个空对象</span></span>
<span class="line"><span style="color:#6A737D;">  // 2. 添加属性</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;foo&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.health </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">run</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.health</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#6A737D;">  // 3. return this  将 this 返回出去</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> person1 </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>如果构造函数内部显式的 return 一个对象， 将不会返回默认的 this 对象，而是返回函数显式 return 的对象</li><li>如果构造函数内部显式的 return 一个非对象数值， 仍会返回默认的 this 对象，构造函数内显式返回的<code>非对象数值会被抛弃</code>。</li></ul><h2 id="二、对象属性的类型" tabindex="-1">二、对象属性的类型 <a class="header-anchor" href="#二、对象属性的类型" aria-label="Permalink to &quot;二、对象属性的类型&quot;">​</a></h2><h3 id="_2-1-数据属性" tabindex="-1">2.1 数据属性 <a class="header-anchor" href="#_2-1-数据属性" aria-label="Permalink to &quot;2.1 数据属性&quot;">​</a></h3><ul><li>通过 Object.defineProperty() 方法来指定某个对象的某个属性的修改</li></ul><h4 id="_1-数据属性的特性" tabindex="-1">(1) 数据属性的特性 <a class="header-anchor" href="#_1-数据属性的特性" aria-label="Permalink to &quot;(1) 数据属性的特性&quot;">​</a></h4><ol><li>[[configurable]] 表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它修改为访问器属性。默认值为 true</li><li>[[Enumberable]] 表示对象的属性是否为可枚举的(可枚举的属性可以用 for in 遍历)，默认为 true</li><li>[[Writeable]] 表示属性的值是否可以被修改，默认值为 true</li><li>[[Value]] 代表属性实际的值，默认值为 undefined(访问对象不存在的属性值为 undefined 的原因)</li></ol><h4 id="_2-object-defineproperty" tabindex="-1">(2) Object.defineProperty() <a class="header-anchor" href="#_2-object-defineproperty" aria-label="Permalink to &quot;(2) Object.defineProperty()&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义数据属性，四个特性都使用默认值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 Object.defineProperty 来定义数据属性， 特性值可以自己指定</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(obj, </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  configurable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  writable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  value: </span><span style="color:#032F62;">&quot;20&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2-2-访问器属性" tabindex="-1">2.2 访问器属性 <a class="header-anchor" href="#_2-2-访问器属性" aria-label="Permalink to &quot;2.2 访问器属性&quot;">​</a></h3><ul><li>访问器属性不能直接定义，只能通过 Object.defineProperty() 方法来定义</li><li>访问器属性<code>不包含数据值</code></li></ul><h4 id="_1-访问器属性的特性" tabindex="-1">(1) 访问器属性的特性 <a class="header-anchor" href="#_1-访问器属性的特性" aria-label="Permalink to &quot;(1) 访问器属性的特性&quot;">​</a></h4><ol><li>[[configurable]] 表示属性是否可以通过 delete 被删除并重新定义，是否可以修改它的特性，以及是否可以把它修改为访问器属性。默认值为 true</li><li>[[Enumberable]] 表示对象的属性是否为可枚举的(可枚举的属性可以用 for in 遍历)，默认为 true</li><li>[[Get]] 获取函数，默认值为 undefined</li><li>[[Set]] 设置函数，默认值为 undefined</li></ol><h4 id="_2-object-defineproperty-方法" tabindex="-1">(2) Object.defineProperty()方法 <a class="header-anchor" href="#_2-object-defineproperty-方法" aria-label="Permalink to &quot;(2) Object.defineProperty()方法&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义一个对象，包含伪私有成员year_和公共成员edition</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#005CC5;">2017</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  edition: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(book, </span><span style="color:#032F62;">&quot;year&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#6F42C1;">  get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.year_;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (newValue </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 2017</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.year_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue;</span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.edition </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> newValue </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 2017</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">book.year </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2018</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">book; </span><span style="color:#6A737D;">// { name: 2017, edition: 2, year_: 2018 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="三、object-基类上的属性" tabindex="-1">三、Object() 基类上的属性 <a class="header-anchor" href="#三、object-基类上的属性" aria-label="Permalink to &quot;三、Object() 基类上的属性&quot;">​</a></h2><ol><li>constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object()函数。</li><li>hasOwnProperty（propertyName）：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(&quot;name&quot;)）或符号。</li><li>isPrototypeOf（object）：用于判断当前对象是否为另一个对象的原型。</li><li>propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。</li><li>toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。</li><li>toString()：返回对象的字符串表示。</li><li>valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。</li></ol>`,26)]))}const d=n(p,[["render",o]]);export{u as __pageData,d as default};
