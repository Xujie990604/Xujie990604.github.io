import{_ as a,c as n,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"Vue 中的生命周期问题","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vue/Vue官方文档解读/生命周期.md","filePath":"docs/Vue/Vue官方文档解读/生命周期.md","lastUpdated":1734874907000}'),p={name:"docs/Vue/Vue官方文档解读/生命周期.md"};function o(r,s,t,c,i,u){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="vue-中的生命周期问题" tabindex="-1">Vue 中的生命周期问题 <a class="header-anchor" href="#vue-中的生命周期问题" aria-label="Permalink to &quot;Vue 中的生命周期问题&quot;">​</a></h1><ul><li>允许开发者在特定的阶段运行自己的代码</li></ul><h2 id="一、从源码角度来分析-vue-的生命周期" tabindex="-1">一、从源码角度来分析 Vue 的生命周期 <a class="header-anchor" href="#一、从源码角度来分析-vue-的生命周期" aria-label="Permalink to &quot;一、从源码角度来分析 Vue 的生命周期&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Vue</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> xxx</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Vue</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>分为四个阶段：初始化阶段、模板编译阶段、挂载阶段、卸载阶段</li></ul><h3 id="_1-1-初始化阶段" tabindex="-1">1.1 初始化阶段 <a class="header-anchor" href="#_1-1-初始化阶段" aria-label="Permalink to &quot;1.1 初始化阶段&quot;">​</a></h3><ul><li>new Vue() 到 created 之间的阶段叫作初始化阶段。这个阶段的主要目的是在 Vue.js 实例上初始化一些属性、事件以及响应式数据，如 props、methods、data、computed、watch、provide 和 inject 等。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_init</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">  initLifecycle</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// 初始化实例属性 以 $ 开头的属性是提供给用户使用的外部属性，以 _ 开头的属性是提供给内部使用的内部属性</span></span>
<span class="line"><span style="color:#6F42C1;">  initEvents</span><span style="color:#24292E;">(vm)  </span><span style="color:#6A737D;">// 初始化事件(事件而不是方法)</span></span>
<span class="line"><span style="color:#6F42C1;">  initRender</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">  callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;beforeCreate&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 钩子函数被当做回调函数传进来，在 new Vue() 的不同阶段被执行</span></span>
<span class="line"><span style="color:#6F42C1;">  initInjections</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// 在 data/props 前初始化inject</span></span>
<span class="line"><span style="color:#6F42C1;">  initState</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// 初始化状态(props, methods, data, computed, watch)</span></span>
<span class="line"><span style="color:#6F42C1;">  initProvide</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// 在data/props后初始化provide</span></span>
<span class="line"><span style="color:#6F42C1;">  callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;created&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果用户在实例化 Vue.js 时传递了 el 选项，则自动开启模板编译阶段与挂载阶段</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果没有传递 el 选项，则不进入下一个生命周期流程</span></span>
<span class="line"><span style="color:#6A737D;">  // 用户需要执行 vm.$mount 方法，手动开启模板编译阶段与挂载阶段</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#24292E;">    vm.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">(vm.$options.el)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 一、initLifecycle 初始化实例属性</span></span>
<span class="line"><span style="color:#24292E;">  以 $ 开头的属性是提供给用户使用的外部属性，以 _ 开头的属性是提供给内部使用的内部属性</span></span>
<span class="line"><span style="color:#24292E;">  vm.$parent</span></span>
<span class="line"><span style="color:#24292E;">  vm.$root</span></span>
<span class="line"><span style="color:#24292E;">  vm.$children</span></span>
<span class="line"><span style="color:#24292E;">  vm.$refs</span></span>
<span class="line"><span style="color:#24292E;">  vm._watcher</span></span>
<span class="line"><span style="color:#24292E;">  vm._isDestroyed</span></span>
<span class="line"><span style="color:#24292E;">  vm._isBeingDestroyed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 二、initEvents 初始化事件</span></span>
<span class="line"><span style="color:#24292E;">  初始化事件是指将父组件在模板中使用的 v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">on </span><span style="color:#6F42C1;">注册的事件</span><span style="color:#24292E;">(事件只是定义在组件上的事件，不会解析浏览器事件)添加到子组件的事件系统（Vue.js的事件系统）中。</span></span>
<span class="line"><span style="color:#24292E;">  在这个阶段并不会处理模板中的浏览器事件，只有在渲染阶段才会处理模板中的浏览器事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 三、initInjections 初始化 inject(在 initState 之前获取 inject 数据，是为了能够在 data/props 中使用 inject 得到的数据)</span></span>
<span class="line"><span style="color:#6A737D;">  // 四、initProvide 初始化 provide</span></span>
<span class="line"><span style="color:#24292E;">  provide 和 inject 主要为高阶插件</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">组件库提供用例，并不推荐直接用于程序代码中</span></span>
<span class="line"><span style="color:#24292E;">  可用的注入内容指的是祖先组件通过 provide 注入了内容，子孙组件可以通过 inject 获取祖先组件注入的内容。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 五、initState 初始化状态</span></span>
<span class="line"><span style="color:#24292E;">  初始化的顺序为 </span><span style="color:#6F42C1;">props</span><span style="color:#24292E;"> (放在前面保证data，methods, computed中可以使用 props), methods, data, computed, </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(放在最后保证 watcher 可以监听前面的数据)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">  1.</span><span style="color:#24292E;"> props</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  调用 camelize 函数将 props 名称驼峰化，即可以将 a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b 这样的名称转换成 aB。</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">child</span><span style="color:#6F42C1;"> user-name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">child</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">  props</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;userName&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">  2.</span><span style="color:#24292E;"> methods</span></span>
<span class="line"><span style="color:#24292E;">  初始化methods时，</span><span style="color:#6F42C1;">只需要循环选项中的methods对象</span><span style="color:#24292E;">(会判断一下不能和 props 同名)，</span><span style="color:#6F42C1;">并将每个属性依次挂载到vm上即可</span><span style="color:#24292E;">(通过 vm[x] 来访问定义的 x 方法)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">  3.</span><span style="color:#24292E;"> data</span></span>
<span class="line"><span style="color:#24292E;">  data 中的数据最终会保存到 vm._data 中。然后在 vm 上设置一个代理，使得通过 vm.x 可以访问到 vm._data 中的 x 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">  4.</span><span style="color:#24292E;"> computed</span></span>
<span class="line"><span style="color:#24292E;">  计算属性通过 watcher 来实现缓存和收集依赖的功能</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">  5.</span><span style="color:#24292E;"> watcher</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h3 id="_1-2-模板编译阶段" tabindex="-1">1.2 模板编译阶段 <a class="header-anchor" href="#_1-2-模板编译阶段" aria-label="Permalink to &quot;1.2 模板编译阶段&quot;">​</a></h3><ul><li>created 钩子函数与 beforeMount 钩子函数之间的阶段是模板编译阶段。这个阶段的主要目的是将模板编译为渲染函数，只存在于完整版中。如果在只包含运行时的构建版本中执行 new Vue()，则不会存在这个阶段</li></ul><h3 id="_1-3-挂载阶段" tabindex="-1">1.3 挂载阶段 <a class="header-anchor" href="#_1-3-挂载阶段" aria-label="Permalink to &quot;1.3 挂载阶段&quot;">​</a></h3><ul><li>beforeMount 钩子函数到 mounted 钩子函数之间是挂载阶段。在这个阶段，Vue.js 会将其实例挂载到 DOM 元素上，通俗地讲，就是将模板渲染到指定的 DOM 元素中。</li><li>在挂载的过程中，Vue.js 会开启 Watcher 来持续追踪依赖的变化。在已挂载状态下，Vue.js 仍会持续追踪状态的变化。当数据(状态)发生变化时，Watcher 会通知虚拟 DOM 重新渲染视图，并且会在渲染视图前触发 beforeUpdate 钩子函数，渲染完毕后触发 updated 钩子函数。</li><li>通常，在运行时的大部分时间下，Vue.js 处于已挂载状态，每当状态发生变化时，Vue.js 都会通知组件使用虚拟 DOM 重新渲染，也就是我们常说的响应式。这个状态会持续到组件被销毁。</li></ul><h3 id="_1-4-卸载阶段" tabindex="-1">1.4 卸载阶段 <a class="header-anchor" href="#_1-4-卸载阶段" aria-label="Permalink to &quot;1.4 卸载阶段&quot;">​</a></h3><ul><li>应用调用 vm.$destroy 方法后，Vue.js 的生命周期会进入卸载阶段。在这个阶段，Vue.js 会将自身从父组件中删除，取消实例上所有依赖的追踪并且移除所有的事件监听器。</li></ul><h2 id="二、生命周期的钩子" tabindex="-1">二、生命周期的钩子 <a class="header-anchor" href="#二、生命周期的钩子" aria-label="Permalink to &quot;二、生命周期的钩子&quot;">​</a></h2><ul><li>生命周期函数不能使用箭头函数，因为箭头函数没有自己的 this。</li></ul><h3 id="_2-1-每个钩子函数的阶段" tabindex="-1">2.1 每个钩子函数的阶段 <a class="header-anchor" href="#_2-1-每个钩子函数的阶段" aria-label="Permalink to &quot;2.1 每个钩子函数的阶段&quot;">​</a></h3><ol><li>beforeCreate() 在 Vue 实例初始化之后，数据观测和事件配置(props、methods、data 声明和响应式、computed、watch)之前(在 beforeCreated 中使用 this.xxx 进行赋值，如果在 data 中定义了同名变量的话，beforeCreated 会被 data 中的数据覆盖)</li><li>created 在 Vue 实例完成后立即被调用 <ol><li>在这一步，实例已完成以下的配置，数据观测(data observer)，属性和方法的运算，watch/event 事件回调</li><li>然而，挂载阶段还没有开始，$el 属性目前不可见 所以此时如果直接去操作 dom 节点，会找不到相关的元素</li></ol></li><li>beforeMount() 在 Vue 实例被挂载到 DOM 树之前被调用，现在 Vue 的 模板语法已经被渲染成了 render 函数</li><li>mounted() el 被新创建的 vm.$el 替换，挂载成功。(DOM 节点被新的 Vue 的节点所替换)</li><li>beforeUpdate() 在数据更新之前被调用</li><li>updated() 两次被调动，分别是 DOM 首次渲染和由于数据的变化导致的 DOM 更新的时候。</li><li>在 beforeDestroy() 钩子函数中手动移出通过 addEventListener 添加的事件</li></ol><h3 id="_2-2-每个阶段的具体应用" tabindex="-1">2.2 每个阶段的具体应用 <a class="header-anchor" href="#_2-2-每个阶段的具体应用" aria-label="Permalink to &quot;2.2 每个阶段的具体应用&quot;">​</a></h3><ul><li>created() 阶段挂载还没有开始，模板没有渲染成 html，所以这一步主要用来初始化数据。</li><li>mounted() 一般用来向后端发起请求，拿到数据后进行业务的处理，一般进行 DOM 操作。</li><li>updated() 不会保证所有的子组件都被一起重绘，如果想要在整个视图都重绘完毕的话，可以在 update 中使用 vm.$nextTick()</li><li>this.$nextTick() 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。</li></ul><h3 id="_2-3-一些数据的创建顺序" tabindex="-1">2.3 一些数据的创建顺序 <a class="header-anchor" href="#_2-3-一些数据的创建顺序" aria-label="Permalink to &quot;2.3 一些数据的创建顺序&quot;">​</a></h3><ul><li>在 data 中可以使用 props, methods，不能使用 data 本身的变量</li><li>props 中不可以使用 methods 和 data, 不能使用 props 本身的变量</li><li>methods 中可以使用 data 和 props, 可以使用 methods 本身中的方法(data 在 methods 之后定义，但是却可以在 methods 中使用 data 是因为 JS 在声明函数的时候并不会执行函数内部的语句，即使函数内有暂时未定义的变量也不会报错。只要保证在 methods 真正执行时，data 是存在的就可以了)</li><li>因为图片的加载很慢而且是异步加载，所以很多情况下需要注意图片是否加载完毕。在 Vue 中图片加载完毕会触发 load 函数</li></ul><h2 id="三、父子组件的创建和挂载" tabindex="-1">三、父子组件的创建和挂载 <a class="header-anchor" href="#三、父子组件的创建和挂载" aria-label="Permalink to &quot;三、父子组件的创建和挂载&quot;">​</a></h2><ul><li>Vue 的 created 和 mounted 执行顺序，created 自上而下，mounted 自下而上</li><li>创建时先创建父组件</li><li>挂载时先挂载子组件</li><li>带来的问题就是，如果子组件想要使用父组件中的异步数据，如果这个数据是在 create 中请求的，那么子组件能够得到数据，！！！但是如果数据是在父组件的 mounted 中请求的。那么子组件不能正确的得到数据。</li><li><img src="https://segmentfault.com/img/bVbePUv?w=302&amp;h=298," alt="图片" title="生命周期函数"></li></ul><h2 id="_3-1-在哪里才能获取到带有图片的组件的正确的-offsettop" tabindex="-1">3.1 在哪里才能获取到带有图片的组件的正确的 offsetTop <a class="header-anchor" href="#_3-1-在哪里才能获取到带有图片的组件的正确的-offsettop" aria-label="Permalink to &quot;3.1 在哪里才能获取到带有图片的组件的正确的 offsetTop&quot;">​</a></h2><ol><li>created 不行，根本不能获取到元素</li><li>mounted 也不行，元素挂载了，但是异步的数据不一定获取到</li><li>获取到数据的回调里面也不行，尽管数据获取到了，但是 DOM 还没有渲染完</li><li>$nextTick 也不行，尽管 DOM 更新了，但是由于图片是异步的，图片的高度还没有被计算在内</li><li>只有在图片加载完成后的 load 事件内，获取的高度才是正确的。</li></ol><h2 id="四、nexttick-原理" tabindex="-1">四、nextTick()原理 <a class="header-anchor" href="#四、nexttick-原理" aria-label="Permalink to &quot;四、nextTick()原理&quot;">​</a></h2><ul><li>nextTick() 将回调函数延迟到下次 DOM 更新周期之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。</li><li>Vue 在修改状态之后，DOM 不会立刻同步更新(采用异步更新的方式)， 而是等 <code>同一事件循环</code> (同一事件循环指的是在一个宏任务中) 中的所有数据变化完成之后。在统一进行 DOM 更新。</li><li>在 Vue.js 中，当状态发生变化时，watcher(这个 watcher 是组件级别的 watcher ) 会得到通知。watcher 会通知组件进行更新(在 Vue.js 2.0 之后 watcher 的精度精确到组件)。组件收到 watcher 的通知之后会进行更新。但是组件并不知道具体要更新哪个部分。需要使用基于最新状态生成的 vNode 和 旧的 oldVNode 进行对比(使用 diff 算法对比差异)。最终 DOM 进行更新的时候，只需要更新前后的差异部分(达到减少 DOM 操作的目的)。</li><li>Vue 采用异步更新的策略来优化上面这个过程。也就是在同一个宏任务中，状态发生变化会立刻通知对应的 watcher ，但是 watcher 并不会立刻进行接下来通知组件更新的步骤。而是会把一个宏任务中涉及到的所有 watcher 收集到一个队列中(在收集 watcher 前会有一个判断的过程，如果当前队列中已经存在相同的 watcher 则不会重复添加相同的 watcher)。等到一整个宏任务执行完之后，将队列中收集的 watcher 当做一个微任务抛出去。</li><li>nextTick() 本质就是一个微任务， Vue 收集 watcher 放到一个队列中，这个队列也会被包在一个微任务中抛出去。</li><li>this.$nextTick() 可以用作局部的数据更新后 DOM 更新结束后的操作，全局的可以用 updated 生命周期函数</li><li>异步渲染最终目的是，将多次数据变化所引起的响应变化收集后合并成一次页面渲染，从而更合理的利用机器资源，提升性能与用户体验。</li></ul><h3 id="_4-1-用途" tabindex="-1">4.1 用途 <a class="header-anchor" href="#_4-1-用途" aria-label="Permalink to &quot;4.1 用途&quot;">​</a></h3><ul><li>updated() 不会保证所有的子组件都被一起重绘，如果想要在整个视图都重绘完毕的话，可以在 update 中使用 nextTick</li><li>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 中使用 nextTick</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 修改input的v-show状态之后，直接拿取input的$el</span></span>
<span class="line"><span style="color:#6A737D;">// 这样是拿不到的。 Vue的视图更新是个异步的过程， 直接拿取的话，这两条语句处于同一个事件循环中，Vue还没有视图更新</span></span>
<span class="line"><span style="color:#6A737D;">// 如果在nextTick中拿就能拿到， 因为nextTick会在Vue的异视图更新后执行</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.showInput </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//修改 v-show</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">focus</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,31)]))}const m=a(p,[["render",o]]);export{b as __pageData,m as default};
