import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"生成器","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/独立知识点/生成器.md","filePath":"docs/JavaScript/独立知识点/生成器.md","lastUpdated":1712646874000}'),e={name:"docs/JavaScript/独立知识点/生成器.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h1><ul><li>生成器是一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力</li></ul><h2 id="一、生成器函数" tabindex="-1">一、生成器函数 <a class="header-anchor" href="#一、生成器函数" aria-label="Permalink to &quot;一、生成器函数&quot;">​</a></h2><ul><li>生成器的形式是一个函数</li><li>箭头函数不能作为生成器</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 生成器函数声明</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;">＊ </span><span style="color:#6F42C1;">generatorFn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成器函数表达式</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> generatorFn </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">＊ () {}</span></span>
<span class="line"><span style="color:#6A737D;">// 作为对象字面量方法的生成器函数</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ＊ </span><span style="color:#6F42C1;">generatorFn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 作为类实例方法的生成器函数</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Foo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ＊ </span><span style="color:#6F42C1;">generatorFn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 作为类静态方法的生成器函数</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Bar</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  static</span><span style="color:#24292E;"> ＊ </span><span style="color:#6F42C1;">generatorFn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;">＊ </span><span style="color:#6F42C1;">generatorFn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> g</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> generatorFn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 生成器函数的返回值是一个\`生成器对象\`</span></span>
<span class="line"><span style="color:#6F42C1;">g</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// \`生成器对象\` 实现了 Iterator 接口，因此具有 next 方法</span></span>
<span class="line"><span style="color:#6A737D;">// next 方法的返回值： done 属性  value 属性(可使用 return 指定)</span></span>
<span class="line"><span style="color:#6A737D;">// 生成器函数只会在初次调用 next 方法后开始执行</span></span>
<span class="line"><span style="color:#24292E;">g.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// { value: undefined, done: true }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二、yield" tabindex="-1">二、yield <a class="header-anchor" href="#二、yield" aria-label="Permalink to &quot;二、yield&quot;">​</a></h2><ul><li>生成器函数遇到 yield 关键字会停止执行，函数作用域的状态会被保留。停止的生成器函数只能通过 next 方法来重新调用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;">＊ </span><span style="color:#6F42C1;">generatorFn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  yield</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  yield</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#032F62;"> &#39;baz&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> generatorObject </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> generatorFn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">generatorObject.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// { done: false, value: &#39;foo&#39; }</span></span>
<span class="line"><span style="color:#24292E;">generatorObject.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// { done: false, value: &#39;bar&#39; }</span></span>
<span class="line"><span style="color:#24292E;">generatorObject.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// { done: true, value: &#39;baz&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>使用 * 号增强 yield， 让它能够迭代一个可迭代对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#6F42C1;"> generatorFn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  yield*</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> generatorObject </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> generatorFn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// yield*实际上只是将一个可迭代对象序列化为一连串可以单独产出的值</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> x</span><span style="color:#D73A49;"> of</span><span style="color:#6F42C1;"> generatorFn</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 1 2 3</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,11)]))}const d=n(e,[["render",o]]);export{u as __pageData,d as default};
