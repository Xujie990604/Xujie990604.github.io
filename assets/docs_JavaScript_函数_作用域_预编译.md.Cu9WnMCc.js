import{_ as e,c as i,o as l,ag as t}from"./chunks/framework.BDwTZuFy.js";const p=JSON.parse('{"title":"预编译","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/函数&作用域/预编译.md","filePath":"docs/JavaScript/函数&作用域/预编译.md","lastUpdated":1735478813000}'),o={name:"docs/JavaScript/函数&作用域/预编译.md"};function r(d,a,n,s,c,h){return l(),i("div",null,a[0]||(a[0]=[t('<h1 id="预编译" tabindex="-1">预编译 <a class="header-anchor" href="#预编译" aria-label="Permalink to &quot;预编译&quot;">​</a></h1><p>当 JS 执行到一段可执行代码时(全局代码，函数代码)就会创建执行上下文，执行上下文中有三个重要的属性</p><ol><li>变量对象: 分为全局变量对象和函数变量对象</li><li>this</li><li>作用域链</li></ol><h2 id="js-执行三部曲" tabindex="-1">JS 执行三部曲 <a class="header-anchor" href="#js-执行三部曲" aria-label="Permalink to &quot;JS 执行三部曲&quot;">​</a></h2><ol><li>语法分析，通篇扫描</li><li>预编译 // 1.函数声明 整体提升 2.变量声明 提升</li><li>解释执行</li></ol><h2 id="预编译-函数-全局" tabindex="-1">预编译: 函数 &amp; 全局 <a class="header-anchor" href="#预编译-函数-全局" aria-label="Permalink to &quot;预编译: 函数 &amp; 全局&quot;">​</a></h2><h3 id="函数内实现预编译-四部曲-预编译发生在函数执行前一刻" tabindex="-1">函数内实现预编译: 四部曲（预编译发生在函数执行前一刻） <a class="header-anchor" href="#函数内实现预编译-四部曲-预编译发生在函数执行前一刻" aria-label="Permalink to &quot;函数内实现预编译: 四部曲（预编译发生在函数执行前一刻）&quot;">​</a></h3><ol><li>创建 AO（执行期上下文）对象</li><li>找形参和变量声明，将变量和形参作为 AO 属性名，值为 undefined。（变量 只有声明提升）</li><li>将形参和实参值统一</li><li>在函数体里面找函数声明(函数声明和函数表达式是完全不同的)，将函数名作为 AO 属性名，值为函数体。（函数声明整体提升）</li></ol><h3 id="全局内实现预编译" tabindex="-1">全局内实现预编译 <a class="header-anchor" href="#全局内实现预编译" aria-label="Permalink to &quot;全局内实现预编译&quot;">​</a></h3><ol><li>创建 GO 对象 <code>GO === window</code></li><li>找变量声明，将变量作为 GO 属性名，值为 undefined。（变量 只有声明提升）</li><li>在函数体里面找函数声明，将函数名作为 GO 属性名，值为函数体。（函数声明整体提升）</li></ol>',10)]))}const u=e(o,[["render",r]]);export{p as __pageData,u as default};
