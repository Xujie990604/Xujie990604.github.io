import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"TS 函数","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS类型/TS函数.md","filePath":"docs/TypeScript/TS类型/TS函数.md","lastUpdated":1722758955000}'),e={name:"docs/TypeScript/TS类型/TS函数.md"};function o(r,s,t,c,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ts-函数" tabindex="-1">TS 函数 <a class="header-anchor" href="#ts-函数" aria-label="Permalink to &quot;TS 函数&quot;">​</a></h1><h2 id="一、函数类型定义" tabindex="-1">一、函数类型定义 <a class="header-anchor" href="#一、函数类型定义" aria-label="Permalink to &quot;一、函数类型定义&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 函数声明(这种方式相当于给函数的参数，返回值单独添加上类型注解)</span></span>
<span class="line"><span style="color:#6A737D;">// TS 能根据 return 语句来判断返回值的类型，因此我们一般省略函数返回值类型</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数表达式(这种方式相当于给一个函数添加上了一个类型注解)</span></span>
<span class="line"><span style="color:#6A737D;">// (a: number, b: number) =&gt; number 这个叫函数类型，必须有返回值类型，没有返回值填写 void</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#6F42C1;"> add</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#E36209;">  x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">  y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数表达式 - 推断类型</span></span>
<span class="line"><span style="color:#6A737D;">// 如果左边指定了类型，typescript 在右边会自动识别出类型，这叫做按上下文归类，是类型推论的一种</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#6F42C1;"> add</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="二、参数" tabindex="-1">二、参数 <a class="header-anchor" href="#二、参数" aria-label="Permalink to &quot;二、参数&quot;">​</a></h2><ul><li>typescript 中每个函数的参数都是必须的，传入函数的参数个数必须和函数期望的参数个数相同。</li></ul><h3 id="_2-1-可选参数" tabindex="-1">2.1 可选参数 <code>？</code> <a class="header-anchor" href="#_2-1-可选参数" aria-label="Permalink to &quot;2.1 可选参数 \`？\`&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 可选参数没有传递的时候是 undefined  </span></span>
<span class="line"><span style="color:#6A737D;">// 可选参数必须在必须参数的后面</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> fullName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">firstname</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lastName</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> firstname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> lastName;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xu&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;jie&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">//xujie</span></span>
<span class="line"><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xu&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//xuundefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_2-2-默认参数" tabindex="-1">2.2 默认参数 <a class="header-anchor" href="#_2-2-默认参数" aria-label="Permalink to &quot;2.2 默认参数&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 当没有传递参数和传递的参数是 undefined 时，使用参数的默认值</span></span>
<span class="line"><span style="color:#6A737D;">// 如果定义的时候带有默认值的参数声明在普通参数的前面，想要使用默认参数的时候。必须在传入参数的时候在前面传入undefined</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> fullName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">firstname</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lastName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;jie&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> firstname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> lastName;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xu&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;han&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//xuhan</span></span>
<span class="line"><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xu&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//xujie</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_2-3-可选参数和默认参数共享函数类型" tabindex="-1">2.3 可选参数和默认参数共享函数类型 <a class="header-anchor" href="#_2-3-可选参数和默认参数共享函数类型" aria-label="Permalink to &quot;2.3 可选参数和默认参数共享函数类型&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 当前定义的函数类型，第二个参数是可选参数(可选参数包含有默认值的参数和可选参数)</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> fullNameType</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// fullName1 函数的第二个参数可选参数，函数类型使用上面的 fullNameType</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#6F42C1;"> fullName1</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> fullNameType</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">firstname</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lastName</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> firstname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> lastName;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  fullName 函数的第二个参数为有默认值的参数，函数类型也可以使用上面的 fullNameType</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#6F42C1;"> fullName</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> fullNameType</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">firstname</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lastName</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;jie&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;">  +</span><span style="color:#24292E;"> lastName;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2-4-剩余参数" tabindex="-1">2.4 剩余参数 <a class="header-anchor" href="#_2-4-剩余参数" aria-label="Permalink to &quot;2.4 剩余参数&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用...a 表示个数不限的可选参数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> fullName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">firstName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">restName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">[])</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> firstName </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot; &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> restName.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在函数类型上定义时也会用到 ...a 这个符号</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#6F42C1;"> fullNameFun</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> fullName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fullNameFun</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xu&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jie&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;han&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="三、this" tabindex="-1">三、this <a class="header-anchor" href="#三、this" aria-label="Permalink to &quot;三、this&quot;">​</a></h2><h2 id="_3-1-函数的重载" tabindex="-1">3.1 函数的重载 <a class="header-anchor" href="#_3-1-函数的重载" aria-label="Permalink to &quot;3.1 函数的重载&quot;">​</a></h2><ul><li>在同一个作用域内，可以定义多个同名函数，只要他们的参数列表不同(参数的数量不同、参数的类型不同、参数的顺序不同)</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 函数签名</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> makeDate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">timestamp</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> makeDate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">m</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">d</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数实现</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> makeDate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">mOrTimestamp</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">d</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (d </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> undefined</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">(y, mOrTimestamp, d);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">(mOrTimestamp);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> d1</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> makeDate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12345678</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> d2</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> makeDate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,17)]))}const m=n(e,[["render",o]]);export{b as __pageData,m as default};
