import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"语句","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/语言基础/语句.md","filePath":"docs/JavaScript/语言基础/语句.md","lastUpdated":1735478813000}'),p={name:"docs/JavaScript/语言基础/语句.md"};function o(r,s,c,t,i,b){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h1><h2 id="一、if-语句" tabindex="-1">一、if 语句 <a class="header-anchor" href="#一、if-语句" aria-label="Permalink to &quot;一、if 语句&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// ECMAScript 会自动调用 Boolean() 来将 condition 转化为布尔值</span></span>
<span class="line"><span style="color:#6A737D;">// statement1、statement2 只有一句时，花括号可以省略。但\`最佳实践是永远使用花括号包含 statement\`</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (condition) {</span></span>
<span class="line"><span style="color:#24292E;">  statement1 </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  statement2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="二、do-while-语句" tabindex="-1">二、do-while 语句 <a class="header-anchor" href="#二、do-while-语句" aria-label="Permalink to &quot;二、do-while 语句&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 后测试循环：循环体内的代码至少会执行一次</span></span>
<span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  statement</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (expression);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三、while-语句" tabindex="-1">三、while 语句 <a class="header-anchor" href="#三、while-语句" aria-label="Permalink to &quot;三、while 语句&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 先测试循环语句</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(expression) {</span></span>
<span class="line"><span style="color:#24292E;">  statement</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="四、for-语句" tabindex="-1">四、for 语句 <a class="header-anchor" href="#四、for-语句" aria-label="Permalink to &quot;四、for 语句&quot;">​</a></h2><ul><li>for 语句其实是 while 语句的改进版，和 while 对比 只不过是把<code>初始化变量的过程放到了语句中</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (initialization; expression; post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loop</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression){</span></span>
<span class="line"><span style="color:#24292E;">  statement</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// initialization 中推荐使用 let 声明变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="五、for-in-语句" tabindex="-1">五、for-in 语句 <a class="header-anchor" href="#五、for-in-语句" aria-label="Permalink to &quot;五、for-in 语句&quot;">​</a></h2><ul><li>用于遍历对象上的<code>可枚举属性</code>(包括<code>原型</code>上的)</li><li>ECMAScript 中对象的属性是无序的， 因此也不能保证 for-in 返回属性的顺序</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 声明 property 推荐使用 const，来保证 局部变量 property 的值不被修改</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (property </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> expression) {</span></span>
<span class="line"><span style="color:#24292E;">  statement</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="六、for-of-语句" tabindex="-1">六、for-of 语句 <a class="header-anchor" href="#六、for-of-语句" aria-label="Permalink to &quot;六、for-of 语句&quot;">​</a></h2><ul><li>用于遍历<code>可迭代对象</code>的元素</li><li>for-of 的顺序会按照可迭代对象的 next() 方法产生值的顺序迭代元素</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 声明 property 推荐使用 const，来保证 局部变量 property 的值不被修改</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (property </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> expression) {</span></span>
<span class="line"><span style="color:#24292E;">  statement</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="七、break-和-continue-语句" tabindex="-1">七、break 和 continue 语句 <a class="header-anchor" href="#七、break-和-continue-语句" aria-label="Permalink to &quot;七、break 和 continue 语句&quot;">​</a></h2><ul><li>break 和 continue 为执行循环代码提供了更严格的控制手段</li><li>break: 立刻退出循环，强制执行<code>循环后</code>的下一条语句</li><li>continue: 立刻退出循环，但是会再次<code>从循环顶部开始</code>执行</li></ul><p>TODO: forEach 可不可以使用 break 或者 continue 进行中断。不可以的原因是因为? 如果想要中断要怎么办</p><h2 id="八、with-语句" tabindex="-1">八、with 语句 <a class="header-anchor" href="#八、with-语句" aria-label="Permalink to &quot;八、with 语句&quot;">​</a></h2><ul><li>with 语句将代码作用域设置为特定的对象</li><li>with 语句影响性能且难于调试代码 <code>！不推荐使用</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> (expression) {</span></span>
<span class="line"><span style="color:#24292E;">  statement</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-label="Permalink to &quot;switch 语句&quot;">​</a></h2><ul><li>switch 匹配条件可以用于所有数据类型(value 可以是任何数据类型)</li><li>比较每个条件的值时，会使用 <code>===</code> 全等操作符，因此不会发生数据类型转换</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 用\`数值\`来匹配</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (expression) {</span></span>
<span class="line"><span style="color:#D73A49;">  case</span><span style="color:#24292E;"> value1:</span></span>
<span class="line"><span style="color:#24292E;">    statement1</span></span>
<span class="line"><span style="color:#D73A49;">    break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// break 用于跳出循环</span></span>
<span class="line"><span style="color:#D73A49;">  case</span><span style="color:#24292E;"> value2:</span></span>
<span class="line"><span style="color:#6A737D;">    // 跳过</span></span>
<span class="line"><span style="color:#D73A49;">  case</span><span style="color:#24292E;"> value3:</span></span>
<span class="line"><span style="color:#24292E;">    statement2  </span><span style="color:#6A737D;">// value2、value3 都会执行 statement2</span></span>
<span class="line"><span style="color:#D73A49;">    break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  default</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">// 在任何条件都没有满足时执行默认语句</span></span>
<span class="line"><span style="color:#24292E;">    statement</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 用\`表达式\`来匹配</span></span>
<span class="line"><span style="color:#6A737D;">// switch 会匹配条件的运算结果是否为 true， 因此 \`每个条件的表达式的返回值都应该是布尔类型\`</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 25</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#D73A49;">  case</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Less than 0.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">    break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  case</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Between 0 and 10.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">    break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  case</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 10</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;"> 20</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Between 10 and 20.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">    break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;More than 20.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>`,25)]))}const y=n(p,[["render",o]]);export{d as __pageData,y as default};
