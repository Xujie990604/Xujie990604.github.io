import{_ as a,c as n,o as e,ag as l}from"./chunks/framework.BDwTZuFy.js";const p="/assets/1.CNBefkPX.png",o="/assets/%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85%E5%90%8E.CKzTeIZH.png",t="/assets/%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85%E5%89%8D%E7%BB%93%E6%9E%84.DOc7n1VO.png",r="/assets/%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85%E5%90%8E%E7%BB%93%E6%9E%84.C7zXDDwH.png",i="/assets/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%A4%84%E7%90%86.8-xZUV8z.png",c="/assets/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E5%85%A5%E7%9A%84%E5%AE%98%E6%96%B9%E8%AF%B4%E6%98%8E.B8vrihcB.png",q=JSON.parse('{"title":"Vue 请求静态资源","description":"","frontmatter":{},"headers":[],"relativePath":"docs/技术文档总结/Vue框架/Vue 项目中请求静态资源.md","filePath":"docs/技术文档总结/Vue框架/Vue 项目中请求静态资源.md","lastUpdated":1727002980000}'),u={name:"docs/技术文档总结/Vue框架/Vue 项目中请求静态资源.md"};function b(d,s,m,g,h,y){return e(),n("div",null,s[0]||(s[0]=[l('<h1 id="vue-请求静态资源" tabindex="-1">Vue 请求静态资源 <a class="header-anchor" href="#vue-请求静态资源" aria-label="Permalink to &quot;Vue 请求静态资源&quot;">​</a></h1><p>TODO：添加上 Vite 和 webpack 的对比</p><h2 id="一-vue的public和assets文件夹的不同" tabindex="-1"><strong>一， Vue的public和assets文件夹的不同</strong> <a class="header-anchor" href="#一-vue的public和assets文件夹的不同" aria-label="Permalink to &quot;**一， Vue的public和assets文件夹的不同**&quot;">​</a></h2><h3 id="public文件夹-static" tabindex="-1"><strong>Public文件夹（static）</strong> <a class="header-anchor" href="#public文件夹-static" aria-label="Permalink to &quot;**Public文件夹（static）**&quot;">​</a></h3><p>public文件夹中的内容在打包的时候，会被原封不动的移动到dist目录中</p><h3 id="assets文件夹" tabindex="-1"><strong>Assets文件夹</strong> <a class="header-anchor" href="#assets文件夹" aria-label="Permalink to &quot;**Assets文件夹**&quot;">​</a></h3><p>assets文件夹中被使用到的资源(没有被使用到的文件并不会被放进dist文件夹中)在打包时，会被webpack处理。由 webpack 的配置文件决定将资源放置到哪里。并且经过webpack 处理过的资源都会被加上哈希的文件名后缀，这是为了更好的应对浏览器的缓存。（有时候替换一张图片，还使用原来的名字，如果没有webpack加上这样一个动态的哈希值的话，浏览器会直接使用缓存中的图片，导致替换了之后却没有效果 <img src="'+p+'" alt="1"><img src="'+o+`" alt="2"></p><h2 id="二-vue对相对路径和绝对路径的处理" tabindex="-1">二，Vue对相对路径和绝对路径的处理 <a class="header-anchor" href="#二-vue对相对路径和绝对路径的处理" aria-label="Permalink to &quot;二，Vue对相对路径和绝对路径的处理&quot;">​</a></h2><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span>URL转换规则</span></span>
<span class="line"><span>如果URL是一个绝对路径（例如 /images/foo.png），它将会被保留不变</span></span>
<span class="line"><span>如果URL是以 \`.\` 开头，它会作为一个请求模块被解释并基于你的文件系统中的目录结构进行解析</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="使用绝对路径" tabindex="-1">使用绝对路径 <a class="header-anchor" href="#使用绝对路径" aria-label="Permalink to &quot;使用绝对路径&quot;">​</a></h3><p>当我们想要使用public文件夹中的资源时，可以使用绝对路径的形式来请求资源。Vue在识别路径时发现是一个绝对路径，URL会被直接的保存下来放到img的src属性下。代码更改之后，Vue热更新将最新的dist文件交给浏览器去识别。浏览器在解析img DOM时，直接去请求img/aaa.jpg.。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 打包前 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;img/aaa.jpg&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 打包后 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;img/aaa.jpg&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因为public文件夹中的内容会被原封不动的添加到dist 文件夹中，所以可以正确的请求到图片资源。 <img src="`+t+'" alt="1"><img src="'+r+`" alt="1"></p><h3 id="使用相对路径" tabindex="-1"><strong>使用相对路径</strong> <a class="header-anchor" href="#使用相对路径" aria-label="Permalink to &quot;**使用相对路径**&quot;">​</a></h3><p>我们想要使用assets 文件夹中的内容时，需要使用相对路径的形式来请求资源。Vue在识别路径时发现是一个相对路径，会路径进行解析。 官方文档的解释：</p><blockquote><p>如果URL是以 <code>.</code> 开头，它会作为一个请求模块被解释并基于你的文件系统中的目录结构进行解析</p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 打包前 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../assets/img/home/recommend_bg.jpg&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 打包后 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#6F42C1;"> src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/img/recommend_bg.a1646d5d.jpg&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们写代码的时候我们在引用文件的时候开发者所关注的目录结构是编辑器打开的这个项目文件夹。但是浏览器在识别代码时，浏览器识别的是打包后的dist文件夹。在我们使用相对路径来引入资源时，如果Vue没有对路径做处理，而是直接交付给浏览器，那么浏览器一定找不到对应的文件。所以Vue在将这部分结构打包到dist文件夹之前一定是做了一些处理，让浏览器能正确的找到资源。 <img src="`+i+`" alt=""> Vue 所做的处理就是针对相对路径调用了一次require函数。 node使用的是CommonJS规范，require 语句作为 node 规范下的模块导入函数。平时在项目中使用比较多的 import … from … 是ES6的模块规范。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Vue 中手动使用 require</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  url: </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../assets/img/home/recommend_bg.jpg&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 最终打印的值</span></span>
<span class="line"><span style="color:#6F42C1;">url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/img/recommend_bg.a1646d5d.jpg&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>官方推荐：使用相对路径的形式来导入资源</p><blockquote><p>请注意，我们建议将资产作为模块依赖关系图的一部分导入，以便它们通过 Webpack 并具有以下好处 脚本样式表被缩小并捆绑在一起，以避免额外的网络请求 缺少文件会导致编译报错，而不是为您的用户带来 404 错误 结果文件名包含内容哈希，因此您无需担心浏览器缓存其旧版本</p></blockquote><h3 id="何时使用public文件夹" tabindex="-1">何时使用public文件夹 <a class="header-anchor" href="#何时使用public文件夹" aria-label="Permalink to &quot;何时使用public文件夹&quot;">​</a></h3><blockquote><p>您需要在构建输出中具有特定名称的文件 您有数千张图片，并需要动态引用它们的路径 某些库可能与 Webpack 不兼容，您别无选择，只能将其作为 <code>&lt;script&gt;</code> 标签包含在内</p></blockquote><h2 id="三、使用axios来请求本地数据" tabindex="-1">三、使用axios来请求本地数据 <a class="header-anchor" href="#三、使用axios来请求本地数据" aria-label="Permalink to &quot;三、使用axios来请求本地数据&quot;">​</a></h2><p>平时在自己mock数据的时候发现的问题。自己写的本地JSON文件在使用axios和fetch进行请求时，必须放在public文件夹下，并且使用绝对路径来请求。 在使用相对路径进行请求时，发现会找不到资源并且路径并没有经过require语句进行处理。</p><p><img src="`+c+`" alt="1"></p><p>官方文档只是明确说明这这三种情况下Vue会对相对路径进行处理。个人猜测是Vue不会对Axios中的相对路径进行处理。所以以后出现这种请求资源找不到的时候，可以先去浏览器看一下请求的路径，如果发现是因为没有被 Vue 处理而找不到文件的话，可以尝试使用require 语句来手动处理一下。</p><h2 id="四、require-函数" tabindex="-1">四、Require()函数 <a class="header-anchor" href="#四、require-函数" aria-label="Permalink to &quot;四、Require()函数&quot;">​</a></h2><ol><li>CommonJS规范是同步的加载，会出现浏览器假死的状态，因为是同步的加载，所以完全可以当做同步代码来使用</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> url</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../assets/data.json&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 控制台打印结果</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">  name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age; </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>加载JSON等数据时，返回值就是得到的数据。加载图片等资源时，返回值是一个处理过的路径。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> url</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../assets/img/home/recommend_bg.jpg&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 打印的结果</span></span>
<span class="line"><span style="color:#032F62;">&#39;/img/recommend_bg.a1646d5d.jpg&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>Require中只能填写相对路径</li></ol><p>想要在require中填写 绝对路径的方式来访问 public 文件夹中的内容是行不通的，个人理解如下。Require是 node 提供的api。浏览器是不会识别require语句的。所以在打包 dist 完成之前。Require语句就被执行了，得到了处理过后的字符串。在打包完成之前当前的文件结构就是我们开发者创建的项目。Require会基于这个来识别路径；。所以使用绝对路径来访问public中的文件是行不通的。 这个现象和axios中只能使用绝对路径也是类似的。识别axios中的路径这一步是在浏览器的环境下执行的，浏览器得到的是dist文件夹，所以在axios中也只能通过绝对路径的形式</p>`,34)]))}const _=a(u,[["render",b]]);export{q as __pageData,_ as default};
