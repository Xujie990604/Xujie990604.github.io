import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"函数的扩展","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/函数&作用域/函数的扩展.md","filePath":"docs/JavaScript/函数&作用域/函数的扩展.md","lastUpdated":1735478813000}'),e={name:"docs/JavaScript/函数&作用域/函数的扩展.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="函数的扩展" tabindex="-1">函数的扩展 <a class="header-anchor" href="#函数的扩展" aria-label="Permalink to &quot;函数的扩展&quot;">​</a></h1><h2 id="一、函数的默认值" tabindex="-1">一、函数的默认值 <a class="header-anchor" href="#一、函数的默认值" aria-label="Permalink to &quot;一、函数的默认值&quot;">​</a></h2><ul><li>函数参数的默认值</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">total</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [item, total];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [&#39;a&#39;, 0]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>解构赋值的默认值</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 只用到了解构赋值的默认值</span></span>
<span class="line"><span style="color:#6A737D;">// 如果函数调用时没有传递参数，执行会报错</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [x, y];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这种方式和上面的方式等价，且这种方式更加简洁</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [x, y];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// [5, 2]</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 会报错提示obj不能是undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>解构赋值默认值加上函数的默认值</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 即用到了解构赋值的默认值，又用到了函数的默认值</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { x: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [x, y];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 即使调用函数没有参数也不会报错[6, 7]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="二、箭头函数" tabindex="-1">二、箭头函数 <a class="header-anchor" href="#二、箭头函数" aria-label="Permalink to &quot;二、箭头函数&quot;">​</a></h2><h3 id="_2-1-缩减代码量" tabindex="-1">2.1 缩减代码量 <a class="header-anchor" href="#_2-1-缩减代码量" aria-label="Permalink to &quot;2.1 缩减代码量&quot;">​</a></h3><ul><li>只有一个参数时可以把小括号省掉。</li><li>代码块部分如果只有一个 return 语句的话，就可以不加 {} 和 return，箭头函数会自动执行那条语句，并把那条语句的结果当做返回值返回。也就是说如果函数是 num =&gt; console.log(num)的话，先会执行 console.log(num) 然后把 console.log(num) 表达式的值返回出去，也就是 undefined。</li><li>如果代码块的部分大于一条语句的话，就要使用大括号括起来，并且使用 return 语句</li><li>如果直接返回一个对象的话，需要在对象的外面加上一个 ()。</li></ul><h3 id="_2-2-特性" tabindex="-1">2.2 特性 <a class="header-anchor" href="#_2-2-特性" aria-label="Permalink to &quot;2.2 特性&quot;">​</a></h3><ul><li>箭头函数内没有 arguments</li><li>没有原型</li><li>不会创建自己的 this</li></ul><h3 id="_2-3-不适合的场景" tabindex="-1">2.3 不适合的场景 <a class="header-anchor" href="#_2-3-不适合的场景" aria-label="Permalink to &quot;2.3 不适合的场景&quot;">​</a></h3><ul><li>对象里面不适合使用箭头函数</li><li>对象里面使用箭头函数来定义<code>方法</code>的话，会失去通过 <code>this</code> 实现面向对象编程的特点。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  call</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// xujie</span></span>
<span class="line"><span style="color:#6A737D;">// 因为 call 函数中的 this 是 obj 对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  call</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#6A737D;">// 因为 call 函数中的 this 是 window 对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>需要动态 this 的地方，比如事件 addEventListener 绑定函数。</li></ul><h3 id="_2-4-this-的指向问题" tabindex="-1">2.4 this 的指向问题 <a class="header-anchor" href="#_2-4-this-的指向问题" aria-label="Permalink to &quot;2.4 this 的指向问题&quot;">​</a></h3><ul><li>箭头函数不会创建自己的 this，所以它没有自己的 this，它只会从自己的作用域链的上一层继承 this。(只有函数和 window 有作用域，对象没有自己的作用域)</li><li>会捕获自己在定义时(注意，是定义时，不是调用时)所处的外层执行环境的 this，并继承这个 this 值。所以，箭头函数中 this 的指向在它被定义的时候就已经确定了，之后永远不会改变。不能使用 call(), apply() 等函数去改变 this 的指向</li><li>因为没有 this 也不能被当做构造函数</li></ul>`,19)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
