import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/设计模式/设计模式.md","filePath":"docs/设计模式/设计模式.md","lastUpdated":1725775150000}'),e={name:"docs/设计模式/设计模式.md"};function o(c,s,r,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><ul><li><p>设计模式的定义是：在<code>面向对象软件设计</code>过程中针对特定问题的简洁而优雅的解决方案。</p></li><li><p>模式是一些经过了大量实际项目验证的优秀解决方案</p></li><li><p>鸭子类型：如果它走起路来像鸭子，叫起来也是鸭子，那么它就是鸭子</p></li><li><p>鸭子类型是这样一种编程思想：A 对象是否是 B 对象的子类，不是由继承自特定的类或实现特定的接口决定的，而是由当 A 的方法和属性和和 B 的方法和属性决定的，类似一个集合，当集合 B 有的 A 都有，就认为 A 和 B 是一类的</p></li><li><p>在 <code>动态类型</code> 语言中，利用 <code>鸭子类型</code> 思想能够轻松的实现 <code>面向接口编程，而不是面向实现编程</code>(eg:一个对象若有 push 和 pop 方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。一个对象如果有 length 属性，也可以依照下标来存取属性（最好还要拥有 slice 和 splice 等方法，这个对象就可以被当作数组来使用)</p></li><li><p>在 <code>静态类型语言</code> 中，要实现 <code>面向接口编程</code> 并不是一件容易的事情，往往要通过抽象类或者接口等将对象进行 <code>向上转型</code>。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在类型检查系统的监视之下互相被替换使用。只有当对象能够被互相替换使用，才能体现出对象 <code>多态性</code> 的价值。</p></li></ul><h2 id="面向对象的概念" tabindex="-1">面向对象的概念 <a class="header-anchor" href="#面向对象的概念" aria-label="Permalink to &quot;面向对象的概念&quot;">​</a></h2><h3 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-label="Permalink to &quot;封装&quot;">​</a></h3><ul><li>封装使得对象内部的实现对于其他对象来说是不可见的，对象对自己的行为负责。封装使得对象之间的耦合变得松散。对象之间只通过暴露的 API 进行通信。(修改对象时，可以随意的修改对象内部的实现。只要对外的接口没有变化，就不会影响到其他对象)</li></ul><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><ul><li>继承</li></ul><h3 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h3><ul><li>定义：将同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果</li><li>实现方式：(静态类型语言中)不同子类继承自同一个父类，并且在子类中进行方法的重写，就可以实现多态。(动态类型语言中)天生支持多态，并不需要额外设计。</li><li>扩展点：多态这个概念在 java 这种强类型语言中比较强调, js 这种弱类型语言天生支持多态</li><li>作用：多态最根本的作用就是通过把 <code>过程化的条件分支语句</code> 转化为 <code>对象的多态性</code>，从而消除这些条件分支语句(在程序书写时，开发者不必关注对象的类型，并根据不同的类型执行不同的代码。你只管发布命令，至于每种类型对象接到命令之后需要作出哪些行为并不需要关注-----多态的机制会自动安排妥当)</li></ul><h4 id="糟糕的多态体验" tabindex="-1">糟糕的多态体验 <a class="header-anchor" href="#糟糕的多态体验" aria-label="Permalink to &quot;糟糕的多态体验&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 这段代码也体现出了&quot;多态性&quot;，但是实现的方式却不尽人意。</span></span>
<span class="line"><span style="color:#6A737D;">// 如果需要新增一个小狗的类型。既需要在 makeSound 函数中新增小狗的逻辑，又需要新增一个小狗的类</span></span>
<span class="line"><span style="color:#6A737D;">// 代码的修改总是危险的，修改的地方越多，出错误的可能性越大。并且随着程序的发展， makeSound 函数会变得异常庞大，臃肿</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">( </span><span style="color:#E36209;">animal</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> ( animal </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Duck</span><span style="color:#24292E;"> ){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&#39;嘎嘎嘎&#39;</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> ( animal </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#24292E;"> ){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&#39;咯咯咯&#39;</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> Duck</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(){};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Duck</span><span style="color:#24292E;">() );      </span><span style="color:#6A737D;">// 嘎嘎嘎</span></span>
<span class="line"><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#24292E;">() );   </span><span style="color:#6A737D;">// 咯咯咯</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="js-中基于原型的面向对象实现多态" tabindex="-1">JS 中基于原型的面向对象实现多态 <a class="header-anchor" href="#js-中基于原型的面向对象实现多态" aria-label="Permalink to &quot;JS 中基于原型的面向对象实现多态&quot;">​</a></h4><ul><li>多态背后的思想是将 <code>做什么</code> 和 <code>谁去做以及怎样去做</code> 分离开来，也就是将 <code>不变的事物</code> 与 <code>可能改变的事物</code> 分离开来</li><li>不变的是发出叫声这个操作，改变的事物是不同类型的动物怎么叫</li><li>把不变的部分隔离出来，把改变的部分封装起来(程序扩展的能力更强，符合开放-封闭原则)</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 不变的部分</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">(</span><span style="color:#E36209;">animal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  animal.</span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 变化的部分</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：基于原型来实现面向对象编程存在的问题为：原型上的属性或者方法可以在运行时被修改</span></span>
<span class="line"><span style="color:#6A737D;">// TODO: 其他静态语言中，定义好的类中的属性，对象就不可以在运行时被修改了吗？JS有对应的修饰符使用吗？</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Duck</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#005CC5;">Duck</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sound</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;嘎嘎嘎&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#005CC5;">Chicken</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sound</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;咯咯咯&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 代码执行</span></span>
<span class="line"><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Duck</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 嘎嘎嘎</span></span>
<span class="line"><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 咯咯咯</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="基于-class-的面向对象编程实现多态" tabindex="-1">基于 class 的面向对象编程实现多态 <a class="header-anchor" href="#基于-class-的面向对象编程实现多态" aria-label="Permalink to &quot;基于 class 的面向对象编程实现多态&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 不变的部分</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">(</span><span style="color:#E36209;">animal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  animal.</span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 变化的部分</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：由于 JS 并没有类型的概念，因此使用 class 实现多态并不需要用到继承</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：如果是使用 TS 的话，要求 Duck 和 Chicken 继承自同一个父类或者实现同一个接口(否则这两个类没有相同的特点无法当做参数被传入 makeSound )</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：class 只是一个语法糖，实际上还是通过原型来实现面向对象(还是会存在属性，方法会在运行时被修改的问题)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Duck</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  sound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;嘎嘎&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  sound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;咯咯&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 代码执行</span></span>
<span class="line"><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Duck</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Chicken</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,16)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
