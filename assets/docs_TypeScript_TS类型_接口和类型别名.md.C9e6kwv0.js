import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"TS 接口","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS类型/接口和类型别名.md","filePath":"docs/TypeScript/TS类型/接口和类型别名.md","lastUpdated":1721231209000}'),e={name:"docs/TypeScript/TS类型/接口和类型别名.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ts-接口" tabindex="-1">TS 接口 <a class="header-anchor" href="#ts-接口" aria-label="Permalink to &quot;TS 接口&quot;">​</a></h1><h2 id="一、type-和-interface-的对比" tabindex="-1">一、type 和 interface 的对比 <a class="header-anchor" href="#一、type-和-interface-的对比" aria-label="Permalink to &quot;一、type 和 interface 的对比&quot;">​</a></h2><h3 id="_1-1-相同点" tabindex="-1">1.1 相同点 <a class="header-anchor" href="#_1-1-相同点" aria-label="Permalink to &quot;1.1 相同点&quot;">​</a></h3><ul><li>都可以用来定义对象，并且支持 1. 可选参数 2. readonly</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> a</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  readonly</span><span style="color:#E36209;"> age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> b</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  readonly</span><span style="color:#E36209;"> age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>都可以用来定义函数类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> a</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> b</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>都可以实现继承</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">1.</span><span style="color:#D73A49;"> interface</span><span style="color:#6F42C1;"> 使用</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> 实现继承</span></span>
<span class="line"><span style="color:#005CC5;">2.</span><span style="color:#6F42C1;"> type</span><span style="color:#6F42C1;"> 使用</span><span style="color:#D73A49;"> &amp;</span><span style="color:#24292E;">(交叉类型) </span><span style="color:#6F42C1;">实现继承</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="二、不同点" tabindex="-1">二、不同点 <a class="header-anchor" href="#二、不同点" aria-label="Permalink to &quot;二、不同点&quot;">​</a></h3><ul><li>type 能够声明基本类型 &amp; 联合类型 &amp; 元组类型 &amp; 字面量类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> a</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> b</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> c</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> d</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;left&quot;</span><span style="color:#D73A49;"> |</span><span style="color:#032F62;"> &quot;right&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>interface 可以重复定义相同名字的接口，并且这个接口会在之前的基础上进行合并而不是覆盖，type 定义相同的类型别名会报错</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> IPerson</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> IPerson</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> person</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> IPerson</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> TPerson</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 标识符“TPerson”重复</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> TPerson</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 标识符“TPerson”重复</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二、接口的使用" tabindex="-1">二、接口的使用 <a class="header-anchor" href="#二、接口的使用" aria-label="Permalink to &quot;二、接口的使用&quot;">​</a></h2><h3 id="_2-1-接口的继承" tabindex="-1">2.1 接口的继承 <a class="header-anchor" href="#_2-1-接口的继承" aria-label="Permalink to &quot;2.1 接口的继承&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> aType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> bType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 接口可以继承多个，方便了接口的复用性</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> cType</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> aType</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">bType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  height</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> cType</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">89</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_2-2-可选参数" tabindex="-1">2.2 可选参数 <a class="header-anchor" href="#_2-2-可选参数" aria-label="Permalink to &quot;2.2 可选参数&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// ? 代表 name 属性是一个可选的参数</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> paramsTs</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  label</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-3-只读属性" tabindex="-1">2.3 只读属性 <a class="header-anchor" href="#_2-3-只读属性" aria-label="Permalink to &quot;2.3 只读属性&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// readonly 代表属性只能在被初次创建时给一个值，创建完成之后就不能在修改属性的值了</span></span>
<span class="line"><span style="color:#6A737D;">// 只读变量用 const, 只读属性用 readonly</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  readonly</span><span style="color:#E36209;"> x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  readonly</span><span style="color:#E36209;"> y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-4-class-实现-interface" tabindex="-1">2.4 class 实现 interface <a class="header-anchor" href="#_2-4-class-实现-interface" aria-label="Permalink to &quot;2.4 class 实现 interface&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义一个接口</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> aType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  content</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">  say</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">content</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实现 Person 父类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  content</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">content</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实现 Man 类 继承 Person 并且实现 aType 接口</span></span>
<span class="line"><span style="color:#6A737D;">// 使用接口的好处</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 对于类的定义增加了一种限制(TODO：TS 是值结构检查，是否真的增加了一种限制？)</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 给类又增加了一个身份，当前 Man 就是一个实现了 aType 的类</span></span>
<span class="line"><span style="color:#6A737D;">// 如果此时有一个 Woman 类也实现了 aType 接口，即使和 Man 类的实现不完全一致，但是他们都有一个共同的身份就是实现了 aType 的类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Man</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Person</span><span style="color:#D73A49;"> implements</span><span style="color:#6F42C1;"> aType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">content</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    super</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  say</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;说话&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Man</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;吃饭&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,24)]))}const d=n(e,[["render",o]]);export{u as __pageData,d as default};
