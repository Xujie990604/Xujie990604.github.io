import{_ as a,c as n,o as e,ag as l}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"模块","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/模块/模块.md","filePath":"docs/TypeScript/模块/模块.md","lastUpdated":1722758955000}'),p={name:"docs/TypeScript/模块/模块.md"};function o(r,s,t,c,i,d){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h1><ul><li>任何包含顶级 <code>import</code> 和 <code>export</code> 的文件都被当成是一个模块</li><li>模块解决了标识符的可见范围</li></ul><h2 id="一、值的导出、导入" tabindex="-1">一、值的导出、导入 <a class="header-anchor" href="#一、值的导出、导入" aria-label="Permalink to &quot;一、值的导出、导入&quot;">​</a></h2><ul><li>和 JS 语法保持一致</li></ul><h2 id="二、类的导出、导入" tabindex="-1">二、类的导出、导入 <a class="header-anchor" href="#二、类的导出、导入" aria-label="Permalink to &quot;二、类的导出、导入&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 类型的导出</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> type</span><span style="color:#6F42C1;"> IPerson</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 类型的导入</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#D73A49;"> type</span><span style="color:#24292E;"> { IPerson } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;xxx&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 类型与值一起导入，单独标注类型</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { data, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> IPerson } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;xxx&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="三、命名空间" tabindex="-1">三、命名空间 <a class="header-anchor" href="#三、命名空间" aria-label="Permalink to &quot;三、命名空间&quot;">​</a></h2><ul><li>TS 有自己的模块格式, 称为 namespaces, 它早于 ES 模块标准。命名空间在特定场景下很有用。但是 ES 模块能满足大部分需求。建议使用 ES 模块来与 JS 的方向一致</li></ul>`,8)]))}const y=a(p,[["render",o]]);export{b as __pageData,y as default};
