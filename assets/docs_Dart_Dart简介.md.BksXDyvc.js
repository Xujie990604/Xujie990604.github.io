import{_ as t,c as e,o as l,ag as r}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"Dart 简介","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Dart/Dart简介.md","filePath":"docs/Dart/Dart简介.md","lastUpdated":1740575512000}'),i={name:"docs/Dart/Dart简介.md"};function o(s,a,d,n,c,_){return l(),e("div",null,a[0]||(a[0]=[r('<h1 id="dart-简介" tabindex="-1">Dart 简介 <a class="header-anchor" href="#dart-简介" aria-label="Permalink to &quot;Dart 简介&quot;">​</a></h1><h2 id="不同的编译技术" tabindex="-1">不同的编译技术 <a class="header-anchor" href="#不同的编译技术" aria-label="Permalink to &quot;不同的编译技术&quot;">​</a></h2><ol><li><p>原生平台：针对面向移动和桌面设备的应用程序， Dart 拥有具有实时 (JIT) 编译功能的 Dart VM 和用于生成机器代码的提前 (AOT) 编译器。</p><ul><li>开发时，使用 Dart VM 利用 JIT 技术运行字节码</li><li>发布时，使用 AOT 编译器将 Dart 代码转换为机器代码</li></ul></li><li><p>Web 平台：Dart 可用于编译开发和生产阶段的面向 Web 的应用，它的 Web 编译器可以将 Dart 转换为 JavaScript 或 WebAssembly。</p><ul><li>快速开发：编译成 JS 运行</li><li>生产环境 JS 编译器：编译成 JS 运行</li><li>生产环境 WebAssembly 编译器：编译成 WebAssembly 运行</li></ul></li></ol><h2 id="编程语言特点" tabindex="-1">编程语言特点 <a class="header-anchor" href="#编程语言特点" aria-label="Permalink to &quot;编程语言特点&quot;">​</a></h2><ol><li>静态类型、强类型。但是支持类型推断，类型注释是可选的</li><li>使用 GC 进行垃圾回收</li><li>健全的空值安全，不可为空性在运行时保留</li></ol>',5)]))}const p=t(i,[["render",o]]);export{h as __pageData,p as default};
