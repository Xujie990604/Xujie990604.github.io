import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"javaScript 零散知识点","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/独立知识点/Javascript 小知识点.md","filePath":"docs/JavaScript/独立知识点/Javascript 小知识点.md","lastUpdated":1712646874000}'),e={name:"docs/JavaScript/独立知识点/Javascript 小知识点.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="javascript-零散知识点" tabindex="-1">javaScript 零散知识点 <a class="header-anchor" href="#javascript-零散知识点" aria-label="Permalink to &quot;javaScript 零散知识点&quot;">​</a></h1><h2 id="清空数组的三种方法" tabindex="-1">清空数组的三种方法 <a class="header-anchor" href="#清空数组的三种方法" aria-label="Permalink to &quot;清空数组的三种方法&quot;">​</a></h2><ol><li>arr.length = 0;</li><li>arr.splice(0);</li><li>arr = [];</li></ol><ul><li>不能在控制台中直接使用{}来表示空对象，控制台会把{}认为是块。而不是对象。需要({})这种形式让控制台强制认为{}是一个空对象。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一种类型检查的方式</span></span>
<span class="line"><span style="color:#6A737D;">// 如果传入的参数的 show 属性是一个 Function 的话，才会执行下面的语句</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> renderMap</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">map</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (map.show </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Function</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    map.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="jq-如何实现链式调用" tabindex="-1">jq 如何实现链式调用 <a class="header-anchor" href="#jq-如何实现链式调用" aria-label="Permalink to &quot;jq 如何实现链式调用&quot;">​</a></h2><ul><li>方法的最后 return this</li><li>前提是变量和方法属于同一个对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;xujie&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.height </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 18</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">say</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我的名字是&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.name);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">jump</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我的身高是&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.name);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> person</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 实现链式调用</span></span>
<span class="line"><span style="color:#24292E;">person.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">jump</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,8)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
