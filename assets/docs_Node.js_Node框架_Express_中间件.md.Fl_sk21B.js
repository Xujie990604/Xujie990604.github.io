import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"中间件","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Node.js/Node框架/Express/中间件.md","filePath":"docs/Node.js/Node框架/Express/中间件.md","lastUpdated":1738895815000}'),e={name:"docs/Node.js/Node框架/Express/中间件.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h1><ul><li>express 的核心就是中间件，本质就是回调函数</li><li>express 在书写同步代码时遵循洋葱模型，但是在写异步代码时不会遵循洋葱模型</li></ul><h2 id="中间件的任务" tabindex="-1">中间件的任务 <a class="header-anchor" href="#中间件的任务" aria-label="Permalink to &quot;中间件的任务&quot;">​</a></h2><ol><li>执行任何代码</li><li>更改 req 和 res 对象</li><li>结束请求 - 响应周期(返回数据)</li><li>调用栈中的下一个中间件</li></ol><h2 id="next" tabindex="-1">next() <a class="header-anchor" href="#next" aria-label="Permalink to &quot;next()&quot;">​</a></h2><ol><li>next() 继续执行下一个中间件函数或者 route 函数</li><li>next(&#39;route&#39;) 表示丢弃当前 route 的剩余 callback 函数, 执行下一个 route (route 指的是一个基本的路由单元)</li><li>next(&#39;router&#39;) ??? 未知效果(好像是会跳出当前路由模块)(router 可能代表的是这个路由模块)</li><li>next(!&#39;route&#39;) 跳转到错误处理函数</li></ol><h2 id="中间件的类型" tabindex="-1">中间件的类型 <a class="header-anchor" href="#中间件的类型" aria-label="Permalink to &quot;中间件的类型&quot;">​</a></h2><ul><li>业务处理过程中的中间环节(所以中间件要在路由之前定义，注册)</li><li>客户端发起的任何请求，到达服务器之后，都会触发全局的中间件。通过 <code>app.use(中间件函数)</code> 注册全局中间件</li><li>多个中间件 <code>共享</code> req 和 res 属性，可以在上游给 req，res 定义属性方法。在下游的中间件或者路由中使用。(可以在中间件中定义一些通用的函数，这样所有的路由都能使用这个函数，不然的话就得去每个路由里面把这个函数都给定义一遍)</li></ul><h3 id="应用级别的中间件" tabindex="-1">应用级别的中间件 <a class="header-anchor" href="#应用级别的中间件" aria-label="Permalink to &quot;应用级别的中间件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;应用级别中间件函数&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">  next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 应用级别 + 路径匹配 (所有的请求类型都会被匹配上)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/home&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;应用级别 + 路径匹配中间件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">  next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 应用级别 + 路径匹配 + 方法匹配</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/home&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;应用级别 + 路径匹配 + 方法匹配中间件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 中间件可以定义多个，并且按照定义的顺序进行执行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="路由级别的中间件" tabindex="-1">路由级别的中间件 <a class="header-anchor" href="#路由级别的中间件" aria-label="Permalink to &quot;路由级别的中间件&quot;">​</a></h3><ul><li>路由级别的中间件和应用级别的中间件相同</li><li><ol><li>router.use() 2. router.use(&#39;/home&#39;) 3. router.get(&#39;/home&#39;)</li></ol></li></ul><h3 id="错误级别的中间件" tabindex="-1">错误级别的中间件 <a class="header-anchor" href="#错误级别的中间件" aria-label="Permalink to &quot;错误级别的中间件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 定义全局的错误级别的中间件</span></span>
<span class="line"><span style="color:#6A737D;">// 错误中间件必须要四个参数</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：全局的错误级别的中间件要在 路由注册 之后注册</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 通过 next(!&#39;route&#39;) 主动进入错误中间件</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 前面的所有路由都不适配当前请求路径后会进入错误中间件</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  ...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="express-内置的中间件" tabindex="-1">express 内置的中间件 <a class="header-anchor" href="#express-内置的中间件" aria-label="Permalink to &quot;express 内置的中间件&quot;">​</a></h3><ol><li>express.static() 快速托管静态资源</li><li>express.json() 解析 JSON 格式的请求体数据</li><li>express.urlencoded()解析 URL-encoded 格式的请求体数据</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 通过 express.json 这个中间件解析请求中的 JSON 格式的数据, 并且把数据添加到 req.body 上</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 express.urlencoded 这个中间件来解析请求中的 url-encoded 格式的数据</span></span>
<span class="line"><span style="color:#6A737D;">// 并且把数据添加到 req.body 上</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">urlencoded</span><span style="color:#24292E;">({ extended: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="第三方的中间件" tabindex="-1">第三方的中间件 <a class="header-anchor" href="#第三方的中间件" aria-label="Permalink to &quot;第三方的中间件&quot;">​</a></h3><h4 id="cors-中间件" tabindex="-1">CORS 中间件 <a class="header-anchor" href="#cors-中间件" aria-label="Permalink to &quot;CORS 中间件&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//导入cors中间件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> cors</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cors&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 跨域中间件的注册必须在路由挂载之前</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cors</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="morgan" tabindex="-1">morgan <a class="header-anchor" href="#morgan" aria-label="Permalink to &quot;morgan&quot;">​</a></h4><ul><li>保存日志信息的中间件</li></ul><h4 id="express-session-中间件的使用" tabindex="-1">express-session 中间件的使用 <a class="header-anchor" href="#express-session-中间件的使用" aria-label="Permalink to &quot;express-session 中间件的使用&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> session</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;express-session&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// session 中间件注册成功之后就可以使用 req.session 来访问和使用 session 对象，从而存储用户的关键信息</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#6F42C1;">  session</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    secret: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 属性的值可以为任意的字符串</span></span>
<span class="line"><span style="color:#24292E;">    resave: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 固定写法</span></span>
<span class="line"><span style="color:#24292E;">    saveUninitialized: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//固定写法</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 登录的 API 接口</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/api/login&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 判断用户提交的登录信息是否正确</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (req.body.username </span><span style="color:#D73A49;">!=</span><span style="color:#032F62;"> &quot;xujie&quot;</span><span style="color:#D73A49;"> ||</span><span style="color:#24292E;"> req.body.password </span><span style="color:#D73A49;">!=</span><span style="color:#032F62;"> &quot;xujie123&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ status: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, msg: </span><span style="color:#032F62;">&quot;登陆失败&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 登陆成功之后，将用户信息保存到 session 中</span></span>
<span class="line"><span style="color:#24292E;">  req.session.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body; </span><span style="color:#6A737D;">// 用户的信息</span></span>
<span class="line"><span style="color:#24292E;">  req.session.isLogin </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 用户的登录状态</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ status: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, msg: </span><span style="color:#032F62;">&quot;登录成功&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="jwt-认证" tabindex="-1">JWT 认证 <a class="header-anchor" href="#jwt-认证" aria-label="Permalink to &quot;JWT 认证&quot;">​</a></h4><ul><li>jsonwebtoken (用于生成 JWT 字符串) express-jwt (用于将 JWT 字符串还原成 JSON 对象)</li><li>需要定义一个 secret 密钥。在加密和还原过程中都需要使用这个 secret (secret 本质上就是一个字符串，定义的时候越是复杂越好)</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在用户登陆成功之后， 调用 jwt.sign() 方法生成 JWT 字符串</span></span>
<span class="line"><span style="color:#6A737D;">// 参数1：用户的信息对象</span></span>
<span class="line"><span style="color:#6A737D;">// 参数2：加密的密钥(定义的 secret 字符串)</span></span>
<span class="line"><span style="color:#6A737D;">// 参数3：配置对象，可以配置当前 Token 的有效期</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> Token</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> jwT.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">({ username: </span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;"> }, secretKey, { expiresIn: </span><span style="color:#032F62;">&quot;1h&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在收到客户端发送的 JWT 字符串时，使用 expressJWt 将字符串解析成 JSON 对象</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">expressJWt</span><span style="color:#24292E;">({ secret: secretKey }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 登录的 API 接口</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/api/login&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 注意： 只要 expressJWt 中间件配置成功之后，就会把解析出来的用户信息，挂载到 req.user 属性上</span></span>
<span class="line"><span style="color:#6A737D;">  // 现在在这里就可以访问到 req.user 属性</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(req.user);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 如果 JWT 解析失败后会抛出错误，需要自己定义一个 全局的错误处理中间件 来捕获和处理错误</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 这个错误是由于 Token 解析失败导致的</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (err.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;UnauthorizedError&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      status: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      msg: </span><span style="color:#032F62;">&quot;无效的Token&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,27)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
