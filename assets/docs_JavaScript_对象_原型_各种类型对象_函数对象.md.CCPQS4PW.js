import{_ as l,c as i,o as t,ag as e}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"函数对象","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/各种类型对象/函数对象.md","filePath":"docs/JavaScript/对象&原型/各种类型对象/函数对象.md","lastUpdated":1735478813000}'),o={name:"docs/JavaScript/对象&原型/各种类型对象/函数对象.md"};function r(n,a,c,d,s,h){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="函数对象" tabindex="-1">函数对象 <a class="header-anchor" href="#函数对象" aria-label="Permalink to &quot;函数对象&quot;">​</a></h1><h2 id="函数是对象" tabindex="-1">函数是对象 <a class="header-anchor" href="#函数是对象" aria-label="Permalink to &quot;函数是对象&quot;">​</a></h2><ul><li>函数实际上是对象，每个函数都是 Function 类型的实例，而且和其他对象一样都具有属性和方法。</li><li>由于函数是个对象，因此函数名实际上也是一个指向函数对象的指针，不会与函数绑定。</li><li>函数是对象，函数名是指针。函数体是真正的值。栈内存存地址(指针)，堆内存存数据</li></ul><h2 id="函数属性和方法" tabindex="-1">函数属性和方法 <a class="header-anchor" href="#函数属性和方法" aria-label="Permalink to &quot;函数属性和方法&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>function.length 返回函数的形参个数</li><li>function.name 返回函数的名称</li><li>function.caller 属性中保留着调用当前函数的函数的引用(代码)，如果是在全局中调用这个函数会返回null，在其他函数中使用会返回父函数的代码</li><li>function.prototype 函数的原型</li></ul><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li>每个函数都包括两个非继承过来的方法</li><li>apply() 和 call()，在特定的作用域中调用函数，实际上等于设置函数体内的 this 值。</li><li>call(obj，arguments...)必须明确的传入每一个参数,obj 是重新指定的执行环境。</li><li>apply(obj, [arguments])可以传入一个参数的数组，obj 是重新指定的执行环境。</li><li>使用这两个方法来扩充作用域的好处是，对象不需要与方法有任何的耦合，函数就可以使用对象作为环境。</li><li>ES5 定义了 bind 方法，可以创建一个函数的实例。其 this 值会被绑定到传给 bind() 函数的值。 var b = a.bind(obj);</li></ul><h2 id="函数继承的方法" tabindex="-1">函数继承的方法 <a class="header-anchor" href="#函数继承的方法" aria-label="Permalink to &quot;函数继承的方法&quot;">​</a></h2><ul><li>toLocalString(), toString() 方法始终都返回函数的代码，但是因浏览器而异。所以无法使用这两个方法实现重要的功能。</li><li>valueOf() 方法返回函数的代码</li></ul>',10)]))}const b=l(o,[["render",r]]);export{_ as __pageData,b as default};
