import{_ as e,c as l,o as i,ag as t}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"编程范式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/编程规范/编程范式.md","filePath":"docs/编程规范/编程范式.md","lastUpdated":1755742260000}'),r={name:"docs/编程规范/编程范式.md"};function o(d,a,h,s,n,c){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="编程范式" tabindex="-1">编程范式 <a class="header-anchor" href="#编程范式" aria-label="Permalink to &quot;编程范式&quot;">​</a></h1><p>TODO：命令式、声明式根据 Vue页面渲染来补充，函数式编程和面向对象编程仍需要大量深入学习</p><h2 id="一、命令式编程" tabindex="-1">一、命令式编程 <a class="header-anchor" href="#一、命令式编程" aria-label="Permalink to &quot;一、命令式编程&quot;">​</a></h2><ul><li>命令式编程中，程序执行的步骤和顺序是特别重要的</li><li>命令式编程中，使用赋值，循环，条件和函数</li></ul><h2 id="二、函数式编程" tabindex="-1">二、函数式编程 <a class="header-anchor" href="#二、函数式编程" aria-label="Permalink to &quot;二、函数式编程&quot;">​</a></h2><ul><li>函数和数据集合是函数式编程的核心</li><li>主要目标是描述数据以及要对数据应用的转换</li><li>函数式编程中程序的执行循序重要性很低</li><li>函数式编程中可以滥用递归和函数</li><li>在函数式编程中，要避免副作用和可变数据，意味着我们不会修改传入函数的数据。如果需要基于输入返回一个解决方案，可以制作一个副本并返回数据修改后的副本</li><li>使用 JavaScript 的函数式编程，需要善于使用 map, filter, reduce 等函数</li></ul><p>TODO: JS 也并不是一个完全支持函数式编程的函数，缺少了必要的尾递归优化、组合等(补充缺失的功能为一个参考点)功能，并不是把一小块代码放到一个函数中、不使用 class 关键字就叫函数式编程了。还是要好好的理解函数式编程的本质。 TODO: WEB 的业务代码(一直在改动)就是不适合面向对象编程的，但是封装一些工具库或者框架，面向对象还是很好的一种范式约束。知乎有关于范式的讨论</p><h2 id="三、声明式编程" tabindex="-1">三、声明式编程 <a class="header-anchor" href="#三、声明式编程" aria-label="Permalink to &quot;三、声明式编程&quot;">​</a></h2><ul><li>在使用 Vue 等框架时，只需要声明数据，而不需要关注数据如何被渲染成DOM</li></ul><h2 id="四、面向对象编程" tabindex="-1">四、面向对象编程 <a class="header-anchor" href="#四、面向对象编程" aria-label="Permalink to &quot;四、面向对象编程&quot;">​</a></h2><h3 id="_4-1-基于类的面向对象编程" tabindex="-1">4.1 基于类的面向对象编程 <a class="header-anchor" href="#_4-1-基于类的面向对象编程" aria-label="Permalink to &quot;4.1 基于类的面向对象编程&quot;">​</a></h3><ul><li>Java 等语言通过 new 一个类来生成新的对象</li></ul><h3 id="_4-2-基于原型的面向对象编程" tabindex="-1">4.2 基于原型的面向对象编程 <a class="header-anchor" href="#_4-2-基于原型的面向对象编程" aria-label="Permalink to &quot;4.2 基于原型的面向对象编程&quot;">​</a></h3><ul><li>JS 通过复制原型的方式来快速的创建一个对象</li><li>重点描述基于<code>原型的面向对象</code>编程和基于<code>类的面向对象</code>编程有哪些区别，使用 JS 来实现面向对象不是使用了 class 这个关键字就可以了。需要更深入的理解面向对象的概念，由于 JS 的鸭子类型，所以 Java 中的很多复杂操作都是可以简化的</li></ul><h2 id="五、函数响应式编程" tabindex="-1">五、函数响应式编程 <a class="header-anchor" href="#五、函数响应式编程" aria-label="Permalink to &quot;五、函数响应式编程&quot;">​</a></h2><p>TODO：rxjs 是典型案例</p>',16)]))}const p=e(r,[["render",o]]);export{_ as __pageData,p as default};
