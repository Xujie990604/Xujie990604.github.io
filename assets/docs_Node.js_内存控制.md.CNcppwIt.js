import{_ as a,c as o,o as l,ag as t}from"./chunks/framework.BDwTZuFy.js";const f=JSON.parse('{"title":"内存控制","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Node.js/内存控制.md","filePath":"docs/Node.js/内存控制.md","lastUpdated":1712646874000}'),i={name:"docs/Node.js/内存控制.md"};function r(s,e,d,c,_,n){return l(),o("div",null,e[0]||(e[0]=[t('<h1 id="内存控制" tabindex="-1">内存控制 <a class="header-anchor" href="#内存控制" aria-label="Permalink to &quot;内存控制&quot;">​</a></h1><ul><li>process.memoryUsage() 用于查看 V8 中的堆内存使用情况</li><li>V8 对于内存的限制，因为能使用的内存越大，进行单次内存回收的时间就越长(1.5G 内存的单次回收已经达到了 50ms)</li><li>查看垃圾回收日志的方式主要是在启动时添加 <code>--trace_gc</code> 参数</li><li>通过在 Node 启动时使用 <code>--prof</code> 参数，可以得到 V8 执行时的性能分析数据，其中包含了垃圾回收执行时占用的时间</li><li>os 模块中的 totalmem( )和 freemem() 这两个方法用于查看操作系统的内存使用情况，它们分别返回系统的总内存和闲置内存，以字节为单位</li><li>Buffer 对象不同于其他对象，它不经过 V8 的内存分配机制。所以不会有堆内存大小的限制</li></ul><h2 id="注意要点" tabindex="-1">注意要点 <a class="header-anchor" href="#注意要点" aria-label="Permalink to &quot;注意要点&quot;">​</a></h2><ol><li>全局变量不会被回收</li><li>闭包中的变量不会被自动回收</li><li>慎重把内存当做缓存来使用(不要在进程内缓存数据，因为进程内数据无法和其他进程共用，在进程外进行缓存)</li><li>队列消费不及时(如果请求激增，数据库的读写操作太慢，导致队列中的事件无法被及时处理，导致事件一直占用内存)</li></ol>',4)]))}const p=a(i,[["render",r]]);export{f as __pageData,p as default};
