import{_ as i,c as l,o as t,ag as r}from"./chunks/framework.BDwTZuFy.js";const e="/assets/yunxing.DCvZIrvJ.png",S=JSON.parse('{"title":"JavaScript简介","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/语言介绍/JavaScript简介.md","filePath":"docs/JavaScript/语言介绍/JavaScript简介.md","lastUpdated":1739805207000}'),c={name:"docs/JavaScript/语言介绍/JavaScript简介.md"};function o(s,a,d,p,h,n){return t(),l("div",null,a[0]||(a[0]=[r('<h1 id="javascript简介" tabindex="-1">JavaScript简介 <a class="header-anchor" href="#javascript简介" aria-label="Permalink to &quot;JavaScript简介&quot;">​</a></h1><ul><li>要真正学好用好JavaScript，理解其<code>本质</code>、<code>历史</code>及<code>局限性</code>是非常重要的。</li></ul><h2 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h2><ul><li>两个公司的两个版本的 javascript 语言备受业界关注，ECMA 协会制定了一个名为 ECMAScript 的标准。</li><li>ECMAScript 定义的只是这门语言的基础(规定了语言的语法，类型，语句，关键字，保留字，操作符，对象)，在此基础上可以构建更加完善的脚本语言。</li><li>WEB 浏览器只是 ECMAScript 实现的宿主环境之一，宿主环境提供基本的 ECMAScript 的实现，同时也会提供扩展，例如 DOM，BOM。其他的宿主环境还有(node)</li></ul><h2 id="javascript-语言的特点" tabindex="-1">JavaScript 语言的特点 <a class="header-anchor" href="#javascript-语言的特点" aria-label="Permalink to &quot;JavaScript 语言的特点&quot;">​</a></h2><ol><li>解释语言</li><li>动态类型，弱类型</li><li>单线程</li><li>ECMA标准 JS 原生也称为 ECMAScript。三大核心：ECMAScript + DOM + BOM（后两个由浏览器提供）</li></ol><h3 id="js是动态类型语言" tabindex="-1">JS是动态类型语言 <a class="header-anchor" href="#js是动态类型语言" aria-label="Permalink to &quot;JS是动态类型语言&quot;">​</a></h3><ol><li>JS 中的变量可以赋值任意类型、变量实际值在运行时确定</li><li>case 里的数据类型完全可以不一样（和其他强类型语言不一样）</li><li>数组内的数据类型可以是完全不同的数据类型 var arr = [1, 2, &quot;abd&quot;, undefined]</li></ol><h3 id="函数一等公民" tabindex="-1">函数一等公民 <a class="header-anchor" href="#函数一等公民" aria-label="Permalink to &quot;函数一等公民&quot;">​</a></h3><ul><li>JavaScript 中采用函数式编程的方式, 函数的作用十分强大</li></ul><h3 id="基于原型的面向对象" tabindex="-1">基于原型的面向对象 <a class="header-anchor" href="#基于原型的面向对象" aria-label="Permalink to &quot;基于原型的面向对象&quot;">​</a></h3><ul><li>不同于其他主流语言(c#, java等<code>基于类的面向对象</code>), JavaScript 使用<code>基于原型的面向对象</code></li></ul><h3 id="开发语言的特点" tabindex="-1">开发语言的特点 <a class="header-anchor" href="#开发语言的特点" aria-label="Permalink to &quot;开发语言的特点&quot;">​</a></h3><ul><li>编译语言： 先通篇翻译之后，执行翻译完的文件: c、c++ 速度快、用于底层实现，游戏、移植性不好</li><li>解释语言： 看一行、翻译一行、执行一行（不需要生成别的文件）: php、JS 速度稍微慢一点、跨平台（极大的优点）</li><li>java 先编译后解释 因为 java 虚拟机的存在: .java -&gt; 编译 -&gt; .class -&gt;jvm(虚拟机中解释执行)</li></ul><h2 id="浏览器中-javascript-的运行环境" tabindex="-1">浏览器中 JavaScript 的运行环境 <a class="header-anchor" href="#浏览器中-javascript-的运行环境" aria-label="Permalink to &quot;浏览器中 JavaScript 的运行环境&quot;">​</a></h2><ul><li>在 chrome 浏览器运行环境中，v8 是 chrome 浏览器中的 JS 解析引擎</li><li>内置 API: DOM-BOM-JS 内置对象等等(内置 API 是由运行环境提供的特殊接口，只能在所属的运行环境中被调用，浏览器有自己的 API，Node 也有自己的一套 API )(在浏览器环境中利用浏览器提供的事件来操作 DOM，在 Node 环境中利用 Node 提供的事件来操作 IO)</li><li>待执行的 JS 代码(程序员在浏览器中编写 JS 代码的时候，会使用浏览器内置的 API)(也就是说 DOM 的方法, BOM的方法，还有 JS 中各种构造函数和方法都是内置在浏览器中的)</li></ul><p><img src="'+e+'" alt="js在浏览器中执行"></p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li>javascript是一种专门为了与网页进行交互而设计的脚本语言</li></ul><ol><li>ECMAScript 核心语言功能</li><li>文档对象模型(DOM)提供访问和操作网页内容的方法和接口</li><li>浏览器对象模型(BOM)提供与浏览器交互的方法和接口</li></ol>',20)]))}const v=i(c,[["render",o]]);export{S as __pageData,v as default};
