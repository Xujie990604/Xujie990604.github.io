import{_ as s,c as l,o as n,ag as e}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"响应式布局","description":"","frontmatter":{},"headers":[],"relativePath":"docs/HTML+CSS/CSS部分/网页的布局/响应式布局.md","filePath":"docs/HTML+CSS/CSS部分/网页的布局/响应式布局.md","lastUpdated":1712646874000}'),i={name:"docs/HTML+CSS/CSS部分/网页的布局/响应式布局.md"};function r(o,a,t,p,c,d){return n(),l("div",null,a[0]||(a[0]=[e(`<h1 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h1><ul><li>响应式设计与自适应设计的区别：响应式开发一套界面，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容；</li><li>自适应需要开发多套界面，通过检测视口分辨率，来判断当前访问的设备是pc端、平板、手机，从而请求服务层，返回不同的页面。</li></ul><h2 id="实现的技术" tabindex="-1">实现的技术 <a class="header-anchor" href="#实现的技术" aria-label="Permalink to &quot;实现的技术&quot;">​</a></h2><ol><li>媒体查询</li><li>百分比的宽度（block的子元素随父元素调节的流体特性）</li><li>rem 的使用</li><li>视口单位的使用</li><li>flex 布局</li><li>css 的 calc() 方法</li><li>图片的响应式</li></ol><h2 id="像素的概念" tabindex="-1">像素的概念 <a class="header-anchor" href="#像素的概念" aria-label="Permalink to &quot;像素的概念&quot;">​</a></h2><h3 id="物理像素-设备像素" tabindex="-1">物理像素(设备像素) <a class="header-anchor" href="#物理像素-设备像素" aria-label="Permalink to &quot;物理像素(设备像素)&quot;">​</a></h3><ul><li>**显示器！！**上一个像素点的大小</li></ul><h3 id="css像素-虚拟像素" tabindex="-1">CSS像素(虚拟像素) <a class="header-anchor" href="#css像素-虚拟像素" aria-label="Permalink to &quot;CSS像素(虚拟像素)&quot;">​</a></h3><ul><li>相对的单位 PX</li><li>在不放缩网页的情况下，css像素 == 设备独立像素</li></ul><h3 id="设备独立像素-一般情况下-css像素" tabindex="-1">设备独立像素( 一般情况下 == CSS像素) <a class="header-anchor" href="#设备独立像素-一般情况下-css像素" aria-label="Permalink to &quot;设备独立像素( 一般情况下 == CSS像素)&quot;">​</a></h3><ul><li>是**系统！！**中的一个点，这个点代表可以由程序使用的虚拟像素。</li><li>在 PC 端中一个设备独立像素对应着一个像素点。因此加大 PC 显示器的分辨率时。相当于增多设备独立像素。因此能显示的内容更多了。</li><li>但是在一些手机中，手机的设备独立像素是固定个数的，因此增加手机的分辨率时。设备独立像素个数不变，每个设备独立像素中的物理像素增多。能显示的内容不变，但是画面更加细腻。</li></ul><h3 id="设备像素比" tabindex="-1">设备像素比 <a class="header-anchor" href="#设备像素比" aria-label="Permalink to &quot;设备像素比&quot;">​</a></h3><ul><li>drp = 物理像素/设备独立像素</li><li>drp = 2 用 2*2 个物理像素来表示一个设备独立像素</li><li>可以通过 windows.devicePixelRatio 参数来获取设备像素比的大小。</li></ul><h2 id="媒体查询-断点" tabindex="-1">媒体查询 + 断点 <a class="header-anchor" href="#媒体查询-断点" aria-label="Permalink to &quot;媒体查询 + 断点&quot;">​</a></h2><ul><li>媒体查询是一项 CSS3 功能，可使网页根据不同的屏幕尺寸和媒体类型调整其布局。</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 示例 */</span></span>
<span class="line"><span style="color:#D73A49;">@media</span><span style="color:#24292E;"> media type </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (condition: breakpoint) {</span></span>
<span class="line"><span style="color:#24292E;">  // CSS rules</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="media-type-媒体类型" tabindex="-1">Media type 媒体类型 <a class="header-anchor" href="#media-type-媒体类型" aria-label="Permalink to &quot;Media type 媒体类型&quot;">​</a></h3><ul><li>all 所有设备</li><li>print 文档打印</li><li>screen 彩色屏幕</li></ul><h3 id="media-features-媒体特性" tabindex="-1">Media features 媒体特性 <a class="header-anchor" href="#media-features-媒体特性" aria-label="Permalink to &quot;Media features 媒体特性&quot;">​</a></h3><ul><li>width 渲染区宽度</li><li>device-width 设备的宽度 少使用 因为含义很模糊 不是视口的宽度而是屏幕大小的宽度</li><li>max-width 最大宽度</li><li>还有更多的属性...</li></ul><h3 id="link标签引入时使用媒体查询" tabindex="-1">link标签引入时使用媒体查询 <a class="header-anchor" href="#link标签引入时使用媒体查询" aria-label="Permalink to &quot;link标签引入时使用媒体查询&quot;">​</a></h3><p><code>&lt;link rel = &quot;stylesheet&quot; media= &quot;screen and (max-width: 800px)&quot; href= &quot;style.css&quot;/&gt;</code></p><ul><li>表示只有在 screen 和最大屏幕不大于 800px 的情况下才会应用这个样式表。否则的话会下载 css 文件但是不会应用。</li></ul><h3 id="css-文件内使用媒体查询" tabindex="-1">css 文件内使用媒体查询 <a class="header-anchor" href="#css-文件内使用媒体查询" aria-label="Permalink to &quot;css 文件内使用媒体查询&quot;">​</a></h3><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">@media</span><span style="color:#005CC5;"> screen</span><span style="color:#D73A49;"> and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">max-width</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">800</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">min-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">500</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    /* and是逻辑操作符，与的意思 */</span></span>
<span class="line"><span style="color:#6A737D;">    /*  not逻辑操作符，否定的意思*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* ,用于将多个媒体查询合并为一个规则。是多个媒体查询语句列表的or操作符 */</span></span>
<span class="line"><span style="color:#22863A;">    div</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">        width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">200</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">        height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">        background</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>像这样引入的媒体查询的宽度就叫做断点</li><li>不要基于特定的设备来设置断点。因为断点的引入就是为了不区别设备而显示网页</li><li>媒体查询并不会增加选择符的特殊性，要保证媒体查询的选择符也有着正常的层叠顺序。</li></ul><h2 id="使用百分比作为单位" tabindex="-1">使用百分比作为单位 <a class="header-anchor" href="#使用百分比作为单位" aria-label="Permalink to &quot;使用百分比作为单位&quot;">​</a></h2><ul><li>额外的计算量，需要把设计稿都计算成百分比的形式。</li><li>计算复杂。当单位设置为百分数时。width(相当于父元素的width) top(相当于包含块的height) border-radius(相当于自身的width)</li></ul><h2 id="rem-单位" tabindex="-1">rem 单位 <a class="header-anchor" href="#rem-单位" aria-label="Permalink to &quot;rem 单位&quot;">​</a></h2><ul><li>rem 单位是由根元素 font-size 来决定的</li><li>把页面中所有的单位都换成 rem 单位。当页面的 size 改变时，只需要动态的修改 rem 的大小。即可达到响应式布局的效果。</li></ul><h3 id="动态的修改html" tabindex="-1">动态的修改html <a class="header-anchor" href="#动态的修改html" aria-label="Permalink to &quot;动态的修改html&quot;">​</a></h3><ol><li>通过js来获取页面的真实宽度，然后通过js语句来动态的改变rem的大小。缺点是css和js出现了耦合。</li><li>配合着媒体查询的语句来定义rem的大小。</li></ol><h2 id="视口单位-vh-vm-vw" tabindex="-1">视口单位 vh，vm，vw <a class="header-anchor" href="#视口单位-vh-vm-vw" aria-label="Permalink to &quot;视口单位 vh，vm，vw&quot;">​</a></h2><ul><li>vh相对于视口的高度，视口被均分成100的单位的vh</li><li>vw相对于视口的宽度，视口被分成100单位的vw</li><li>vmin 相对于视口的高度或者宽度中最小的那一个，其中最小的那一个被均分为100个单位的vm</li><li>视口的定义是浏览器内部的可视区域的大小，不包含任务栏标题栏，以及底部的工具栏的浏览器区域大小</li></ul><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li>元素的尺寸限制，免得溢出浏览器窗口。</li><li>实现视口覆盖，弹出框的蒙版。</li><li>vw, vh 视区大小相关单位只适用于非定位元素的高度相关属性上！ //zxx: 高度相关属性如 – height/min-height/max-height/line-height/padding-top/padding-bottom等。因为在定位元素上可以使用%。来实现相同的效果。</li><li>body 使用 100vh 实现固定一屏，没有滚动条的效果。</li></ul>`,36)]))}const b=s(i,[["render",r]]);export{u as __pageData,b as default};
