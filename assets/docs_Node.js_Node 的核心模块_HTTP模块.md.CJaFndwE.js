import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"HTTP 模块","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Node.js/Node 的核心模块/HTTP模块.md","filePath":"docs/Node.js/Node 的核心模块/HTTP模块.md","lastUpdated":1712646874000}'),p={name:"docs/Node.js/Node 的核心模块/HTTP模块.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="http-模块" tabindex="-1">HTTP 模块 <a class="header-anchor" href="#http-模块" aria-label="Permalink to &quot;HTTP 模块&quot;">​</a></h1><ul><li>HTTP 模块是用来创建 Web 服务器的模块。通过 HTTP 的方法就能把一台电脑变成一台 Web 服务器，从而对外提供 Web 资源服务。</li><li>127.0.0.1 IP 地址 对应的域名是 localhost 用来访问本机(测试用)</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> http</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建web服务器的实例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> serve</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 为服务器实例绑定request事件</span></span>
<span class="line"><span style="color:#24292E;">serve.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 只要客户端请求服务器，就会触发request事件，从而调用回调函数</span></span>
<span class="line"><span style="color:#6A737D;">  // req 参数中都是和客户端相关的数据和属性</span></span>
<span class="line"><span style="color:#6A737D;">  // req.ul 客户端的请求 URL 地址</span></span>
<span class="line"><span style="color:#6A737D;">  // req.method 是客户端的 method 请求类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // res 参数中都是服务器的数据和属性</span></span>
<span class="line"><span style="color:#6A737D;">  // res.end (message) 向客户端响应一些内容</span></span>
<span class="line"><span style="color:#6A737D;">  // 响应内容是中文的话，会有乱码的问题。需要在 res 上调用 setHeader() 方法来设置响应头部</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;text/html; charset=utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果把 res.end 中的参数换成 fs.readFile() 方法获取到的 index.html 的内容。就相当于返回了一个网页。</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果这个 index.html 网页中有外链的引用，css 或者 js。客户端会自动的发起请求，来获取这些在 index.html 中引入的文件</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;h1&gt;徐杰&lt;/h1&gt;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 启动服务器 serve.listen (端口号，callback)</span></span>
<span class="line"><span style="color:#24292E;">serve.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;服务器启动成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,3)]))}const d=n(p,[["render",o]]);export{u as __pageData,d as default};
