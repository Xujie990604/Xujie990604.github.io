import{_ as e,c as i,o as t,ag as l}from"./chunks/framework.BDwTZuFy.js";const p=JSON.parse('{"title":"严格模式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/独立知识点/严格模式.md","filePath":"docs/JavaScript/独立知识点/严格模式.md","lastUpdated":1712646874000}'),o={name:"docs/JavaScript/独立知识点/严格模式.md"};function r(s,a,n,d,c,u){return t(),i("div",null,a[0]||(a[0]=[l('<h1 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h1><h2 id="一、-use-strict-语句来激活严格模式-就是一行字符串-不会对不兼容严格模式的浏览器产生影响" tabindex="-1">一、&quot;use strict&quot; ;语句来激活严格模式 就是一行字符串，不会对不兼容严格模式的浏览器产生影响 <a class="header-anchor" href="#一、-use-strict-语句来激活严格模式-就是一行字符串-不会对不兼容严格模式的浏览器产生影响" aria-label="Permalink to &quot;一、&quot;use strict&quot; ;语句来激活严格模式   就是一行字符串，不会对不兼容严格模式的浏览器产生影响&quot;">​</a></h2><ul><li>不再兼容 es3 的一些不规则语法。使用全新的 es5 规范。两种用法：</li></ul><ol><li>全局严格模式</li><li>局部函数内严格模式（推荐）</li></ol><h2 id="二、严格模式和-es3-模式的区别" tabindex="-1">二、严格模式和 ES3 模式的区别 <a class="header-anchor" href="#二、严格模式和-es3-模式的区别" aria-label="Permalink to &quot;二、严格模式和 ES3 模式的区别&quot;">​</a></h2><ol><li><p>witch(obj){ 改变作用域链的最顶端(将obj作为此代码块的作用域最顶端，通常配合命名空间使用) } //效率会变低很多 es5严格模式禁用</p></li><li><p>arguments.callee function.caller //这两个属性es5严格模式禁用</p></li><li><p>变量赋值前必须声明</p></li><li><p>var a = b = 3;会报错，b is undefined</p></li><li><p>a = 3;会报错,a is undefined</p></li><li><p>局部的 this 必须被赋值 在 es5 的严格模式下，预编译下的 this 不会指向 windows 为 undefined 。但是全局的 this 还是指向 window</p></li><li><p>拒绝重复的属性和参数</p></li></ol><h3 id="_2-8-eval-严格模式禁用" tabindex="-1">2.8 eval() 严格模式禁用 <a class="header-anchor" href="#_2-8-eval-严格模式禁用" aria-label="Permalink to &quot;2.8 eval() 严格模式禁用&quot;">​</a></h3><ul><li>可以把字符串当做代码执行</li><li>功能强大，但是很危险</li></ul><h3 id="_2-9-严格模式不支持八进制字面量" tabindex="-1">2.9 严格模式不支持八进制字面量 <a class="header-anchor" href="#_2-9-严格模式不支持八进制字面量" aria-label="Permalink to &quot;2.9 严格模式不支持八进制字面量&quot;">​</a></h3>',9)]))}const _=e(o,[["render",r]]);export{p as __pageData,_ as default};
