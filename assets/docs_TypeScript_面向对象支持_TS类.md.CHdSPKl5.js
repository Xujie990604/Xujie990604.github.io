import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"TS 类","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/面向对象支持/TS类.md","filePath":"docs/TypeScript/面向对象支持/TS类.md","lastUpdated":1722409199000}'),e={name:"docs/TypeScript/面向对象支持/TS类.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ts-类" tabindex="-1">TS 类 <a class="header-anchor" href="#ts-类" aria-label="Permalink to &quot;TS 类&quot;">​</a></h1><ul><li>三大特性: 继承，封装，多态</li></ul><h2 id="一、类属性" tabindex="-1">一、类属性 <a class="header-anchor" href="#一、类属性" aria-label="Permalink to &quot;一、类属性&quot;">​</a></h2><h3 id="_1-1-属性的声明与类型标注" tabindex="-1">1.1 属性的声明与类型标注 <a class="header-anchor" href="#_1-1-属性的声明与类型标注" aria-label="Permalink to &quot;1.1 属性的声明与类型标注&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> pt</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Point</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_1-2-只读属性" tabindex="-1">1.2 只读属性 <a class="header-anchor" href="#_1-2-只读属性" aria-label="Permalink to &quot;1.2 只读属性&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  readonly</span><span style="color:#E36209;"> x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 声明只读属性</span></span>
<span class="line"><span style="color:#E36209;">  y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 构造函数中可以修改只读属性</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">  add</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 非构造函数中，无法未只读属性赋值</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 无法为“x”赋值，因为它是只读属性。ts(2540)</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.y </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="二、成员可见性修饰符" tabindex="-1">二、成员可见性修饰符 <a class="header-anchor" href="#二、成员可见性修饰符" aria-label="Permalink to &quot;二、成员可见性修饰符&quot;">​</a></h2><ol><li>public: 默认修饰符, 在任何地方可见</li><li>private: 私有属性, 只能在类的内部访问(只能做到编译期的保护，运行时保护需要使用闭包、#私有)</li><li>protected: 受保护的属性, 在类的内部和子类中可以被访问</li><li>readonly: 只读属性, 可以在构造器里面赋值，但是赋值之后就不可以再修改了</li><li>abstract: 关键字来定义抽象类和抽象方法</li><li>static: 是静态属性，可以理解为是类上的一些常量，实例不能访问</li></ol><h2 id="三、extends" tabindex="-1">三、extends <a class="header-anchor" href="#三、extends" aria-label="Permalink to &quot;三、extends&quot;">​</a></h2><ul><li>通过 extends 来继承类</li><li>类可能来自基类，派生类具有基类的所有属性和方法，还可以定义额外的成员</li><li>派生类也可以覆盖基类字段或者属性，TS 强制派生类始终是其基类的子类型</li></ul><h2 id="四、implements" tabindex="-1">四、implements <a class="header-anchor" href="#四、implements" aria-label="Permalink to &quot;四、implements&quot;">​</a></h2><ul><li>通过 implements 来实现接口</li><li>implements 子句只是检查类可以被视为接口类型，它根本不会改变类的类型或者方法</li></ul><h2 id="五、this" tabindex="-1">五、this <a class="header-anchor" href="#五、this" aria-label="Permalink to &quot;五、this&quot;">​</a></h2><ul><li>TS 不会改变 this 的行为</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;MyClass&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">  getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.name;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> c</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;obj&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  getName: c.getName,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Prints &quot;obj&quot;, not &quot;MyClass&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="六、参数属性" tabindex="-1">六、参数属性 <a class="header-anchor" href="#六、参数属性" aria-label="Permalink to &quot;六、参数属性&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Prams</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // TS  专有语法</span></span>
<span class="line"><span style="color:#6A737D;">  // 将构造函数参数转换为具有相同名称和值的类属性</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> readonly</span><span style="color:#E36209;"> x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">    protected</span><span style="color:#E36209;"> y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#E36209;"> z</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span></span>
<span class="line"><span style="color:#24292E;">  ) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Prams</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="七、类之间的关系" tabindex="-1">七、类之间的关系 <a class="header-anchor" href="#七、类之间的关系" aria-label="Permalink to &quot;七、类之间的关系&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Point1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  x</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  y</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Point2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  x</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  y</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// OK 因为它俩的结构是相同的</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Point1</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Point2</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Employee</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  salary</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// OK 即使没有显式继承、类之间的子类型关系也存在</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Person</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Employee</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,21)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
