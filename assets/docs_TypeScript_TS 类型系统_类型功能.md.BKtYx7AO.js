import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"TS 中类型功能","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS 类型系统/类型功能.md","filePath":"docs/TypeScript/TS 类型系统/类型功能.md","lastUpdated":1722758955000}'),e={name:"docs/TypeScript/TS 类型系统/类型功能.md"};function o(t,s,r,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ts-中类型功能" tabindex="-1">TS 中类型功能 <a class="header-anchor" href="#ts-中类型功能" aria-label="Permalink to &quot;TS 中类型功能&quot;">​</a></h1><h2 id="一、类型推断" tabindex="-1">一、类型推断 <a class="header-anchor" href="#一、类型推断" aria-label="Permalink to &quot;一、类型推断&quot;">​</a></h2><ul><li>我们并不是必须编写显式类型注释，TS 类型系统会自动推断类型</li><li>当 TS 类型系统最终会推断出相同的类型时，最好不要添加类型注释</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 首次赋值为 string 之后，就不能在赋值 number 类型了</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;123&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 不能将类型“number”分配给类型“string”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="二、上下文类型" tabindex="-1">二、上下文类型 <a class="header-anchor" href="#二、上下文类型" aria-label="Permalink to &quot;二、上下文类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> names</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Eve&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 即使参数 s 没有类型注释，TS 也会自动推断出 s 的类型为 string</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="三、类型断言" tabindex="-1">三、类型断言 <a class="header-anchor" href="#三、类型断言" aria-label="Permalink to &quot;三、类型断言&quot;">​</a></h2><ul><li>适用于你比 Typescript 更加了解某个值的详情</li><li>把一个比较 <code>宽泛</code> 的类型转成一个更加 <code>具体</code> 的类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// as 语法(推荐)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> someValue1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;this is a string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于强制的把 any 类型转化为 string 类型，并且我明确的知道这个就是 string 类型的数值</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> strLength1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (someValue1 </span><span style="color:#D73A49;">as</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 尖括号语法(在 tsx 中会报错)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> someValue</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;this is a string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于强制的把 any 类型转化为 string 类型，两种形式是等价的.</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> strLength</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;someValue).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="四、字面推断" tabindex="-1">四、字面推断 <a class="header-anchor" href="#四、字面推断" aria-label="Permalink to &quot;四、字面推断&quot;">​</a></h2><ul><li>当你使用对象初始化变量时，TypeScript 假定该对象的属性可能会在以后更改值</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { counter: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">obj.counter </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// TS 不会假定 counter 属性是字面量 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// req.method 被推断为 string，而不是 &quot;GET&quot;，因为 req.method 的值是可以进行更改的</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> handleRequest</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &quot;GET&quot;</span><span style="color:#D73A49;"> |</span><span style="color:#032F62;"> &quot;POST&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> req</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { url: </span><span style="color:#032F62;">&quot;https://example.com&quot;</span><span style="color:#24292E;">, method: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(req.url, req.method); </span><span style="color:#6A737D;">// 类型“string”的参数不能赋给类型“&quot;GET&quot; | &quot;POST&quot;”的参数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 解决方案之一</span></span>
<span class="line"><span style="color:#6A737D;">// as const 后缀的作用类似于 const，但用于类型系统，确保为所有属性分配字面类型，而不是更通用的版本，如 string 或 number。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> req</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { url: </span><span style="color:#032F62;">&quot;https://example.com&quot;</span><span style="color:#24292E;">, method: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">as</span><span style="color:#D73A49;"> const</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="五、-非空断言" tabindex="-1">五、<code>!</code> 非空断言 <a class="header-anchor" href="#五、-非空断言" aria-label="Permalink to &quot;五、\`!\` 非空断言&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// ! 能够缩小 TS 的类型检查范围</span></span>
<span class="line"><span style="color:#6A737D;">// 这会告诉编辑器 x 不会是 undefined 或者 null</span></span>
<span class="line"><span style="color:#6A737D;">// 但是也仅仅是骗过了 TS 类型系统而已，如果 user 实际值为 undefined 则程序运行起来之后照样会报错</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> liveDangerously</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,14)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
