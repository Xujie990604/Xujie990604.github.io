import{_ as o,c as i,o as e,ag as a}from"./chunks/framework.BDwTZuFy.js";const m=JSON.parse('{"title":"monorepo","description":"","frontmatter":{},"headers":[],"relativePath":"docs/前端工程化/MonoRepo架构/MonoRepo.md","filePath":"docs/前端工程化/MonoRepo架构/MonoRepo.md","lastUpdated":1756641949000}'),r={name:"docs/前端工程化/MonoRepo架构/MonoRepo.md"};function t(n,l,d,s,h,p){return e(),i("div",null,l[0]||(l[0]=[a('<h1 id="monorepo" tabindex="-1">monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;monorepo&quot;">​</a></h1><h2 id="一、项目架构" tabindex="-1">一、项目架构 <a class="header-anchor" href="#一、项目架构" aria-label="Permalink to &quot;一、项目架构&quot;">​</a></h2><h3 id="_1-1-传统化架构" tabindex="-1">1.1 传统化架构 <a class="header-anchor" href="#_1-1-传统化架构" aria-label="Permalink to &quot;1.1 传统化架构&quot;">​</a></h3><p>组件库、用户中心、脚手架、图表库、工具库</p><ul><li>独立项目结构，所有的项目都是分开的 git 仓库</li><li>技术栈独立</li><li>规范化、自动化相关处理每个项目之间都是割裂的</li><li>依赖管理、版本控制很难统一管理</li><li>部署、docker、CI/CD 等很难形成统一</li></ul><h3 id="_1-2-monorepo" tabindex="-1">1.2 Monorepo <a class="header-anchor" href="#_1-2-monorepo" aria-label="Permalink to &quot;1.2 Monorepo&quot;">​</a></h3><ul><li>混合项目结构，所有的工程形成子包管理</li><li>技术栈高度统一（团队基建、业务项目、子服务、技术栈）</li><li>规范化、自动化、流程化项目间共享</li><li>依赖管理、版本控制高度统一</li><li>部署、docker、CI/CD 等统一部署流程</li></ul><h2 id="二、基于-monorepo-架构的实践方案" tabindex="-1">二、基于 monorepo 架构的实践方案 <a class="header-anchor" href="#二、基于-monorepo-架构的实践方案" aria-label="Permalink to &quot;二、基于 monorepo 架构的实践方案&quot;">​</a></h2><h3 id="_2-1-现阶段" tabindex="-1">2.1 现阶段 <a class="header-anchor" href="#_2-1-现阶段" aria-label="Permalink to &quot;2.1 现阶段&quot;">​</a></h3><ul><li>混合项目结构，所有的工程形成子包管理 <ol><li>技术栈高度统一</li><li>代码集中化管理</li></ol></li><li>代码共享、团队积累 <ol><li>工具函数共享：提升开发效率</li><li>公共业务组件共享：提升开发效率、降低特性DI、将重心放到逻辑上</li><li>公共业务逻辑共享：提升开发效率、降低特性DI、统一代码风格</li></ol></li><li>配置文件共享：eslint、prettier、stylelint、commitlint <ol><li>统一代码规范、统一代码风格</li><li>避免上库时的代码冲突</li></ol></li><li>externals <ol><li>将三方依赖的加载修改为 APP 内部加载</li><li>降低云端部署文件体积、显著提升加载速度</li></ol></li><li>示例模版项目 <ol><li>用来代替脚手架</li><li>规定项目的方方面面: 项目规范、代码规范、网络请求、数据校验、公共组件封装、安全区域的适配、日志、异常监控、dsbridge、Mock 服务</li></ol></li></ul><h3 id="_2-2-进阶" tabindex="-1">2.2 进阶 <a class="header-anchor" href="#_2-2-进阶" aria-label="Permalink to &quot;2.2 进阶&quot;">​</a></h3><ul><li>文档 <ol><li>使用 vitePress 搭建文档</li><li>MonoRepo 架构的文档</li><li>公共组件、公共逻辑、脚本工具的文档</li></ol></li><li>脚手架 <ol><li>根据项目的需求，自动生成基础结构</li><li>极大程度上统一项目的结构</li></ol></li><li>CI/CD <ol><li>自动化构建、自动化部署</li><li>自动化测试</li></ol></li><li>node 脚本工具 <ol><li>使用 node 开启 mock 服务</li><li>使用 node 编写开发阶段脚本工具、提升开发效率</li></ol></li></ul>',12)]))}const _=o(r,[["render",t]]);export{m as __pageData,_ as default};
