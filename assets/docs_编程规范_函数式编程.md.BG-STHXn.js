import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"函数式编程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/编程规范/函数式编程.md","filePath":"docs/编程规范/函数式编程.md","lastUpdated":1755742260000}'),e={name:"docs/编程规范/函数式编程.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="函数式编程" tabindex="-1">函数式编程 <a class="header-anchor" href="#函数式编程" aria-label="Permalink to &quot;函数式编程&quot;">​</a></h1><h2 id="一、一等公民的函数" tabindex="-1">一、一等公民的函数 <a class="header-anchor" href="#一、一等公民的函数" aria-label="Permalink to &quot;一、一等公民的函数&quot;">​</a></h2><ul><li>函数可以当做值来使用，当做参数、传递给变量、存进数组里面</li><li>JS 在编程过程中需要额外的关注 this 的使用，在很多情况需要使用 bind() 函数来指定 this</li></ul><h2 id="二、纯函数" tabindex="-1">二、纯函数 <a class="header-anchor" href="#二、纯函数" aria-label="Permalink to &quot;二、纯函数&quot;">​</a></h2><blockquote><p>纯函数：即相同的输入，永远会得到相同的输出，并且没有任何可观察的副作用</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// slice() 函数是纯函数，splice() 不是纯函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 不纯的</span></span>
<span class="line"><span style="color:#6A737D;">// checkAge 的结果取决于外部的变量 minimum，因为这个函数引入了外部的环境，从而增加了认知负荷</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> minimum </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 21</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> checkAge</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> minimum;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 纯的</span></span>
<span class="line"><span style="color:#6A737D;">// checkAge 的结果只有输入有关，能够保留纯粹性</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> checkAge</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> minimum </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 21</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> minimum;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_2-1-副作用" tabindex="-1">2.1 副作用 <a class="header-anchor" href="#_2-1-副作用" aria-label="Permalink to &quot;2.1 副作用&quot;">​</a></h3><blockquote><p>副作用：一切除了结果计算之外发生的事情，副作用是在计算结果的过程中，系统状态的一种变化，或者与外部世界进行的可观察的交互</p></blockquote><p>副作用可能包含：更改文件系统，数据库插入记录，发送 http 请求，可变数据，打印log，获取用户输入，DOM查询，访问系统状态</p><ul><li>副作用让一个函数变的不纯：如果函数需要和外部的事物打交道，那么无法保证相同的输入一定返回相同的输出</li><li>函数只是两种数值之间的关系：函数仅仅描述了输入到输出的映射</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 实际上结果还是需要进行计算的，只是用对象来表示一个结构清楚的映射</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> toLowerCase</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#032F62;">  &quot;A&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;B&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;C&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;D&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;d&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">toLowerCase[</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">];  </span><span style="color:#6A737D;">// &quot;a&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_2-2-追求纯函数的理由" tabindex="-1">2.2 追求纯函数的理由 <a class="header-anchor" href="#_2-2-追求纯函数的理由" aria-label="Permalink to &quot;2.2 追求纯函数的理由&quot;">​</a></h3><h4 id="_2-2-1-可缓存性" tabindex="-1">2.2.1 可缓存性 <a class="header-anchor" href="#_2-2-1-可缓存性" aria-label="Permalink to &quot;2.2.1 可缓存性&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 累加函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">of</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> number</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建缓存代理的工厂</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> memoize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 缓存结构</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> cache</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> args</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.join.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(args </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> cache) {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> cache[args]</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> cache[args] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将累加函数进行包装</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> meAdd</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> memoize</span><span style="color:#24292E;">(add)</span></span>
<span class="line"><span style="color:#6F42C1;">meAdd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 3 计算得到的</span></span>
<span class="line"><span style="color:#6F42C1;">meAdd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 3 从缓存中取得</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><ul><li>对于 HTTP 请求，我们无法缓存 HTTP 请求的结果，但是能缓存一个 HTTP 请求的函数(相同的输入，总会输出一个请求相同地址的函数)</li></ul><h4 id="_2-2-2-可移植性、自文档性" tabindex="-1">2.2.2 可移植性、自文档性 <a class="header-anchor" href="#_2-2-2-可移植性、自文档性" aria-label="Permalink to &quot;2.2.2 可移植性、自文档性&quot;">​</a></h4><ul><li>纯函数完全是自给自足的，纯函数的依赖很明确，因此更易于观察和理解</li><li>可移植性是一个强大的特性：纯函数的执行结果与环境无关，可以在任何的地方运行它(浏览器 Node web Workers)</li></ul><h4 id="_2-2-3-可测试性" tabindex="-1">2.2.3 可测试性 <a class="header-anchor" href="#_2-2-3-可测试性" aria-label="Permalink to &quot;2.2.3 可测试性&quot;">​</a></h4><ul><li>纯函数让测试更加的简单：在测试前我们不需要去伪造一个真实的环境</li></ul><h4 id="_2-2-4-合理性" tabindex="-1">2.2.4 合理性 <a class="header-anchor" href="#_2-2-4-合理性" aria-label="Permalink to &quot;2.2.4 合理性&quot;">​</a></h4><ul><li>引用透明：如果一段代码可以替换成它执行的结果，而且是在不改变整个程序行为的前提下替换的，那么我们就说这段代码是引用透明的</li></ul><h4 id="_2-2-5-并行代码" tabindex="-1">2.2.5 并行代码 <a class="header-anchor" href="#_2-2-5-并行代码" aria-label="Permalink to &quot;2.2.5 并行代码&quot;">​</a></h4><ul><li>我们可以并行运行任意纯函数，因为纯函数根本不需要访问<code>共享的内存</code>，而且根据其定义，纯函数也不会因为副作用而进入<code>竞争态</code></li><li>并行代码在 <code>JS 服务端</code> 以及使用了 <code>WEB worker 的浏览器</code> 那里是非常容易实现的，因为它们使用了线程(thead)</li></ul><h2 id="三、柯里化" tabindex="-1">三、柯里化 <a class="header-anchor" href="#三、柯里化" aria-label="Permalink to &quot;三、柯里化&quot;">​</a></h2><ul><li>柯里化(curry): 只传递给函数的一部分参数来调用它，让它返回一个函数去处理剩下的参数</li><li>优点：通过简单传递部分参数，就能动态的生成实用的新函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 从 lodash 库中导入 柯里化工具函数</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> curry </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">).curry;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;">: 返回 指定字符串 中符合 匹配条件 的自字符(柯里化函数)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">: what 匹配条件</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">: str 指定字符串</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> match </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> curry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">what</span><span style="color:#24292E;">, </span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(what);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 正常调用，匹配 &quot;hello world&quot; 中的空字符串</span></span>
<span class="line"><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// [ &#39; &#39; ]</span></span>
<span class="line"><span style="color:#6A737D;">// 柯里化调用，每次只传入部分参数</span></span>
<span class="line"><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// [ &#39; &#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ！只传入部分参数，返回值是个新的函数</span></span>
<span class="line"><span style="color:#6A737D;">// ！hasSpaces 可以被反复的使用，这是一个新的功能函数</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hasSpaces </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// function(x) { return x.match(/\\s+/g) }</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;">: 返回 指定字符串 中的空字符串</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">: str 指定字符串</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">hasSpaces</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">hasSpaces</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TianLoad&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">hasSpaces</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HHHH_UI&amp;*&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="四、代码组合" tabindex="-1">四、代码组合 <a class="header-anchor" href="#四、代码组合" aria-label="Permalink to &quot;四、代码组合&quot;">​</a></h2><ul><li>通过搭积木的方式来生成新的函数</li><li>组合像一系列管道那样把不同的函数联系在一起，数据也必须在其中流动</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 进行函数组合</span></span>
<span class="line"><span style="color:#6A737D;">// ! 函数的执行顺序按照从右往左，先 g 后 f</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> compose</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">f</span><span style="color:#24292E;">,</span><span style="color:#E36209;">g</span><span style="color:#24292E;">) {)</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#6F42C1;"> f</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">g</span><span style="color:#24292E;">(x))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字符串大写</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> toUpperCase</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字符串末尾加 ！</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> exclaim</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;!&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 组合的新函数：既能将字符串转化为大写，又能在末尾加 ！</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> shout </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> compose</span><span style="color:#24292E;">(toUpperCase, exclaim)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_4-1-特性" tabindex="-1">4.1 特性 <a class="header-anchor" href="#_4-1-特性" aria-label="Permalink to &quot;4.1 特性&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 结合律（associativity）</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> associative </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> compose</span><span style="color:#24292E;">(f, </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(g, h)) </span><span style="color:#D73A49;">==</span><span style="color:#6F42C1;"> compose</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(f, g), h);</span></span>
<span class="line"><span style="color:#6A737D;">// 既然满足结合律的特性，那么就不必写两个结合</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> associative </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> compose</span><span style="color:#24292E;">(f, g, h)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-2-优点" tabindex="-1">4.2 优点 <a class="header-anchor" href="#_4-2-优点" aria-label="Permalink to &quot;4.2 优点&quot;">​</a></h3><ul><li>代码可读性高于一大堆的函数嵌套</li><li>使得代码简单和富有可读性</li></ul>`,33)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
