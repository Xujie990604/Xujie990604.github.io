import{_ as a,c as t,o,ag as r}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"方法","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Dart/面向对象/类的方法.md","filePath":"docs/Dart/面向对象/类的方法.md","lastUpdated":1748272571000}'),d={name:"docs/Dart/面向对象/类的方法.md"};function l(i,e,s,c,n,_){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h1><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><ul><li>可以通过 operator 来重写<code>运算符</code></li></ul><h2 id="get-和-set" tabindex="-1">get 和 set <a class="header-anchor" href="#get-和-set" aria-label="Permalink to &quot;get 和 set&quot;">​</a></h2><h2 id="抽象方法" tabindex="-1">抽象方法 <a class="header-anchor" href="#抽象方法" aria-label="Permalink to &quot;抽象方法&quot;">​</a></h2><ul><li>抽象方法只能存在<code>抽象类</code>或者<code>混入</code>中</li><li>使用 <code>;</code> 代替方法体</li></ul>',6)]))}const m=a(d,[["render",l]]);export{u as __pageData,m as default};
