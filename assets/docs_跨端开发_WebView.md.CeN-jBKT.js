import{_ as i,c as a,o as l,ag as t}from"./chunks/framework.BDwTZuFy.js";const w=JSON.parse('{"title":"Webview 的介绍","description":"","frontmatter":{},"headers":[],"relativePath":"docs/跨端开发/WebView.md","filePath":"docs/跨端开发/WebView.md","lastUpdated":null}'),o={name:"docs/跨端开发/WebView.md"};function r(n,e,d,b,s,c){return l(),a("div",null,e[0]||(e[0]=[t('<h1 id="webview-的介绍" tabindex="-1">Webview 的介绍 <a class="header-anchor" href="#webview-的介绍" aria-label="Permalink to &quot;Webview 的介绍&quot;">​</a></h1><ul><li><p>Webview 是一个基于 (webkit 内核) 的 组件，可以解析 DOM 元素，进行 HTML 页面的展示。它和浏览器展示页面的原理是相同的。</p></li><li><p>WebView 用于在手机应用程序内部直接展示 HTML 页面，而不必额外去打开浏览器应用。</p></li><li><p>使用 WebView 的好处时可以不必要求用户更新APP，便可以获取到最新的页面（热更新）</p></li><li><p>运行在 WebView 中的 JS 代码是有能力调用原生的系统 API 的，没有传统浏览器沙箱的限制。</p></li></ul><h2 id="浏览器的内核" tabindex="-1">浏览器的内核 <a class="header-anchor" href="#浏览器的内核" aria-label="Permalink to &quot;浏览器的内核&quot;">​</a></h2><h3 id="pc-浏览器" tabindex="-1">PC 浏览器 <a class="header-anchor" href="#pc-浏览器" aria-label="Permalink to &quot;PC 浏览器&quot;">​</a></h3><ol><li>IE Trident(俗称 IE 内核)</li><li>FireFox Gecko(俗称 Firefox 内核)</li><li>Chrome webkit 内核-&gt; Blink 内核(统称为 Chromium 内核(Blink 内核 fork 了 Webkit 内核))</li><li>Safari Webkit 内核</li><li>Opera Presto 内核 -&gt; Webkit 内核 -&gt; Blink 内核</li></ol><ul><li>国内浏览器号称双内核，其实是 Trident 内核 + Webkit 内核。在访问不需要网上交易的网站时 使用 Webkit 内核，得到更高的性能。在访问需要网上交易的网站时，使用 Trident 内核</li></ul><h3 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h3><ul><li>移动端的浏览器内核指的是 <code>系统内置浏览器</code> 的内核</li><li>phone 和 IOS 主要使用 Webkit 内核， Android4.4 之前使用的是 Webkit 内核，Android4.4 之后系统浏览器切换到了 Chromium 内核</li></ul><h2 id="webview-和-浏览器的区别" tabindex="-1">Webview 和 浏览器的区别 <a class="header-anchor" href="#webview-和-浏览器的区别" aria-label="Permalink to &quot;Webview 和 浏览器的区别&quot;">​</a></h2><ol><li>WebView 可以在离线状态下工作，但浏览器不能</li><li>WebView 可以使用应用程序的缓存和数据，而浏览器不能</li></ol>',10)]))}const p=i(o,[["render",r]]);export{w as __pageData,p as default};
