import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"async await","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/异步方案/async、await.md","filePath":"docs/JavaScript/异步方案/async、await.md","lastUpdated":1725182996000}'),e={name:"docs/JavaScript/异步方案/async、await.md"};function o(c,s,r,t,i,y){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="async-await" tabindex="-1">async await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;async await&quot;">​</a></h1><ul><li>async 和 Generator 星号（*）的用法相近</li><li>await 和 Generator 中 yeild 的用法相近</li></ul><h2 id="一、async-和-generator-的改进" tabindex="-1">一、async 和 Generator 的改进 <a class="header-anchor" href="#一、async-和-generator-的改进" aria-label="Permalink to &quot;一、async 和 Generator 的改进&quot;">​</a></h2><ol><li>内置执行器：调用 async 函数时会自动执行，不需要 next 方法</li><li>更好的语义：async 表示包含异步操作、await 表示需要等待</li><li>更广的适用性： await 命令可以是 Promise 对象也可以是原始类型(会被 Promise.resolve() 包装)的值</li><li>返回值是 Promise: 可以进行链式调用</li></ol><h2 id="二、-async-中的错误处理" tabindex="-1">二、 async 中的错误处理 <a class="header-anchor" href="#二、-async-中的错误处理" aria-label="Permalink to &quot;二、 async 中的错误处理&quot;">​</a></h2><ul><li>async 函数中无论是 <code>await 表示式后面的状态为 reject</code> 还是<code>出现了 JS 语法错误</code>，都会使 async 函数返回 Promise 的状态变成 reject，从而进入 catch 方法回调中。并且 async 函数会终止，<code>不会向下执行</code></li></ul><h3 id="_2-1-如何防止单个-await-reject-导致整个-async-函数-reject" tabindex="-1">2.1 如何防止单个 await reject 导致整个 async 函数 reject <a class="header-anchor" href="#_2-1-如何防止单个-await-reject-导致整个-async-函数-reject" aria-label="Permalink to &quot;2.1 如何防止单个 await reject 导致整个 async 函数 reject&quot;">​</a></h3><ul><li>能用 try catch 捕获 async 函数中 await 表达式后抛出的异步错误。并且不会导致整个 async 函数变成 reject</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todo/1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;单个 await reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 单个 await reject</span></span>
<span class="line"><span style="color:#6A737D;">// async resolved</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>给 await 表达式后面的 Promise 添加 catch 方法，可以避免单个 await 错误导致整个 async 函数的终止</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">    &quot;https://jsonplaceholder.typicode.com/todo/1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;单个 await reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#6A737D;">// 单个 await reject</span></span>
<span class="line"><span style="color:#6A737D;">// undefined  因为 await 后面的 Promise 被 reject，且 catch 回调函数中没有返回值，所以 res 是 undefined</span></span>
<span class="line"><span style="color:#6A737D;">// async resolved</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="三、await-命令" tabindex="-1">三、await 命令 <a class="header-anchor" href="#三、await-命令" aria-label="Permalink to &quot;三、await 命令&quot;">​</a></h2><ul><li>await 只能在 async 的函数中使用, await 才是造成<code>阻塞</code>的实质。</li><li>JS 运行时在碰到 await 关键字时，会记录在哪里暂停执行，等到 await 右边的值可以用了，js 运行时会向消息队列中推送一个任务，这个任务会恢复异步函数的执行</li></ul><h2 id="四、并发操作" tabindex="-1">四、并发操作 <a class="header-anchor" href="#四、并发操作" aria-label="Permalink to &quot;四、并发操作&quot;">​</a></h2><ul><li>如果 async 函数中的请求不需要串行进行，可以使用以下两种方式进行优化</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、网络请求时并不进行 await, 而是在使用请求值之前进行 await</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res1Promise</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> res2Promise</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> res1 </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> await</span><span style="color:#24292E;"> res1Promise;</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> res2 </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> await</span><span style="color:#24292E;"> res2Promise;</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、使用 Promise.all() 进行并发请求(推荐使用)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">res1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">res2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> await</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#6F42C1;">    getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6F42C1;">    getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res1);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res2);</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async resolved&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;async reject&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,16)]))}const E=a(e,[["render",o]]);export{u as __pageData,E as default};
