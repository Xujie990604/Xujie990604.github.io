import{_ as a,c as l,o as n,ag as p}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"正则类型对象","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/各种类型对象/正则对象.md","filePath":"docs/JavaScript/对象&原型/各种类型对象/正则对象.md","lastUpdated":1735478813000}'),e={name:"docs/JavaScript/对象&原型/各种类型对象/正则对象.md"};function o(r,s,t,c,i,b){return n(),l("div",null,s[0]||(s[0]=[p(`<h1 id="正则类型对象" tabindex="-1">正则类型对象 <a class="header-anchor" href="#正则类型对象" aria-label="Permalink to &quot;正则类型对象&quot;">​</a></h1><h2 id="一、转义符号" tabindex="-1">一、转义符号 <a class="header-anchor" href="#一、转义符号" aria-label="Permalink to &quot;一、转义符号&quot;">​</a></h2><ul><li><p>一些特殊的字符想要输出的话，需要使用\\转义符号来输出</p></li><li><p>\\n换行</p></li><li><p>\\r是行结束</p></li><li><p>\\t是一个制表符</p></li><li><p>会把\\符号后面的所有空格转化为一个制表符</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">    &lt;div&gt;&lt;/div&gt;</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">    &lt;span&gt;&lt;/span&gt;</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">输出：    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="二、正则表达式-regexp" tabindex="-1">二、正则表达式 /RegExp/ <a class="header-anchor" href="#二、正则表达式-regexp" aria-label="Permalink to &quot;二、正则表达式 /RegExp/&quot;">​</a></h2><ul><li>var a = /abc/;的方式来创建</li><li>var a = new RegExp(&quot;/abc/&quot;);</li><li>正则表达式中的空格是有意义的</li><li>贪婪匹配原则，尽量能匹配多就不匹配少</li></ul><h3 id="_2-1-正则表达式的修饰符" tabindex="-1">2.1 正则表达式的修饰符 <a class="header-anchor" href="#_2-1-正则表达式的修饰符" aria-label="Permalink to &quot;2.1 正则表达式的修饰符&quot;">​</a></h3><ul><li>i 忽视大小写 reg = /abc/i</li><li>g 全局匹配 使用str.match(reg)的话，如果使用了g属性，会返回所有匹配的片段。reg = /abc/g</li><li>m 多行匹配 var reg = /^a/gm; var str = &quot;abddd\\na&quot; 会匹配两个a，因为开启了全局匹配和换行匹配 字符串中有换行符号 所以会匹配两个a</li></ul><h3 id="_2-2-方法" tabindex="-1">2.2 方法 <a class="header-anchor" href="#_2-2-方法" aria-label="Permalink to &quot;2.2 方法&quot;">​</a></h3><ul><li>reg.test(str) 是判断字符串中是否匹配正则表达式 返回Boolean</li><li>reg.exec(str) 使用的时候可以和reg的lastIndex属性和reg的g(全局搜索属性)相结合。exec方法每次执行都会更新lastIndex属性值</li><li>str.match(reg)会返回字符串中匹配正则的字段，可以有多个。</li><li>str.replace(reg,&#39;want&#39;)使用字符串的这个方法可以用来替换字符。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /-(</span><span style="color:#005CC5;">\\w</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;the-first-name&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">    // 使用str的replace方法的时候可以自定义想要替换的内容，而不是非要固定的字符串。需要在函数中传入参数。$代表正则匹配的全局，$1代表正则表达式中的第一个子表达式(\\w)</span></span>
<span class="line"><span style="color:#24292E;">    b.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(a,</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$</span><span style="color:#24292E;">,</span><span style="color:#E36209;">$1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> $1.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }); </span><span style="color:#6A737D;">//theFirstName</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-3-表达式" tabindex="-1">2.3 表达式 [] () <a class="header-anchor" href="#_2-3-表达式" aria-label="Permalink to &quot;2.3 表达式 [] ()&quot;">​</a></h3><ul><li>reg = /[1234567890][1234567890][1234567890]/; 匹配字符串中有没有三个连着的数字</li><li>[0-9][A-Z][a-z][A-z] 这个是匹配区间</li><li>[^a]的意思是非a,^符号写在表达式外面是以什么为开头，写在表达式里面是非的意思</li><li>(jpg|png) ()中的不是范围而是固定的搭配 | 是或者的意思</li></ul><h3 id="_2-4-元字符" tabindex="-1">2.4 元字符 <a class="header-anchor" href="#_2-4-元字符" aria-label="Permalink to &quot;2.4 元字符&quot;">​</a></h3><ul><li><p>\\w === [0-9A-z_]</p></li><li><p>\\W === [^\\w]</p></li><li><p>\\d === [0-9]</p></li><li><p>\\D === [^\\d]</p></li><li><p>\\s === [\\n\\f\\r\\t\\v&#39;这里还有一个空格&#39;] \\n换行符 \\f换页符 \\r回车符 \\t制表符 \\v垂直制表符。并不是说在字符串中有一个手打的制表符就会匹配，而是会匹配字符串中的\\n转义字符</p></li><li><p>\\S === [^\\s]</p></li><li><p>\\b === 单词边界 var str = &quot;|abc| |def|&quot;; |的位置表示单词边界,单词边界不是一个空格，是代表的位置。</p></li><li><p>. === [^\\r\\n] 除了回车符和换行符都能匹配</p></li><li><p>正则表达式中可以使用unicode编码。</p></li><li><p>[\\w\\W]代表的是匹配所有</p></li><li><p>正向预查和正向断言(不参与选择，只参与修饰)</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /a(?=b)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//选择那些在a的后面有b的</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;abaaaa&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    b.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(a) </span><span style="color:#6A737D;">//[&#39;a&#39;]   只有一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /a(</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">！b)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//选择那些在a的后面没有b的</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;abaaaa&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    b.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(a) </span><span style="color:#6A737D;">//[&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;]   有四个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-5-量词-用来修饰元字符或者表达式" tabindex="-1">2.5 量词 用来修饰元字符或者表达式 <a class="header-anchor" href="#_2-5-量词-用来修饰元字符或者表达式" aria-label="Permalink to &quot;2.5 量词 用来修饰元字符或者表达式&quot;">​</a></h3><ul><li><code>+</code> 是可以出现一次到无数次</li><li><code>*</code> 是可以出现0次到无数次</li><li><code>?</code> 是可以出现零到一次</li><li><code>{X}</code> 是可以出现x次</li><li><code>{X,Y}</code> 是可以出现X到Y次</li><li><code>{X,}</code> 是可以出现X到无数次</li><li>在量词的后面加上一个<code>?</code>代表的是非贪婪匹配，能取少的就不取多的 <code>{2,3}?</code>的意思就是能取两个就不取三个</li></ul><h3 id="_2-6-子表达式" tabindex="-1">2.6 子表达式 () <a class="header-anchor" href="#_2-6-子表达式" aria-label="Permalink to &quot;2.6 子表达式 ()&quot;">​</a></h3><ul><li>如果想要匹配aabb的格式，需要使用到子表达式()和\\1</li><li>reg = /(\\w)\\1\\1\\1/ 就是匹配字母的aaaa形式</li><li>reg = /(\\w)\\1(\\w)\\2/ 就是匹配字母的aabb的形式</li><li>使用exec的方法来进行匹配检测的话。输出的数组中会有同子表达式匹配的数据</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\w</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\w</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">\\2</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;aabb&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(a)); </span><span style="color:#6A737D;">//[&quot;aabb&quot;]</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(b));  </span><span style="color:#6A737D;">//index.html:25 (3) [&quot;aabb&quot;, &quot;a&quot;, &quot;b&quot;, index: 0, input: &quot;aabb&quot;, groups: undefined]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-7-开头符和结尾符" tabindex="-1">2.7 开头符和结尾符 <a class="header-anchor" href="#_2-7-开头符和结尾符" aria-label="Permalink to &quot;2.7 开头符和结尾符&quot;">​</a></h3><ul><li>^n 以什么为开头</li><li>n$ 以什么为结尾</li></ul><h2 id="三、典例" tabindex="-1">三、典例 <a class="header-anchor" href="#三、典例" aria-label="Permalink to &quot;三、典例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg  </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\w</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">\\1*</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;aaaaaaaaaabbbbbbbbbbbbbbbbbccc&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(reg,</span><span style="color:#032F62;">&quot;$1&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//abc 会把所有字母出现了两个及其以上的替换为一个与之匹配的子表达式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,25)]))}const u=a(e,[["render",o]]);export{d as __pageData,u as default};
