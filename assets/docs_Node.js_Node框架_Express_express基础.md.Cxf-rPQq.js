import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"express 基础","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Node.js/Node框架/Express/express基础.md","filePath":"docs/Node.js/Node框架/Express/express基础.md","lastUpdated":1738895815000}'),e={name:"docs/Node.js/Node框架/Express/express基础.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="express-基础" tabindex="-1">express 基础 <a class="header-anchor" href="#express-基础" aria-label="Permalink to &quot;express 基础&quot;">​</a></h1><ul><li>express xxx 创建项目</li><li>Express 是一个三方的用来创建 Web 服务器的模块(基于 node 内置的 http 模块进一步封装的)</li></ul><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> express</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;express&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> path</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> app</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> express</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用 express.static(&#39;public&#39;)方法， 快速的对外提供静态资源</span></span>
<span class="line"><span style="color:#6A737D;">// 注意: 如果要托管多个静态文件，就要多次调用express.static(&#39;public&#39;),文件夹的优先级和文件夹的调用顺序一致</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;/dist&quot;</span><span style="color:#24292E;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 挂载路径前缀</span></span>
<span class="line"><span style="color:#6A737D;">// 需要在 URL 地址中加入 &#39;public&#39; 前缀才能访问 &quot;clock&quot; 目录中的文件</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/public&quot;</span><span style="color:#24292E;">, express.</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;/clock&quot;</span><span style="color:#24292E;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 listen 方法启动Web服务器，并配置指定端口</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;创建web服务器&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 get 方法用于 监听 客户端对应的get请求</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // res.send()用来向客户端响应数据</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">, gender: </span><span style="color:#032F62;">&quot;男&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 以 JSON 格式进行返回</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 返回状态码</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 post 方法用于 监听 客户端对应的 post 请求</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;得到post请求&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 req.query 可以获取到客户端发送过来的 查询参数(?name=&quot;xxx&quot;&amp;age=111)</span></span>
<span class="line"><span style="color:#6A737D;">// 注意: 默认情况下，req.query 是一个空对象</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(req.query);</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(req.query);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 req.params 来获取 URL 中的通过: 动态匹配的参数值</span></span>
<span class="line"><span style="color:#6A737D;">// 注意: 默认情况下，req.params 是一个空对象</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/:id&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(req.params);</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(req.params);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="覆盖-express-api" tabindex="-1">覆盖 express API <a class="header-anchor" href="#覆盖-express-api" aria-label="Permalink to &quot;覆盖 express API&quot;">​</a></h2><ol><li>全局的原型 express.response express.request</li><li>特定应用程序的原型 app.response app.request</li></ol><ul><li>可以通过原型来自定义一些属性，方法。或者覆盖原来的属性方法</li><li>req.baseUrl req.originalUrl 等方法是在当前请求-响应周期上动态分配的，因此使用原型的方式无法修改</li></ul>`,7)]))}const E=n(e,[["render",o]]);export{b as __pageData,E as default};
