import{_ as l,c as s,o as e,ag as n}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"C 语言的编程语句","description":"","frontmatter":{},"headers":[],"relativePath":"docs/C/语句/程序语句.md","filePath":"docs/C/语句/程序语句.md","lastUpdated":1736672901000}'),i={name:"docs/C/语句/程序语句.md"};function o(r,a,t,p,c,d){return e(),s("div",null,a[0]||(a[0]=[n(`<h1 id="c-语言的编程语句" tabindex="-1">C 语言的编程语句 <a class="header-anchor" href="#c-语言的编程语句" aria-label="Permalink to &quot;C 语言的编程语句&quot;">​</a></h1><h2 id="除号" tabindex="-1">/ 除号 <a class="header-anchor" href="#除号" aria-label="Permalink to &quot;/ 除号&quot;">​</a></h2><ul><li>整数类型 / 整数类型 得到的结果只会是一个整数类型，会舍掉小数点</li><li>浮点数类型 / 浮点数类型 得到的结果有小数</li></ul><h2 id="别名" tabindex="-1">别名 <a class="header-anchor" href="#别名" aria-label="Permalink to &quot;别名&quot;">​</a></h2><ul><li>typedef double real;</li><li>real 就是 double 的别名</li></ul><h2 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h2><ul><li>表达式由运算符和运算对象组成，最简单的表达式是不带运算符的一个常量或者变量</li><li>C 语言中每个表达式都有一个值</li></ul><h2 id="副作用" tabindex="-1">副作用 <a class="header-anchor" href="#副作用" aria-label="Permalink to &quot;副作用&quot;">​</a></h2><ul><li>副作用是对数据对象或者文件的修改</li></ul><h2 id="序列点" tabindex="-1">序列点 <a class="header-anchor" href="#序列点" aria-label="Permalink to &quot;序列点&quot;">​</a></h2><ul><li>序列点是程序执行的点，在该点上，所有的副作用都在进入下一步之前发生。</li><li>语句的分号标记了一个序列点，任何一个完整的表达式的结束也是一个序列点(完整表达式指的是：不是另一个更大表达式的子表达式)</li><li><code>y = (4 + x++) + (6 + x++);</code> 4 + x++ 并不是一个完成的表达式，所以 C 语言无法保证 x 在子表达式 4 + x++ 求值之后立刻递增 x。C 语言只能保证在执行下一句语句之前递增 x 两次。因此这种写法要避免</li></ul><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><ul><li>在表达式中一般都是由较小类型转换为较大类型（升级） <code>long double、double、float、unsigned long long、long long、unsigned long、long、unsigned int、int、short、char</code></li><li>在赋值语句中，计算的结果会被转换成被赋值变量的类型(可能会升级，也可能会降级。一般来说升级不会造成什么问题，降级会引发严重的错误)</li></ul><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><ul><li><code>(type)variable</code> int a = (int)1.5</li></ul><h2 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h2><h3 id="while-循环" tabindex="-1">while 循环 <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;while 循环&quot;">​</a></h3><ul><li>入口循环：满足条件才能进入到循环中</li></ul><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(expression) {</span></span>
<span class="line"><span style="color:#24292E;">  ......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h3><ul><li>for 循环的好处是能把数据的初始化，判断条件，判断条件的变化三个部分放到一起</li><li>for 循环可以和逗号运算符一起使用，逗号运算符是一个序列点，所以逗号左侧项的所有副作用都在程序执行逗号右侧项之前发生</li><li>逗号运算符把两个表达式连接成一个表达式，并保证最左边的表达式最先求值。整个逗号表达式的值是逗号右侧表达式的值。</li></ul><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="do-while-循环" tabindex="-1">do while 循环 <a class="header-anchor" href="#do-while-循环" aria-label="Permalink to &quot;do while 循环&quot;">​</a></h3><ul><li>无论测试条件是什么，循环体的内容至少会被执行一次</li><li>出口循环：不满足条件才会退出循环</li></ul><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(expression)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="if-语句" tabindex="-1">if 语句 <a class="header-anchor" href="#if-语句" aria-label="Permalink to &quot;if 语句&quot;">​</a></h2><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(expression) {</span></span>
<span class="line"><span style="color:#24292E;">  statement;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,27)]))}const b=l(i,[["render",o]]);export{h as __pageData,b as default};
