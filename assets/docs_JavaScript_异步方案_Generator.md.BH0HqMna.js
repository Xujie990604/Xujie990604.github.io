import{_ as n,c as a,o as e,ag as l}from"./chunks/framework.BDwTZuFy.js";const y=JSON.parse('{"title":"Generator","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/异步方案/Generator.md","filePath":"docs/JavaScript/异步方案/Generator.md","lastUpdated":1725182996000}'),o={name:"docs/JavaScript/异步方案/Generator.md"};function p(r,s,t,c,i,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;Generator&quot;">​</a></h1><ul><li>Generator 函数是 ES6 提供的一种异步编程解决方案。</li></ul><h2 id="一、基本用法" tabindex="-1">一、基本用法 <a class="header-anchor" href="#一、基本用法" aria-label="Permalink to &quot;一、基本用法&quot;">​</a></h2><ol><li>Generator 函数的返回值是一个遍历器对象，可以依次遍历该函数内部的每一个表达式。</li><li>Generator 函数是<code>分段执行</code>的， <code>yield</code> 表达式是暂停执行的标记，而 <code>next</code> 方法可以恢复执行</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#6F42C1;"> helloWord</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  yield</span><span style="color:#032F62;"> &#39;hello&#39;</span></span>
<span class="line"><span style="color:#D73A49;">  yield</span><span style="color:#032F62;"> &#39;word&#39;</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#032F62;"> &#39;ending&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> hw</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> helloWord</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// 遍历器对象</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {value: &quot;hello&quot;, done: false}</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {value: &quot;word&quot;, done: false}</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {value: &quot;ending&quot;, done: true} </span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {value: &quot;ending&quot;, done: true}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,5)]))}const b=n(o,[["render",p]]);export{y as __pageData,b as default};
