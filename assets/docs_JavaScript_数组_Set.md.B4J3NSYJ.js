import{_ as s,c as e,o as l,ag as n}from"./chunks/framework.BDwTZuFy.js";const S=JSON.parse('{"title":"Set","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/数组/Set.md","filePath":"docs/JavaScript/数组/Set.md","lastUpdated":1712646874000}'),t={name:"docs/JavaScript/数组/Set.md"};function o(p,a,r,i,c,d){return l(),e("div",null,a[0]||(a[0]=[n(`<h1 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h1><ul><li>类似于数组，但是成员都是唯一的，没有重复的值。</li><li>Set 使用了 SameValueZero 相等性比较算法</li></ul><h2 id="一、set-的属性和方法" tabindex="-1">一、Set 的属性和方法 <a class="header-anchor" href="#一、set-的属性和方法" aria-label="Permalink to &quot;一、Set 的属性和方法&quot;">​</a></h2><ol><li>size: 返回 Set 实例的成员总数。</li><li>add(value): 添加某个值，返回 Set 结构本身。支持链式调用</li><li>delete(value): 删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value): 返回一个布尔值，表示该值是否为 Set 的成员。</li><li>clear(): 清除所有成员，没有返回值。</li></ol><h2 id="二、遍历" tabindex="-1">二、遍历 <a class="header-anchor" href="#二、遍历" aria-label="Permalink to &quot;二、遍历&quot;">​</a></h2><ul><li>Set 会维护值插入时的顺序，因此支持按顺序迭代。Set 的<code>键名等于键值</code></li></ul><ol><li>keys()：返回键名的遍历器</li><li>values()：返回键值的遍历器</li><li>entries()：返回键值对的遍历器</li><li>forEach()：使用回调函数遍历每个成员</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// set 默认的遍历器函数是 values 方法</span></span>
<span class="line"><span style="color:#005CC5;">Set</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">[Symbol.iterator] </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> Set</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.values;</span></span>
<span class="line"><span style="color:#6A737D;">// 可以省略 values() 方法，直接使用 for of 遍历 Set</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> set) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="三、weakset" tabindex="-1">三、WeakSet <a class="header-anchor" href="#三、weakset" aria-label="Permalink to &quot;三、WeakSet&quot;">​</a></h2><ul><li>WeakSet 集合中的值是弱引用，不影响垃圾回收器的工作，如果一个引用类型值除了被 WeakSet 当做值之外没有其他的地方引用它，那这个引用类型值会被回收</li></ul>`,10)]))}const y=s(t,[["render",o]]);export{S as __pageData,y as default};
