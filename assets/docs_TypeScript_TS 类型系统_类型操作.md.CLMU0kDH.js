import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"类型操作","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS 类型系统/类型操作.md","filePath":"docs/TypeScript/TS 类型系统/类型操作.md","lastUpdated":1722758955000}'),p={name:"docs/TypeScript/TS 类型系统/类型操作.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="类型操作" tabindex="-1">类型操作 <a class="header-anchor" href="#类型操作" aria-label="Permalink to &quot;类型操作&quot;">​</a></h1><h2 id="一、keyof" tabindex="-1">一、keyof <a class="header-anchor" href="#一、keyof" aria-label="Permalink to &quot;一、keyof&quot;">​</a></h2><ul><li>keyof 操作符可以用于获取某种<code>类型</code>的所有键，其返回类型是联合类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  sex</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> PersonKeys</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> keyof</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// &quot;name&quot; | &quot;age&quot; | &quot;sex&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="二、typeof-操作符" tabindex="-1">二、typeof 操作符 <a class="header-anchor" href="#二、typeof-操作符" aria-label="Permalink to &quot;二、typeof 操作符&quot;">​</a></h2><ul><li>在类型上下文中获取<code>变量</code>或者<code>属性</code>的类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;CJ&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Person</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> p;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Person</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="三-索引类型" tabindex="-1">三 索引类型 <a class="header-anchor" href="#三-索引类型" aria-label="Permalink to &quot;三 索引类型&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Person</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  sex</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> boolean</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> T1</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">//type T1 =  number</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> T2</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#D73A49;"> |</span><span style="color:#032F62;"> &quot;name&quot;</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">//type T2 = number | string</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> T3</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">keyof</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">//type T3 = number | string | boolean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="四、条件类型" tabindex="-1">四、条件类型 <a class="header-anchor" href="#四、条件类型" aria-label="Permalink to &quot;四、条件类型&quot;">​</a></h2><h2 id="五、映射类型" tabindex="-1">五、映射类型 <a class="header-anchor" href="#五、映射类型" aria-label="Permalink to &quot;五、映射类型&quot;">​</a></h2><h2 id="六、模版字面类型" tabindex="-1">六、模版字面类型 <a class="header-anchor" href="#六、模版字面类型" aria-label="Permalink to &quot;六、模版字面类型&quot;">​</a></h2>`,12)]))}const d=n(p,[["render",o]]);export{u as __pageData,d as default};
