import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const e="/assets/Vue%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.CVgyu4sF.png",o="/assets/%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%94%B6%E9%9B%86.BPvaqe90.jpg",t="/assets/%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0.pmbKbQsF.jpg",c="/assets/%E6%94%B9%E5%8F%98%E5%88%97%E8%A1%A8%E6%95%B0%E5%80%BC%E5%89%8D.CPgH8q_I.jpg",r="/assets/%E6%94%B9%E5%8F%98%E5%88%97%E8%A1%A8%E6%95%B0%E5%80%BC%E5%90%8E.B1hJ-HTD.jpg",i="/assets/%E6%94%B9%E5%8F%98%E6%95%B0%E6%8D%AE%E5%89%8D%E5%85%89%E6%A0%87.L7Nh7aGX.jpg",y="/assets/%E6%94%B9%E5%8F%98%E6%95%B0%E6%8D%AE%E5%90%8E%E5%85%89%E6%A0%87.D3nMTkNq.jpg",u="/assets/Vue%E7%9A%84key%E5%80%BC.DENDpoSd.png",D=JSON.parse('{"title":"Vue 的页面渲染","description":"","frontmatter":{},"headers":[],"relativePath":"docs/技术文档总结/Vue框架/Vue的页面渲染与页面更新.md","filePath":"docs/技术文档总结/Vue框架/Vue的页面渲染与页面更新.md","lastUpdated":1735106652000}'),b={name:"docs/技术文档总结/Vue框架/Vue的页面渲染与页面更新.md"};function E(d,s,m,h,q,C){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="vue-的页面渲染" tabindex="-1">Vue 的页面渲染 <a class="header-anchor" href="#vue-的页面渲染" aria-label="Permalink to &quot;Vue 的页面渲染&quot;">​</a></h1><h2 id="一、vue-中的相关概念" tabindex="-1">一、Vue 中的相关概念 <a class="header-anchor" href="#一、vue-中的相关概念" aria-label="Permalink to &quot;一、Vue 中的相关概念&quot;">​</a></h2><p><img src="'+e+`" alt="Vue虚拟DOM的示意图"></p><h3 id="_1-1-状态" tabindex="-1">1.1 状态 <a class="header-anchor" href="#_1-1-状态" aria-label="Permalink to &quot;1.1 状态&quot;">​</a></h3><ul><li>开发者定义和操作的数据</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> isShow</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;no One&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> userList</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> reactive</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> handleClickName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">  alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;click name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_1-2-模板" tabindex="-1">1.2 模板 <a class="header-anchor" href="#_1-2-模板" aria-label="Permalink to &quot;1.2 模板&quot;">​</a></h3><ul><li>开发者使用模板来<code>声明式的描述</code>状态与 DOM 间的映射关系</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;vue-test&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#6F42C1;"> v-if</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;isShow&quot;</span><span style="color:#6F42C1;"> @click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;handleClickName&quot;</span><span style="color:#24292E;">&gt; {{ name + &#39; org&#39; }} &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">li</span><span style="color:#6F42C1;"> v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item in userList&quot;</span><span style="color:#6F42C1;"> :key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;">&gt;{{ item }}&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-3-渲染函数" tabindex="-1">1.3 渲染函数 <a class="header-anchor" href="#_1-3-渲染函数" aria-label="Permalink to &quot;1.3 渲染函数&quot;">​</a></h3><ul><li>Vue 通过编译将 template 模板转换为渲染函数(render)，执行渲染函数就能够得到 Virtual DOM。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Render 函数中也包含状态和 DOM 之间的映射关系</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> _sfc_render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$props</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$setup</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$data</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#6F42C1;">    _openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#6F42C1;">    _createElementBlock</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, _hoisted_1, [</span></span>
<span class="line"><span style="color:#24292E;">      $setup.isShow</span></span>
<span class="line"><span style="color:#D73A49;">        ?</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">_openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#6F42C1;">          _createElementBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">            &quot;span&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              key: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              onClick: $setup.handleClickName,</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#6F42C1;">            _toDisplayString</span><span style="color:#24292E;">($setup.name </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot; org&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#005CC5;">            1</span></span>
<span class="line"><span style="color:#6A737D;">            /* TEXT */</span></span>
<span class="line"><span style="color:#24292E;">          ))</span></span>
<span class="line"><span style="color:#D73A49;">        :</span><span style="color:#6F42C1;"> _createCommentVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;v-if&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6F42C1;">      _createElementVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ul&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#6F42C1;">_openBlock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6F42C1;">        _createElementBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          _Fragment,</span></span>
<span class="line"><span style="color:#005CC5;">          null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">          _renderList</span><span style="color:#24292E;">($setup.userList, (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">            return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#6F42C1;">              _openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#6F42C1;">              _createElementBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#032F62;">                &quot;li&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                { key: item },</span></span>
<span class="line"><span style="color:#6F42C1;">                _toDisplayString</span><span style="color:#24292E;">(item),</span></span>
<span class="line"><span style="color:#005CC5;">                1</span></span>
<span class="line"><span style="color:#6A737D;">                /* TEXT */</span></span>
<span class="line"><span style="color:#24292E;">              )</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">          }),</span></span>
<span class="line"><span style="color:#005CC5;">          128</span></span>
<span class="line"><span style="color:#6A737D;">          /* KEYED_FRAGMENT */</span></span>
<span class="line"><span style="color:#24292E;">        )),</span></span>
<span class="line"><span style="color:#24292E;">      ]),</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h3 id="_1-4-虚拟-dom-结点" tabindex="-1">1.4 虚拟 DOM 结点 <a class="header-anchor" href="#_1-4-虚拟-dom-结点" aria-label="Permalink to &quot;1.4 虚拟 DOM 结点&quot;">​</a></h3><ul><li>Render 函数的执行会生成 VNode</li><li>本质上就是 JS 对象，对象描述了应该怎样去创建真实的 DOM 结点。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 该虚拟 DOM 结构是简化版，只展示了重点信息</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">  type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    class</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vue-test&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  children</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&quot;span&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      props: {</span></span>
<span class="line"><span style="color:#24292E;">        key: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        onClick: handleClickName</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      children: </span><span style="color:#032F62;">&quot;no One org&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&quot;ul&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      children:[</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          props: {</span></span>
<span class="line"><span style="color:#24292E;">            key: </span><span style="color:#032F62;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">          children: </span><span style="color:#032F62;">&quot;foo&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#D73A49;">        ...</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_1-5-patch-算法" tabindex="-1">1.5 patch 算法 <a class="header-anchor" href="#_1-5-patch-算法" aria-label="Permalink to &quot;1.5 patch 算法&quot;">​</a></h3><ul><li>最终目的是将 VNode 渲染成真实的 DOM</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 页面的渲染并不是什么高级的黑魔法，本质上调用的也还是 DOM API</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(VNode.type);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_1-diff-算法" tabindex="-1">(1) diff 算法 <a class="header-anchor" href="#_1-diff-算法" aria-label="Permalink to &quot;(1) diff 算法&quot;">​</a></h4><ul><li>渲染过程中的一种优化方案。使得 Vue 可以不必暴力绘制全部的 DOM 结点。而是通过对比新旧 VNode 的不同, 仅对差异点进行更新</li></ul><h2 id="二、视图层框架的范式" tabindex="-1">二、视图层框架的范式 <a class="header-anchor" href="#二、视图层框架的范式" aria-label="Permalink to &quot;二、视图层框架的范式&quot;">​</a></h2><h3 id="_2-1-命令式范式" tabindex="-1">2.1 命令式范式 <a class="header-anchor" href="#_2-1-命令式范式" aria-label="Permalink to &quot;2.1 命令式范式&quot;">​</a></h3><ul><li>JQ 是典型的命令式框架, 命令式框架<code>关注过程</code></li></ul><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span>01 - 获取 id 为 app 的 div 标签</span></span>
<span class="line"><span>02 - 它的文本内容为 hello world</span></span>
<span class="line"><span>03 - 为其绑定点击事件</span></span>
<span class="line"><span>04 - 当点击时弹出提示：ok</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>翻译成对应的代码，自然语言能够和代码产生<code>一一对应</code>的关系</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">01</span><span style="color:#6F42C1;"> $</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 获取 div</span></span>
<span class="line"><span style="color:#005CC5;">02</span><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 设置文本内容</span></span>
<span class="line"><span style="color:#005CC5;">03</span><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ok&#39;</span><span style="color:#24292E;">) }) </span><span style="color:#6A737D;">// 绑定点击事件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-2-声明式范式" tabindex="-1">2.2 声明式范式 <a class="header-anchor" href="#_2-2-声明式范式" aria-label="Permalink to &quot;2.2 声明式范式&quot;">​</a></h3><ul><li>Vue 是典型的声明式框架，声明式框架关注<code>结果</code>。实现该结果的过程由 Vue 完成</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 采用 Vue3 语法作为示例</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#B31D28;font-style:italic;"> @click=&quot;()</span><span style="color:#B31D28;font-style:italic;"> =&gt;</span><span style="color:#B31D28;font-style:italic;"> alert(&#39;ok&#39;)&quot;&gt;{{</span><span style="color:#6F42C1;"> text</span><span style="color:#B31D28;font-style:italic;"> }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">const</span><span style="color:#6F42C1;"> text</span><span style="color:#B31D28;font-style:italic;"> =</span><span style="color:#B31D28;font-style:italic;"> ref(&#39;hello</span><span style="color:#B31D28;font-style:italic;"> world&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>Vue 框架借用虚拟 DOM + diff 算法来实现声明式，虚拟 DOM 不等同于声明式，只是一种达到目的的手段</p></li><li><p>Solid.js、Svelte.js 框架同样都是声明式框架，但都不是通过虚拟 DOM 的方式来实现的</p></li></ul><h3 id="_2-3-不同范式下更新内容" tabindex="-1">2.3 不同范式下更新内容 <a class="header-anchor" href="#_2-3-不同范式下更新内容" aria-label="Permalink to &quot;2.3 不同范式下更新内容&quot;">​</a></h3><h4 id="_1-命令式" tabindex="-1">(1)命令式 <a class="header-anchor" href="#_1-命令式" aria-label="Permalink to &quot;(1)命令式&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、开发者书写代码</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#app&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;no One&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、JQ 框架执行过程</span></span>
<span class="line"><span style="color:#24292E;">div.textContent </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;no One&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-声明式" tabindex="-1">(2) 声明式 <a class="header-anchor" href="#_2-声明式" aria-label="Permalink to &quot;(2) 声明式&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、开发者书写代码</span></span>
<span class="line"><span style="color:#24292E;">text.value </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;no One&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、Vue 框架执行过程</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 通过 diff 算法得到本次更新的差异</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 调用原生方法来更新变化的内容</span></span>
<span class="line"><span style="color:#24292E;">div.textContent </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;no One&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>声明式代码的性能不优于命令式代码的性能</p></blockquote><ul><li>假设直接修改的性能消耗为 A，找出差异的性能消耗为 B</li></ul><ol><li>命令式更新的性能消耗：A</li><li>声明式更新的性能消耗：B + A</li></ol><ul><li>声明式代码更新的性能<code>理论上</code>不会好于命令式代码更新(<code>此处的命令式代码更新指的是极致优化的情况下</code>)，因为声明式会<code>多一次查找差异</code>的过程。</li></ul><h2 id="三、虚拟-dom-性能真的好吗" tabindex="-1">三、虚拟 DOM 性能真的好吗？ <a class="header-anchor" href="#三、虚拟-dom-性能真的好吗" aria-label="Permalink to &quot;三、虚拟 DOM 性能真的好吗？&quot;">​</a></h2><h3 id="_1-操作-dom-的代价是昂贵的" tabindex="-1">(1) 操作 DOM 的代价是昂贵的 <a class="header-anchor" href="#_1-操作-dom-的代价是昂贵的" aria-label="Permalink to &quot;(1) 操作 DOM 的代价是昂贵的&quot;">​</a></h3><p>操作对象:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> app</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;操作对象&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 10000</span><span style="color:#24292E;">; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> div</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { tag: </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, class: </span><span style="color:#032F62;">&quot;child&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(div);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;操作对象&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 操作对象: 0.265869140625 ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>操作 DOM:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> app</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#app&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;操作DOM&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 10000</span><span style="color:#24292E;">; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> div</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  div.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;child&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(div);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;操作DOM&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 操作DOM: 6.808837890625 ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p><code>操作 DOM 的代价是昂贵的!</code>, 操作 JS 与操作 DOM 的时间相差了 25 倍</p></blockquote><h3 id="_2-场景分析" tabindex="-1">(2) 场景分析 <a class="header-anchor" href="#_2-场景分析" aria-label="Permalink to &quot;(2) 场景分析&quot;">​</a></h3><p>假设场景: 一个列表中有 100 条数据，在进行一次操作之后需要删除前 10 条数据，末尾添加 10 条数据。</p><p><code>1.命令式写法（直接操作DOM、不使用优化手段）：</code>: 直接将最新的 100 条数据进行循环渲染。</p><ul><li>耗费性能: 删除 100 个 DOM, 添加 100 个 DOM</li><li>编码难易: 虽然需要操作 DOM，但是操作手段简单粗暴。不需要考虑 DOM 的变化点</li></ul><p><code>2.声明式写法（借用虚拟 DOM、diff 算法）</code>: 先查找差异，再针对变化的部分进行渲染</p><ul><li>耗费性能: 删除 10 个 DOM, 添加 10 个 DOM， 加上寻找差异的时间</li><li>编码难易: 声明式的代码，不需要操作 DOM，编码简单，程序的可维护性高</li></ul><p><code>3.命令式写法(直接操作DOM、极致的优化手段):</code> 开发者要明确 DOM 的变化。手动对需要变动的地执行方 DOM 操作</p><ul><li>耗费性能: 删除 10 个 DOM, 添加 10 个 DOM</li><li>编码难易: 需要明确 DOM 的变化点, 需要手动进行大量 DOM 操作。程序可维护性差。</li></ul><h3 id="_3-结论" tabindex="-1">(3) 结论 <a class="header-anchor" href="#_3-结论" aria-label="Permalink to &quot;(3) 结论&quot;">​</a></h3><ul><li>命令式代码(极致优化下)：性能最好、但是难以维护、开发效率低(手动实现创建、更新、删除等工作)</li><li>声明式代码： 容易维护、开发效率高、<code>相对不错的性能</code></li><li>权衡的艺术 - 在真实的业务场景中 DOM 会是更加复杂的树形结构(不仅 DOM 节点是树形的，节点下的属性也是树形的)。大部分情况下，开发者<code>很难写出绝对优化的命令式代码(1、需要学习高效操作 DOM 的知识 2、需要明确 DOM 的变化点)</code>。即使写出了极致优化的代码也一定会耗费巨大精力，投入产出比并不高。借用虚拟 DOM + diff 来更新页面，能保证开发者既能享受到声明式代码的便利之处和可维护性，又能得到一个相对不错的性能。</li></ul><h2 id="三、页面渲染" tabindex="-1">三、页面渲染 <a class="header-anchor" href="#三、页面渲染" aria-label="Permalink to &quot;三、页面渲染&quot;">​</a></h2><h3 id="_3-1-页面初始绘制" tabindex="-1">3.1 页面初始绘制 <a class="header-anchor" href="#_3-1-页面初始绘制" aria-label="Permalink to &quot;3.1 页面初始绘制&quot;">​</a></h3><ul><li>页面的首次渲染比较简单，仅需要按照 VNode 的结构创建新的 DOM，并挂载到真实结点上即可</li></ul><h3 id="_3-2-页面的更新" tabindex="-1">3.2 页面的更新 <a class="header-anchor" href="#_3-2-页面的更新" aria-label="Permalink to &quot;3.2 页面的更新&quot;">​</a></h3><p>通常，在运行时应用内部的状态会不断发生变化，此时需要不停地重新渲染。Vue 如何知道有哪些 DOM 结构需要被重新渲染？如何去更新 DOM 结构。</p><p>使用<code>数据代理</code>的方式来解决这个问题。</p><ol><li>读取响应式数据时，使用数组收集对应的副作用函数</li><li>设置响应式数据时，逐个触发数组中所有的副作用函数</li></ol><h4 id="_1-更新粒度" tabindex="-1">(1) 更新粒度 <a class="header-anchor" href="#_1-更新粒度" aria-label="Permalink to &quot;(1) 更新粒度&quot;">​</a></h4><blockquote><p>Vue 组件保持状态和 DOM 同步的方式：每个组件实例创建一个响应式副作用来渲染和更新 DOM</p></blockquote><ul><li>Vue 更新的粒度为 <code>中粒度</code>。即一个 template 中使用的响应式数据所绑定的副作用并不是具体的 DOM 结点也不是整个网页。而是一个组件，当状态发生变化后会通知组件进行更新</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;vue-test&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">handleClickName</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {{ name </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot; org&quot;</span><span style="color:#24292E;"> }} // 模版中使用响应式数据</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, effect } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 一、定义响应式数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;no One&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 二、为响应式数据注册副作用函数</span></span>
<span class="line"><span style="color:#6F42C1;">effect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, name);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 三、更改响应式数据，从而触发副作用函数执行</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> handleClickName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  name.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name.value </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><img src="`+o+'" alt="副作用函数的收集"></p><ul><li>name 对应的 deps 数组中一共有两个副作用函数</li></ul><ol><li>模版中使用 name, 自动注册的组件更新副作用函数</li><li>使用 effect 注册的自定义副作用函数</li></ol><p><img src="'+t+`" alt="组件更新副作用函数"></p><ol><li>在 componentUpdateFn 函数中打断点</li><li>触发 handleClickName 方法从而触发 name 的更新</li><li>name 的每次更新都会调用一次当前组件更新的副作用函数</li></ol><h4 id="_2-react-和-vue-页面更新对比" tabindex="-1">(2) React 和 Vue 页面更新对比 <a class="header-anchor" href="#_2-react-和-vue-页面更新对比" aria-label="Permalink to &quot;(2) React 和 Vue 页面更新对比&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ msg }}</span></span>
<span class="line"><span style="color:#24292E;">    // ChildComponent 中未用到 msg 变量</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ChildComponent</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 触发 msg.value = &#39;new msg&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>Vue: 在此场景下，只有当前组件会更新，并不会触发子组件 ChildComponent 的更新</li><li>React: 在此场景下， 是自顶向下的进行递归更新的，也就是说会触发子组件 ChildComponent 的更新。假如 ChildComponent 里还有十层嵌套子元素，那么所有的子元素都会更新</li></ol><h2 id="四、vue-中的-key-值" tabindex="-1">四、Vue 中的 key 值 <a class="header-anchor" href="#四、vue-中的-key-值" aria-label="Permalink to &quot;四、Vue 中的 key 值&quot;">​</a></h2><blockquote><p>Vue 默认按照“就地更新”的策略来更新通过 v-for 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染</p></blockquote><blockquote><p>默认模式是高效的，但<code>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态</code> (例如表单输入值) 的情况。</p></blockquote><blockquote><p>key 这个特殊的 attribute 主要作为 Vue 的虚拟 DOM 算法提示，在比较新旧节点列表时用于识别 vnode。只要两个 VNode 的 <code>type</code> 属性值和 <code>key</code> 属性值<code>都相同</code>，那么我们就认为它们是相同的，即可以进行 DOM 的复用(DOM 可复用并不意味着不需要更新)</p></blockquote><h3 id="_4-1-列表渲染依赖子组件状态" tabindex="-1">4.1 列表渲染依赖子组件状态 <a class="header-anchor" href="#_4-1-列表渲染依赖子组件状态" aria-label="Permalink to &quot;4.1 列表渲染依赖子组件状态&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">// 一、父组件中定义一个列表</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">el-table</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">userList</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;"> style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">%</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">el-table-column</span><span style="color:#6F42C1;"> prop</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#6F42C1;"> label</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UserName&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">el-table-column</span><span style="color:#6F42C1;"> prop</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#6F42C1;"> label</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UserAge&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">childComponent</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">childComponent</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">el-table-column</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">el-table</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">el-button</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">changeData</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;changeData&lt;/</span><span style="color:#22863A;">el-button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> childComponent </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;./cpts/child-component.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 模拟接口请求</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> changeData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  userList.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&quot;fff&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  ];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> userList</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 二、子组件独立维护年龄</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">span</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;child-component&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ age }}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">el-button</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (age </span><span style="color:#D73A49;">-=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;-&lt;/</span><span style="color:#22863A;">el-button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">el-button</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (age </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;+&lt;/</span><span style="color:#22863A;">el-button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 默认值 18</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> age</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p><img src="`+c+'" alt="改变列表数值前"><img src="'+r+`" alt="改变列表数值后"></p><ol><li>前提: 列表渲染依赖子组件状态、使用默认更新策略</li><li>现象: 更改 foo bar 的年龄后，更换列表数据。但是子组件并没有被初始化</li><li>原因: 数据变更前后，foo 和 baz 具有相同的 type 和 key。Vue 在进行 VNode 对比时认为是同一个 VNode。所以不会有 DOM 的销毁与重建，只会更新差异部分(更新了页面中的 name)。子组件复用之前的 DOM 结构，所以 age 未被初始化</li></ol><h3 id="_4-2-列表渲染依赖临时-dom-状态" tabindex="-1">4.2 列表渲染依赖临时 DOM 状态 <a class="header-anchor" href="#_4-2-列表渲染依赖临时-dom-状态" aria-label="Permalink to &quot;4.2 列表渲染依赖临时 DOM 状态&quot;">​</a></h3><blockquote><p>在 Vue 中，临时 DOM 状态通常指的是那些不是由 Vue 响应式系统管理的、与用户交互直接相关的 DOM 状态。这些状态不会被 Vue 的响应式数据跟踪</p></blockquote><p>临时 DOM 状态包括：</p><ol><li>元素滚动的位置</li><li>视频播放状态：进度、播放、暂停、音量等</li><li>由第三方库直接操作的 DOM 状态(例如、动画库可能会直接修改 DOM 元素的样式或者类)</li></ol><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">li</span><span style="color:#D73A49;"> v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">(item, index) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> items</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">index</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> v-model</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">item.value</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;"> placeholder</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;Edit me&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">removeItem</span><span style="color:#24292E;">(index)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;Remove&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">addItem</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;Add Item&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> items</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> reactive</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;Initial value 1&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;Initial value 2&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;Initial value 3&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  items.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">4000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="`+i+'" alt="改变数据前光标"><img src="'+y+'" alt="改变数据后光标"></p><ol><li>前提: 列表渲染依赖临时 DOM 状态、使用默认更新策略</li><li>现象: 将 ID 为 2 input 置为 focus 状态，然后 4000ms 后被删除，页面重新渲染。但是发现此时 ID 为 3 的 input 被置为了 focus 状态</li><li>原因: 数据变更前后，Vue 复用了 DOM 结构，将本次页面渲染当做更新来操作而不是销毁重建。和响应式数据相关的状态会更新，但是临时 DOM 状态被复用</li></ol><h3 id="_4-3-加入-key-来优化列表更新" tabindex="-1">4.3 加入 key 来优化列表更新 <a class="header-anchor" href="#_4-3-加入-key-来优化列表更新" aria-label="Permalink to &quot;4.3 加入 key 来优化列表更新&quot;">​</a></h3><p><img src="'+u+'" alt="Vue的key值"></p><ol><li>场景: 列表原有六条数据，在中间新加一条数据</li><li>不加 key: 更新两个 DOM 结点，新建一个 DOM 结点</li><li>加 key: 仅新建一个 DOM 结点</li></ol><h3 id="_4-4-key-的应用" tabindex="-1">4.4 key 的应用 <a class="header-anchor" href="#_4-4-key-的应用" aria-label="Permalink to &quot;4.4 key 的应用&quot;">​</a></h3><ol><li>如上例，优化列表渲染性能</li><li>强制替换一个元素/组件而不是复用它(1. 适当的时候触发组件的生命周期狗子 2.触发过渡效果 3. 强制组件重新渲染)</li></ol><h3 id="_4-5-结论" tabindex="-1">4.5 结论 <a class="header-anchor" href="#_4-5-结论" aria-label="Permalink to &quot;4.5 结论&quot;">​</a></h3><blockquote><p><code>推荐</code>在任何可行的时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单 (例如：不包含组件或有状态的 DOM 元素)，或者你想有意采用默认行为来提高性能。</p></blockquote><h2 id="五、vue-的-nexttick" tabindex="-1">五、Vue 的 nextTick <a class="header-anchor" href="#五、vue-的-nexttick" aria-label="Permalink to &quot;五、Vue 的 nextTick&quot;">​</a></h2><ol><li>作用: 等待下一次 DOM 更新刷新的工具方法</li><li>出现原因:  当你在 Vue 中更改响应式状态时，最终的 DOM 更新并不是同步生效的，而是由 Vue 将它们缓存在一个队列中，直到下一个“tick”才一起执行。这样是为了确保每个组件无论发生多少状态改变，都仅执行一次更新。</li><li>现实意义: 异步渲染最终目的是，将多次数据变化所引起的响应变化收集后合并成一次页面渲染，避免不必要的渲染，从而提升性能与用户体验。</li></ol><blockquote><p>数据变化 –&gt; 收集 watcher -&gt; 执行 render() 生成最新的 VNode -&gt; diff 找出差异 -&gt; 更新差异部分(渲染 DOM)</p></blockquote><h3 id="_5-1-适用场景" tabindex="-1">5.1 适用场景 <a class="header-anchor" href="#_5-1-适用场景" aria-label="Permalink to &quot;5.1 适用场景&quot;">​</a></h3><ol><li>对一个数据连续更改多次：页面只会渲染最终的状态，防止界面的闪烁</li><li>连续多次更改数据：合并 收集 watcher 之后的流程，减少性能消耗</li></ol>',102)]))}const F=n(b,[["render",E]]);export{D as __pageData,F as default};
