import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"类型缩小","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS 类型系统/类型缩小.md","filePath":"docs/TypeScript/TS 类型系统/类型缩小.md","lastUpdated":1722758955000}'),e={name:"docs/TypeScript/TS 类型系统/类型缩小.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="类型缩小" tabindex="-1">类型缩小 <a class="header-anchor" href="#类型缩小" aria-label="Permalink to &quot;类型缩小&quot;">​</a></h1><ul><li>TS 只有对联合的每个对象都有效的情况下才允许操作</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> printId</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 类型“string | number”上不存在属性“toUpperCase”。类型“number”上不存在属性“toUpperCase”。ts(2339)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>解决方案是使用代码进行类型缩小</li><li>当 TypeScript 可以<code>根据代码的结构为某个值推断出更具体的类型</code>时，类型就会发生缩小(将类型精炼为比声明的更具体的类型的过程)。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> printId</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// id 的类型被缩小为 string(将鼠标移到变量 id 上可查看)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// id 的类型被缩小为 number (将鼠标移到变量 id 上可查看)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="一、类型缩小的方式" tabindex="-1">一、类型缩小的方式 <a class="header-anchor" href="#一、类型缩小的方式" aria-label="Permalink to &quot;一、类型缩小的方式&quot;">​</a></h2><h3 id="_1-1-typeof-类型保护" tabindex="-1">1.1 typeof 类型保护 <a class="header-anchor" href="#_1-1-typeof-类型保护" aria-label="Permalink to &quot;1.1 typeof 类型保护&quot;">​</a></h3><ul><li>typeof 的返回值&quot;string&quot;、&quot;number&quot;、&quot;bigint&quot;、&quot;boolean&quot;、&quot;symbol&quot;、&quot;undefined&quot;、&quot;object&quot;、&quot;function&quot;</li><li>在 TypeScript 中，检查 typeof 返回的值是一种类型保护。因为 TypeScript 编码了 typeof 如何对不同的值进行操作，所以它知道它在 JavaScript 中的一些怪癖</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> printAll</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strs</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> strs </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;object&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> s</span><span style="color:#D73A49;"> of</span><span style="color:#24292E;"> strs) {</span></span>
<span class="line"><span style="color:#6A737D;">      // “strs”可能为 “null”。</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> strs </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(strs);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // do nothing</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_1-2-真值缩小" tabindex="-1">1.2 真值缩小 <a class="header-anchor" href="#_1-2-真值缩小" aria-label="Permalink to &quot;1.2 真值缩小&quot;">​</a></h2><ul><li>七种 false 的值：false、null、undefined、0、NaN、&quot;&quot;、0n(bigint)</li><li>在 JS 例如 if() 这样的代码结构中，会自动将条件强制转化为 boolean 类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> printAll</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strs</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (strs </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> strs </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;object&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // strs 不再会是 null</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> s</span><span style="color:#D73A49;"> of</span><span style="color:#24292E;"> strs) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> strs </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(strs);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // do nothing</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_1-3-相等性缩小" tabindex="-1">1.3 相等性缩小 <a class="header-anchor" href="#_1-3-相等性缩小" aria-label="Permalink to &quot;1.3 相等性缩小&quot;">​</a></h3><ul><li>TS 还可以使用 switch、===、!==、==、!= 等相等性检查来缩小类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> example</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> boolean</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 因为 x === y 所以 x 和 y 的类型也肯定一样，所以一定是 string</span></span>
<span class="line"><span style="color:#24292E;">    x.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// (parameter) x: string</span></span>
<span class="line"><span style="color:#24292E;">    y.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// (parameter) y: string</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// (parameter) x: string | number</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y); </span><span style="color:#6A737D;">// (parameter) y: string | boolean</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_1-4-in-运算符缩小" tabindex="-1">1.4 in 运算符缩小 <a class="header-anchor" href="#_1-4-in-运算符缩小" aria-label="Permalink to &quot;1.4 in 运算符缩小&quot;">​</a></h3><ul><li>prop in object: 指定的属性是否在指定的对象或其原型链中</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">(</span><span style="color:#E36209;">animal</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Fish</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Bird</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Human</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;swim&quot;</span><span style="color:#D73A49;"> in</span><span style="color:#24292E;"> animal) {</span></span>
<span class="line"><span style="color:#24292E;">    animal; </span><span style="color:#6A737D;">// (parameter) animal: Fish | Bird</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    animal; </span><span style="color:#6A737D;">// (parameter) animal: Bird | Human</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-5-instanceof-缩小" tabindex="-1">1.5 instanceof 缩小 <a class="header-anchor" href="#_1-5-instanceof-缩小" aria-label="Permalink to &quot;1.5 instanceof 缩小&quot;">​</a></h3><ul><li>x instanceof Foo: 检查 x 的原型链是否包含 Foo.prototype</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> logValue</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Date</span><span style="color:#D73A49;"> |</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">instanceof</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">toUTCString</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// (parameter) x: Date</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// (parameter) x: string</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-6-使用类型谓词" tabindex="-1">1.6 使用类型谓词 <a class="header-anchor" href="#_1-6-使用类型谓词" aria-label="Permalink to &quot;1.6 使用类型谓词&quot;">​</a></h3><ul><li>parameterName is Type: is 关键字一般用于函数返回值类型中，判断参数是否属于某一类型，并根据结果返回对应的布尔类型。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一、不使用类型谓词</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> unknown</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> ifUpperCase</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> unknown</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isString</span><span style="color:#24292E;">(str)) {</span></span>
<span class="line"><span style="color:#6A737D;">    // (parameter) str: unknown</span></span>
<span class="line"><span style="color:#6A737D;">    // 报错:类型“unknown”上不存在属性“toUpperCase”</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 二、使用类型谓词</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> unknown</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#E36209;"> s</span><span style="color:#D73A49;"> is</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> typeof</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> ifUpperCase</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> unknown</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isString</span><span style="color:#24292E;">(str)) {</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// (parameter) str: string</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 三、直接使用 typeof</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> ifUpperCase</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> unknown</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// (parameter) str: string</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><ul><li>使用类型谓词来判断复杂类型</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  song</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  jump</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Cat</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  rapper</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;"> void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> isCat</span><span style="color:#24292E;">(</span><span style="color:#E36209;">animal</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#E36209;"> animal</span><span style="color:#D73A49;"> is</span><span style="color:#6F42C1;"> Cat</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (animal </span><span style="color:#D73A49;">as</span><span style="color:#6F42C1;"> Cat</span><span style="color:#24292E;">).rapper </span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> showTime</span><span style="color:#24292E;">(</span><span style="color:#E36209;">animal</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Cat</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Dog</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isCat</span><span style="color:#24292E;">(animal)) {</span></span>
<span class="line"><span style="color:#24292E;">    animal.</span><span style="color:#6F42C1;">rapper</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// (parameter) animal: Cat</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    animal.</span><span style="color:#6F42C1;">jump</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// (parameter) animal: Dog</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> cat</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Cat</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  song</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;song&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  rapper</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rapper&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">showTime</span><span style="color:#24292E;">(cat);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="_1-7-判别联合" tabindex="-1">1.7 判别联合 <a class="header-anchor" href="#_1-7-判别联合" aria-label="Permalink to &quot;1.7 判别联合&quot;">​</a></h3><ul><li>当联合中的每个类型都包含具有<code>字面类型</code>的<code>公共属性</code>时。TS 认为这是一个<code>可区分的联合</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Circle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  kind</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &quot;circle&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  radius</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Square</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#E36209;">  kind</span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &quot;square&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">  sideLength</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> Shape</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> Circle</span><span style="color:#D73A49;"> |</span><span style="color:#6F42C1;"> Square</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getArea</span><span style="color:#24292E;">(</span><span style="color:#E36209;">shape</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Shape</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (shape.kind </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;circle&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> Math.</span><span style="color:#005CC5;">PI</span><span style="color:#D73A49;"> *</span><span style="color:#24292E;"> shape.radius </span><span style="color:#D73A49;">**</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// (parameter) shape: Circle</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> shape.sideLength </span><span style="color:#D73A49;">**</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// (parameter) shape: Square</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,29)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
