import{_ as e,c as l,o as r,ag as i}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"Webpack 的构建流程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/前端工程化/Webpack/webpack的构建流程.md","filePath":"docs/前端工程化/Webpack/webpack的构建流程.md","lastUpdated":1737533611000}'),t={name:"docs/前端工程化/Webpack/webpack的构建流程.md"};function o(h,a,n,d,c,u){return r(),l("div",null,a[0]||(a[0]=[i('<h1 id="webpack-的构建流程" tabindex="-1">Webpack 的构建流程 <a class="header-anchor" href="#webpack-的构建流程" aria-label="Permalink to &quot;Webpack 的构建流程&quot;">​</a></h1><h2 id="一、构建过程的三大流程" tabindex="-1">一、构建过程的三大流程 <a class="header-anchor" href="#一、构建过程的三大流程" aria-label="Permalink to &quot;一、构建过程的三大流程&quot;">​</a></h2><ol><li>初始化流程：从配置文件和  Shell  语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数</li><li>编译构建流程：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li><li>输出流程：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统</li></ol><h2 id="二、详细流程" tabindex="-1">二、详细流程 <a class="header-anchor" href="#二、详细流程" aria-label="Permalink to &quot;二、详细流程&quot;">​</a></h2><h3 id="_2-1-初始化参数" tabindex="-1">2.1 初始化参数 <a class="header-anchor" href="#_2-1-初始化参数" aria-label="Permalink to &quot;2.1 初始化参数&quot;">​</a></h3><ul><li>从配置文件中和 shell 语句中读取合并参数，得到最终的参数</li></ul><h3 id="_2-2-开始编译" tabindex="-1">2.2 开始编译 <a class="header-anchor" href="#_2-2-开始编译" aria-label="Permalink to &quot;2.2 开始编译&quot;">​</a></h3><ul><li>根据参数初始化 Comiler 对象，加载所有配置的插件, 执行对象的 run 方法开始执行编译</li></ul><h3 id="_2-3-确认入口" tabindex="-1">2.3 确认入口 <a class="header-anchor" href="#_2-3-确认入口" aria-label="Permalink to &quot;2.3 确认入口&quot;">​</a></h3><ul><li>entry 配置项</li></ul><h3 id="_2-4-编译模块" tabindex="-1">2.4 编译模块 <a class="header-anchor" href="#_2-4-编译模块" aria-label="Permalink to &quot;2.4 编译模块&quot;">​</a></h3><ul><li>从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块，递归的进行处理</li></ul><h3 id="_2-5-完成编译" tabindex="-1">2.5 完成编译 <a class="header-anchor" href="#_2-5-完成编译" aria-label="Permalink to &quot;2.5 完成编译&quot;">​</a></h3><ul><li>得到了每个模块被翻译后的最终内容以及他们之间的依赖关系</li></ul><h3 id="_2-6-输出资源" tabindex="-1">2.6 输出资源 <a class="header-anchor" href="#_2-6-输出资源" aria-label="Permalink to &quot;2.6 输出资源&quot;">​</a></h3><ul><li>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 chunk，再把每个 chunk 转换成一个单独的文件加入到输出列表中，这步是可以修改输出内容的最后机会</li></ul><h3 id="_2-7-输出完成" tabindex="-1">2.7 输出完成 <a class="header-anchor" href="#_2-7-输出完成" aria-label="Permalink to &quot;2.7 输出完成&quot;">​</a></h3><ul><li>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul>',18)]))}const b=e(t,[["render",o]]);export{_ as __pageData,b as default};
