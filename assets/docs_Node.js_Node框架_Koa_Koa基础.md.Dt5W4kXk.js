import{_ as a,c as o,o as t,ag as s}from"./chunks/framework.BDwTZuFy.js";const x=JSON.parse('{"title":"Koa框架","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Node.js/Node框架/Koa/Koa基础.md","filePath":"docs/Node.js/Node框架/Koa/Koa基础.md","lastUpdated":1738895815000}'),r={name:"docs/Node.js/Node框架/Koa/Koa基础.md"};function i(l,e,d,n,_,c){return t(),o("div",null,e[0]||(e[0]=[s('<h1 id="koa框架" tabindex="-1">Koa框架 <a class="header-anchor" href="#koa框架" aria-label="Permalink to &quot;Koa框架&quot;">​</a></h1><ul><li>Koa 具有更好的异步支持, 可以在 next() 前面加上 await, 这样在多个中间件的时候能更好的使用异步代码(本质是因为 koa 中间件中的 next() 函数的返回值是 Promise)(express 中间件 next() 函数的返回值不是 Promise 所以在 express 中无法实现这种效果)</li><li>Koa 的代码只有 1600+，是一个轻量级的框架</li></ul><h2 id="和-express-对比" tabindex="-1">和 express 对比 <a class="header-anchor" href="#和-express-对比" aria-label="Permalink to &quot;和 express 对比&quot;">​</a></h2><ul><li>匹配不到路由的话不会报错，而是返回 Not Found</li><li>本身不支持 Router 需要引入第三方插件</li><li>中间件函数的参数只有两个</li><li>Koa 是一个类， express 是一个函数</li><li>Koa 洋葱模型: 中间件1 -&gt; next() -&gt; 中间件2 -&gt; next() -&gt; 中间件3 -&gt; 中间件2 -&gt; 中间件1 (中间件的执行顺序，先从表层进入到内层，到达最内层之后又会重新返回表层)(koa 无论在同步异步都是洋葱模型)(express 只有在书写同步代码时才遵循洋葱模型)</li></ul>',4)]))}const u=a(r,[["render",i]]);export{x as __pageData,u as default};
