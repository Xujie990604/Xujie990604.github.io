import{_ as a,c as e,o as i,ag as t}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"docs/HTML+CSS/HTML部分/HTML.md","filePath":"docs/HTML+CSS/HTML部分/HTML.md","lastUpdated":1748668692000}'),o={name:"docs/HTML+CSS/HTML部分/HTML.md"};function r(d,l,n,c,s,h){return i(),e("div",null,l[0]||(l[0]=[t('<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><h2 id="五个主流浏览器及其内核" tabindex="-1">五个主流浏览器及其内核 <a class="header-anchor" href="#五个主流浏览器及其内核" aria-label="Permalink to &quot;五个主流浏览器及其内核&quot;">​</a></h2><ul><li><p>浏览器 内核</p></li><li><p>IE Trident</p></li><li><p>Firebox Gecko</p></li><li><p>chrome blink</p></li><li><p>safari webkit</p></li><li><p>Opera Blink内核</p></li><li><p>浏览器最重要的部分是浏览器的内核。浏览器内核是浏览器的核心，也称“渲染引擎”，用来解释网页语法并渲染到网页上。浏览器内核决定了浏览器该如何显示网页内容以及页面的格式信息。不同的浏览器内核对网页的语法解释也不同，因此网页开发者需要在不同内核的浏览器中测试网页的渲染效果</p></li></ul><h2 id="行级元素与块级元素" tabindex="-1">行级元素与块级元素 <a class="header-anchor" href="#行级元素与块级元素" aria-label="Permalink to &quot;行级元素与块级元素&quot;">​</a></h2><ul><li><p>inline 行级元素 内容决定元素所占的位置，不可以通过 css 来改变宽高 span strong em a del time</p></li><li><p>block 块级元素 独占一行，可以通过 css 来改变宽高 div p ul li ol form address</p></li><li><p>inline-block 行级块元素 内容决定大小，也可以改变宽高 img</p></li><li><p>凡是带有inline的元素都带有文字的特性。 例如：<code>&lt;img&gt;</code>不在同一行时。图片有不可控制的间距</p></li></ul><h2 id="html5-语义元素" tabindex="-1">HTML5 语义元素 <a class="header-anchor" href="#html5-语义元素" aria-label="Permalink to &quot;HTML5 语义元素&quot;">​</a></h2><ol><li><code>&lt;section&gt;</code>元素文档中的节：是有主题的内容组，通常具有标题。可以将网站首页划分为简介，内容，联系信息等节。</li><li><code>&lt;main&gt;</code>主要内容可以包括<code>&lt;article&gt;&lt;section&gt;&lt;aside&gt;</code>仅用一次</li><li><code>&lt;article&gt;</code>元素规定独立的自包含内容文档有其自身的意义。并且可以独立于网站其他内容进行阅读</li><li><code>&lt;header&gt;</code>元素为文档或者节定义的页眉，介绍性内容的容器。</li><li><code>&lt;footer&gt;</code>元素为文档或者节定义的页脚，（文档作者，版权信息，使用条款）</li><li><code>&lt;nav&gt;</code>元素定义导航链接集合。旨在定义大型的导航链接块。</li><li><code>&lt;aside&gt;</code>元素页面内容之外的内容（侧边栏）</li></ol><ul><li>使用的语义化标签的好处<strong>能够解耦文档的语义和为文档添加样式的方式</strong>。标签的名字是语义化，标签上的class属性作为样式的接入点。</li><li>在书写CSS属性时，CSS 选择器中尽量不要出现 HTML 的标签名，因为 HTML 的标签是用来表达语义的，标签上的 class 才是样式的接入点。例如: .main em 选择器，刚开始用 em 来表示倾斜的语义，后来我需要表示强调的语义，我就需要把 em 标签改成 strong 标签。更改之后.main em 选择器选择不到正确的元素了。符合良好代码结构的方法是只使用 class 作为样式的接入点。不要把文档的语义和为文档添加样式的方式杂糅到一起。要是一开始就把选择器写成 .main .text 那么无论出于什么原因修改了元素的标签，都不会影响样式。</li></ul><h3 id="一些标签的变化" tabindex="-1">一些标签的变化 <a class="header-anchor" href="#一些标签的变化" aria-label="Permalink to &quot;一些标签的变化&quot;">​</a></h3><ul><li>尽量使用 em 和 strong 来表示强调和重点强调，因为这两个标签更具有语义化</li><li>i 和 b 标签虽然能起到斜体和加粗的样式，但是不具有语义化，在html5 的规范中，这两个标签的作用不在具有强调的语义，而只是用来展示包含文本与其他文本不太一样。(很多时候开发者清除i和b标签的默认样式后，让它们承载指定的内容 比如 iconfont 图标库全部定义在 i 标签中，使用 b 标签来放置页面中所有的红色字体)</li></ul><h3 id="扩展html语义" tabindex="-1">扩展HTML语义 <a class="header-anchor" href="#扩展html语义" aria-label="Permalink to &quot;扩展HTML语义&quot;">​</a></h3><h4 id="语义化的属性" tabindex="-1">语义化的属性 <a class="header-anchor" href="#语义化的属性" aria-label="Permalink to &quot;语义化的属性&quot;">​</a></h4><ul><li>为一些标签添加一些额外的有关语义的描述的属性，比如 role(角色) 属性(值包括form，banner，search等)。为那些使用辅助阅读技术得用户提供更好的体验。</li><li>为标签添加额外的语义属性，也有助于为元素添加样式和脚本，实现多赢</li></ul><h4 id="微格式" tabindex="-1">微格式 <a class="header-anchor" href="#微格式" aria-label="Permalink to &quot;微格式&quot;">​</a></h4><ul><li>等到真正需要使用在学习(是一种给HTML标签增加语义化的方式)</li></ul><h4 id="微数据" tabindex="-1">微数据 <a class="header-anchor" href="#微数据" aria-label="Permalink to &quot;微数据&quot;">​</a></h4><ul><li>等到真正需要使用在学习(是一种给HTML标签增加语义化的方式)</li></ul>',17)]))}const p=a(o,[["render",r]]);export{u as __pageData,p as default};
