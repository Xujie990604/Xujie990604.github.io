import{_ as e,c as l,o as i,ag as t}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"网络安全","description":"","frontmatter":{},"headers":[],"relativePath":"docs/计算机网络/计算机网络/网络安全.md","filePath":"docs/计算机网络/计算机网络/网络安全.md","lastUpdated":1712646874000}'),o={name:"docs/计算机网络/计算机网络/网络安全.md"};function r(s,a,n,c,S,d){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="网络安全" tabindex="-1">网络安全 <a class="header-anchor" href="#网络安全" aria-label="Permalink to &quot;网络安全&quot;">​</a></h1><h2 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h2><ul><li>跨站脚本攻击, XSS 其实就是 Html 的注入问题，攻击者的输入没有经过严格的控制进入了数据库，最终显示给来访的用户，导致可以在来访用户的浏览器里以浏览用户的身份执行 Html 代码，数据流程如下：攻击者的 Html 输入—&gt; web 程序—&gt;进入数据库—&gt; web 程序—&gt;用户浏览器。</li><li>XSS 更偏向于代码实现(即写一段拥有跨站请求功能的 JavaScript 脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了 XSS 攻击了)</li><li>XSS 利用的是用户对指定网站的信任</li></ul><h3 id="预防-xss" tabindex="-1">预防 XSS <a class="header-anchor" href="#预防-xss" aria-label="Permalink to &quot;预防 XSS&quot;">​</a></h3><ul><li>过滤用户的输入</li><li>不直接将用户的输入存储，而是遍历节点只得到用户输入的值。不仅仅是简单的去掉 script 标签。每个 DOM 节点的事件都能执行 js 代码</li></ul><h2 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h2><ul><li>跨站请求伪造通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。</li><li>冒充用户发起请求（在用户不知情的情况下, 完成一些违背用户意愿的请求(如恶意发帖，删帖，改密码，发邮件等)。</li><li>CSRF 更偏向于一个攻击结果，只要发起了冒牌请求那么就算是 CSRF 了。</li><li>CSRF 利用的是网站对于用户浏览器的信任</li></ul><ol><li>登录受信任的网页 A,并在本地生成 Cookie</li><li>在不登出网页 A 的情况下(并且是在同一个浏览器中), 访问危险网页 B。B 网页通过一些方式来诱导用户点击恶意链接。该链接能够生成对 A 网站服务器 的请求, 并且这个请求是在用户的浏览器中发出的，这个请求会附带用户浏览器中的 cookie 信息。</li></ol><h3 id="预防-csrf" tabindex="-1">预防 CSRF <a class="header-anchor" href="#预防-csrf" aria-label="Permalink to &quot;预防 CSRF&quot;">​</a></h3><ul><li>黑客只是利用用户浏览器中的 cookie 信息来伪造用户进行请求，但是黑客并不会知道 cookie 中的信息包含什么。</li></ul><ol><li>服务器端判断 referer 这个字段，如果不是自己的网站，就返回错误。</li><li>CSRF Token 方法， Token 是服务器端生成的字符串。存储在客户端中。每次客户端请求的时候就会在请求中带上 Token 值。如果请求中的 Token 值和服务器端中的 Token 值对应不上，则请求失败。</li></ol>',11)]))}const u=e(o,[["render",r]]);export{_ as __pageData,u as default};
