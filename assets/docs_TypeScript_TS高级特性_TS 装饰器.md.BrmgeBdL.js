import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"TS 装饰器","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/TS高级特性/TS 装饰器.md","filePath":"docs/TypeScript/TS高级特性/TS 装饰器.md","lastUpdated":1722589228000}'),e={name:"docs/TypeScript/TS高级特性/TS 装饰器.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ts-装饰器" tabindex="-1">TS 装饰器 <a class="header-anchor" href="#ts-装饰器" aria-label="Permalink to &quot;TS 装饰器&quot;">​</a></h1><h2 id="一、装饰器" tabindex="-1">一、装饰器 <a class="header-anchor" href="#一、装饰器" aria-label="Permalink to &quot;一、装饰器&quot;">​</a></h2><ul><li>使用 @expression 的形式， expression 求值后必须是一个函数，它会在运行时被调用，被装饰的声明信息作为参数调用</li><li>当多个装饰器应用于单个声明时，它们的评估类似于数学中的函数组合</li></ul><ol><li>每个装饰器的表达式都是从上到下计算的。</li><li>然后将结果作为函数从下到上调用。</li></ol><h3 id="_1-1-多个装饰器" tabindex="-1">1.1 多个装饰器 <a class="header-anchor" href="#_1-1-多个装饰器" aria-label="Permalink to &quot;1.1 多个装饰器&quot;">​</a></h3><p>TODO：目前不了解执行过程</p><h2 id="一、类装饰器" tabindex="-1">一、类装饰器 <a class="header-anchor" href="#一、类装饰器" aria-label="Permalink to &quot;一、类装饰器&quot;">​</a></h2><ul><li>类的<code>构造函数</code>作为装饰器的唯一参数</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 普通装饰器</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> enhancer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">  target</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;xujie&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">  target</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 18</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@enhancer</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 带有参数的装饰器(装饰器工厂)</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> enhancer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> enhancer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">    target</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#005CC5;">    target</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">enhancer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="二、属性装饰器" tabindex="-1">二、属性装饰器 <a class="header-anchor" href="#二、属性装饰器" aria-label="Permalink to &quot;二、属性装饰器&quot;">​</a></h2><ol><li>第一个参数： 对于实例成员来说是原型对象，对于静态成员来说是类的构造函数</li><li>第二个参数：属性的名称</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> enhancer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @enhancer</span></span>
<span class="line"><span style="color:#E36209;">  name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 类的实例成员</span></span>
<span class="line"><span style="color:#24292E;">  @enhancer</span></span>
<span class="line"><span style="color:#D73A49;">  static</span><span style="color:#E36209;"> height</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;190&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 类的静态成员</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;xujie&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="三、方法装饰器" tabindex="-1">三、方法装饰器 <a class="header-anchor" href="#三、方法装饰器" aria-label="Permalink to &quot;三、方法装饰器&quot;">​</a></h2><ol><li>参数一：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li><li>参数二：成员的名称</li><li>参数三：成员的属性描述符</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> enhancer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">desc</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> PropertyDescriptor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(desc);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">  @enhancer</span></span>
<span class="line"><span style="color:#6F42C1;">  add</span><span style="color:#24292E;">() {} </span><span style="color:#6A737D;">// 实例方法</span></span>
<span class="line"><span style="color:#24292E;">  @enhancer</span></span>
<span class="line"><span style="color:#D73A49;">  static</span><span style="color:#6F42C1;"> test</span><span style="color:#24292E;">() {} </span><span style="color:#6A737D;">// 静态方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="四、参数装饰器" tabindex="-1">四、参数装饰器 <a class="header-anchor" href="#四、参数装饰器" aria-label="Permalink to &quot;四、参数装饰器&quot;">​</a></h2><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li><li>成员的名字</li><li>参数在函数参数列表中的索引</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> enhancer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  constructor</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">  // 实例参数</span></span>
<span class="line"><span style="color:#6F42C1;">  getName</span><span style="color:#24292E;">(@enhancer </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#6A737D;">  // 静态参数</span></span>
<span class="line"><span style="color:#D73A49;">  static</span><span style="color:#6F42C1;"> test</span><span style="color:#24292E;">(@enhancer </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,18)]))}const E=n(e,[["render",o]]);export{u as __pageData,E as default};
