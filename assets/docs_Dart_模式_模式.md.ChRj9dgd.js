import{_ as e,c as r,o as t,ag as i}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"模式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Dart/模式/模式.md","filePath":"docs/Dart/模式/模式.md","lastUpdated":1740575512000}'),o={name:"docs/Dart/模式/模式.md"};function l(h,a,n,s,d,c){return t(),r("div",null,a[0]||(a[0]=[i('<h1 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h1><ul><li>模式是 Dart 语言中的一种语法类别，类似于语句和表达式。模式表示一组它可能匹配的实际值的形状</li></ul><p>TODO：模式是 Dart 的一个语法特性，有点意思。有时间的话需要研究一下，和 JS 的解构赋值对比一下</p><h2 id="匹配模式" tabindex="-1">匹配模式 <a class="header-anchor" href="#匹配模式" aria-label="Permalink to &quot;匹配模式&quot;">​</a></h2><ul><li>case</li></ul><h2 id="解构模式" tabindex="-1">解构模式 <a class="header-anchor" href="#解构模式" aria-label="Permalink to &quot;解构模式&quot;">​</a></h2><h2 id="模式出现的场景" tabindex="-1">模式出现的场景 <a class="header-anchor" href="#模式出现的场景" aria-label="Permalink to &quot;模式出现的场景&quot;">​</a></h2><h3 id="_1-变量声明" tabindex="-1">1. 变量声明 <a class="header-anchor" href="#_1-变量声明" aria-label="Permalink to &quot;1. 变量声明&quot;">​</a></h3><h3 id="_2-变量赋值" tabindex="-1">2. 变量赋值 <a class="header-anchor" href="#_2-变量赋值" aria-label="Permalink to &quot;2. 变量赋值&quot;">​</a></h3><h3 id="_3-switch-和-表达式" tabindex="-1">3. switch 和 表达式 <a class="header-anchor" href="#_3-switch-和-表达式" aria-label="Permalink to &quot;3. switch 和 表达式&quot;">​</a></h3><h3 id="_4-for-和-for-in-循环" tabindex="-1">4. For 和 for-in 循环 <a class="header-anchor" href="#_4-for-和-for-in-循环" aria-label="Permalink to &quot;4. For 和 for-in 循环&quot;">​</a></h3><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ol><li>解构函数的多个返回值</li><li>解构类实例</li><li>代数数据类型</li><li>验证传入的 JSON</li></ol>',13)]))}const f=e(o,[["render",l]]);export{u as __pageData,f as default};
