import{_ as a,c as s,o as t,ag as n}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"类型声明","description":"","frontmatter":{},"headers":[],"relativePath":"docs/TypeScript/类型声明文件/类型声明.md","filePath":"docs/TypeScript/类型声明文件/类型声明.md","lastUpdated":1722758955000}'),l={name:"docs/TypeScript/类型声明文件/类型声明.md"};function r(i,e,o,p,c,d){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="类型声明" tabindex="-1">类型声明 <a class="header-anchor" href="#类型声明" aria-label="Permalink to &quot;类型声明&quot;">​</a></h1><h2 id="一、三斜杠指令" tabindex="-1">一、三斜杠指令 <a class="header-anchor" href="#一、三斜杠指令" aria-label="Permalink to &quot;一、三斜杠指令&quot;">​</a></h2><ul><li>三斜杠指令是包含单个 XML 标记的单行注释。注释的内容用作编译器指令。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/// &lt;reference path=&quot;...&quot; /&gt; 指令是该组中最常见的。它用作文件之间依赖的声明。</span></span>
<span class="line"><span style="color:#6A737D;">/// &lt;reference types=&quot;...&quot; /&gt; 指令声明对包的依赖。</span></span>
<span class="line"><span style="color:#6A737D;">/// &lt;reference lib=&quot;...&quot; /&gt; 该指令允许文件显式包含现有的内置 lib 文件。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>在 .d.ts 文件中做类型的声明，在文件中声明了变量，模块，interface，type 等之后，在其他地方不需要导入就可以直接使用，并且有语法提示</li><li>declare 关键字: 用于类型声明</li></ul>`,5)]))}const b=a(l,[["render",r]]);export{_ as __pageData,b as default};
