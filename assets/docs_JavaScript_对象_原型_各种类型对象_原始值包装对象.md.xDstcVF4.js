import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"原始值包装类","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/各种类型对象/原始值包装对象.md","filePath":"docs/JavaScript/对象&原型/各种类型对象/原始值包装对象.md","lastUpdated":1735478813000}'),p={name:"docs/JavaScript/对象&原型/各种类型对象/原始值包装对象.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="原始值包装类" tabindex="-1">原始值包装类 <a class="header-anchor" href="#原始值包装类" aria-label="Permalink to &quot;原始值包装类&quot;">​</a></h1><h2 id="一、基本包装类型" tabindex="-1">一、基本包装类型 <a class="header-anchor" href="#一、基本包装类型" aria-label="Permalink to &quot;一、基本包装类型&quot;">​</a></h2><ul><li>原始值包装类型的存在不是为了让开发者去显式的创建这种实例, 而是为了 <code>方便操作原始值(读取原始值的属性(string.length)，操作原始值的方法string.slice())</code>，ECMAScript 提供了三个特殊的引用类型 Boolean，Number，String</li><li>当访问(设置属性，读取属性，使用方法时)基本类型的时候，后台会自动完成以下三步</li></ul><ol><li>创建 Boolean | Number | String 基本值包装类型的一个实例</li><li>在实例上调用指定的方法</li><li>销毁这个实例</li></ol><h3 id="_1-1-包装类上的很多属性只可以拿来使用-读取-不能用来-操作-属性和-重写-方法" tabindex="-1">1.1 包装类上的很多属性只可以拿来使用(读取),不能用来(操作)属性和(重写)方法 <a class="header-anchor" href="#_1-1-包装类上的很多属性只可以拿来使用-读取-不能用来-操作-属性和-重写-方法" aria-label="Permalink to &quot;1.1 包装类上的很多属性只可以拿来使用(读取),不能用来(操作)属性和(重写)方法&quot;">​</a></h3><ul><li><code>!不建议显示的创建基本包装类的对象</code></li><li>在原始值直接进行属性的赋值时。会有一个隐式的转换过程(生成对应包装类实例)，让原始值能够进行属性的赋值而不报错。</li><li>基本类型的包装类实例 <code>生命周期只在代码的执行瞬间</code>，所以基本类型无法自定义函数和方法。因为在第二行为 <code>str</code> 添加属性时，创建了一个包装类对象，第二行代码执行完，这个对象就被销毁了，第三行访问属性时，又是创建了一个新的包装类对象，因此会找不到上一行设置的属性。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str.color </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;red&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 隐式操作： 1.var str = new String(&quot;test&quot;) 2. str.color = &quot;red&quot; 3. 删除生成的包装类实例</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.color); </span><span style="color:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-2-undefined-和-null" tabindex="-1">1.2 undefined 和 null <a class="header-anchor" href="#_1-2-undefined-和-null" aria-label="Permalink to &quot;1.2 undefined 和 null&quot;">​</a></h3><ul><li>undefined 和 null 不能拥有属性，因为他们没有包装类</li></ul><h2 id="二、boolean-包装对象类型" tabindex="-1">二、Boolean 包装对象类型 <a class="header-anchor" href="#二、boolean-包装对象类型" aria-label="Permalink to &quot;二、Boolean 包装对象类型&quot;">​</a></h2><ul><li><code>var bol = new Boolean(true/false)</code> 来创建一个 Boolean 对象</li><li>Boolean 实例的 typeof 结果为 &#39;object&#39;。instanceof Boolean 的结果为 true，</li><li>基本数据类型的 typeof 结果为 &#39;boolean&#39;, instanceof Boolean 的结果为 false</li><li>因为 Boolean 对象的布尔值总是 true，所以<code>永远不要使用 Boolean 对象</code>。</li></ul><h2 id="三、number-包装对象类型" tabindex="-1">三、Number 包装对象类型 <a class="header-anchor" href="#三、number-包装对象类型" aria-label="Permalink to &quot;三、Number 包装对象类型&quot;">​</a></h2><ul><li><code>var num = new Number(number)</code> 来创建一个 Number 对象</li><li>Number 实例的 typeof 结果为 &#39;object&#39;, instanceof Number 的结果为 true</li><li>基本数据类型的 typeof 结果为 &#39;number&#39;, instanceof Number 的结果为 false</li><li><code>!最好不要使用 Number 对象</code></li></ul><h3 id="_3-1-其他方法" tabindex="-1">3.1 其他方法 <a class="header-anchor" href="#_3-1-其他方法" aria-label="Permalink to &quot;3.1 其他方法&quot;">​</a></h3><h4 id="tofixed" tabindex="-1">toFixed <a class="header-anchor" href="#tofixed" aria-label="Permalink to &quot;toFixed&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 返回\`指定小数位\`的数值字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) Number.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(fractionDigits</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): string</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">num.</span><span style="color:#6F42C1;">tiFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;10.00&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="toexponential" tabindex="-1">toExponential <a class="header-anchor" href="#toexponential" aria-label="Permalink to &quot;toExponential&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 返回\`指定小数位，指数计数法\`的数值字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) Number.</span><span style="color:#6F42C1;">toExponential</span><span style="color:#24292E;">(fractionDigits</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): string</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">num.</span><span style="color:#6F42C1;">toExponential</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;1.0e+1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="isinteger" tabindex="-1">isInteger <a class="header-anchor" href="#isinteger" aria-label="Permalink to &quot;isInteger&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一个数值是否保存为整数</span></span>
<span class="line"><span style="color:#24292E;">(method) NumberConstructor.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(number: unknown): boolean</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)    </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.01</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// fasle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="四、string-包装对象类型" tabindex="-1">四、String 包装对象类型 <a class="header-anchor" href="#四、string-包装对象类型" aria-label="Permalink to &quot;四、String 包装对象类型&quot;">​</a></h2><ul><li><code>var str = new String(string)</code> 来创建一个 String 对象</li><li>length 属性返回字符串的长度, 不是字符串有这个属性，而是字符串的包装类有这个属性。给 length 属性重新赋值并不会生效</li><li>String 实例的 typeof 结果为 &#39;object&#39;, instanceof String 的结果为 true</li><li>基本数据类型的 typeof 结果为 &#39;string&#39;, instanceof String 的结果为 false</li></ul><h3 id="_4-1-获取字符方法" tabindex="-1">4.1 获取字符方法 <a class="header-anchor" href="#_4-1-获取字符方法" aria-label="Permalink to &quot;4.1 获取字符方法&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 以单字符的形式返回</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(pos: number): string</span></span>
<span class="line"><span style="color:#6A737D;">// 以字符编码的形式返回</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(index: number): number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);      </span><span style="color:#6A737D;">// h</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 104</span></span>
<span class="line"><span style="color:#24292E;">str[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;">// 字符串支持直接使用 [] 来访问特定位置的字符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4-2-字符串大小写转换方式" tabindex="-1">4.2 字符串大小写转换方式 <a class="header-anchor" href="#_4-2-字符串大小写转换方式" aria-label="Permalink to &quot;4.2 字符串大小写转换方式&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 字符串内容全部转换成小写</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">(): string</span></span>
<span class="line"><span style="color:#6A737D;">// 字符串内容全部转换成大写</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(): string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;hello WORLD&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// hello world</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// HELLO WORLD</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-3-操作字符串的方法" tabindex="-1">4.3 操作字符串的方法 <a class="header-anchor" href="#_4-3-操作字符串的方法" aria-label="Permalink to &quot;4.3 操作字符串的方法&quot;">​</a></h3><h4 id="split" tabindex="-1">split <a class="header-anchor" href="#split" aria-label="Permalink to &quot;split&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 参数是什么，就按照什么来拆分字符串, 不改变原字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(separator: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> RegExp, limit</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): string[] (</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> overload)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;foo&amp;bar&amp;baz&quot;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// [&quot;foo&quot;, &quot;bar&quot;, &#39;baz&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="concat" tabindex="-1">concat <a class="header-anchor" href="#concat" aria-label="Permalink to &quot;concat&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 将一个或者多个字符串拼接成一个新的字符串, 不改变原字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">strings: string[]): string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;f&quot;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;oo&quot;</span><span style="color:#24292E;">)        </span><span style="color:#6A737D;">// &quot;foo&quot;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;oo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;foobar&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="slice" tabindex="-1">slice <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 从 start 位开始截取，截取到 end(不包含最后一位，基数从 0 开始)</span></span>
<span class="line"><span style="color:#6A737D;">// 如果一个参数就是从 start 位开始截取，截取到最后一位</span></span>
<span class="line"><span style="color:#6A737D;">// 如果不加参数的话，返回值是字符串的拷贝</span></span>
<span class="line"><span style="color:#6A737D;">// 参数是负数的话就是从倒数第几位开始截取</span></span>
<span class="line"><span style="color:#6A737D;">// 不改变原字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) str.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(start</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">, end</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;abcdefg&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// bc</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// bcdefg</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();     </span><span style="color:#6A737D;">// abcdefg</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// fg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="trim" tabindex="-1">trim <a class="header-anchor" href="#trim" aria-label="Permalink to &quot;trim&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 消除过字符串前置和后置的空格</span></span>
<span class="line"><span style="color:#6A737D;">// 不会改变原字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(): string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;  hello world &#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// &#39;hello world&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="repeat" tabindex="-1">repeat <a class="header-anchor" href="#repeat" aria-label="Permalink to &quot;repeat&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 将字符串重复多少次</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(count: number): string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;foo &quot;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// foo foo foo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="replace" tabindex="-1">replace <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 替换字符串的内容, 不改变字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(searchValue: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> RegExp, replaceValue: string): </span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> overloads)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;name name name&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// age name name</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/name/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// age age age</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-4-字符串位置方法" tabindex="-1">4.4 字符串位置方法 <a class="header-anchor" href="#_4-4-字符串位置方法" aria-label="Permalink to &quot;4.4 字符串位置方法&quot;">​</a></h3><h4 id="indexof、lastindexof" tabindex="-1">indexOf、lastIndexOf <a class="header-anchor" href="#indexof、lastindexof" aria-label="Permalink to &quot;indexOf、lastIndexOf&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 查询某个字符在字符串首次出现中的位置</span></span>
<span class="line"><span style="color:#6A737D;">// 不会改变原字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(searchString: string, position</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;abcdef&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;g&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// -1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查询某个字符在字符串最后一次出现中的位置</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(searchString: string, position</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;abcdefa&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;g&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// -1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-5-字符串包含方法" tabindex="-1">4.5 字符串包含方法 <a class="header-anchor" href="#_4-5-字符串包含方法" aria-label="Permalink to &quot;4.5 字符串包含方法&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 是否以某字符串开头</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(searchString: string, position</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): boolean</span></span>
<span class="line"><span style="color:#6A737D;">// 是否以某字符串结尾</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(searchString: string, endPosition</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): boolean</span></span>
<span class="line"><span style="color:#6A737D;">// 是否包含某字符串</span></span>
<span class="line"><span style="color:#24292E;">(method) String.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(searchString: string, position</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">|</span><span style="color:#005CC5;"> undefined</span><span style="color:#24292E;">): boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;foobarbaz&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;qux&quot;</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="" tabindex="-1"><code>...</code> <a class="header-anchor" href="#" aria-label="Permalink to &quot;\`...\`&quot;">​</a></h3><ul><li>任何定义了遍历器(Iterator)接口的对象，都可以使用扩展运算符</li><li><code>...</code> 内部使用的就是 <code>for of</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;message&quot;</span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#24292E;">str  </span><span style="color:#6A737D;">// &#39;m&#39; &#39;e&#39; &#39;s&#39; &#39;s&#39; &#39;a&#39; &#39;g&#39; &#39;e&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,47)]))}const d=n(p,[["render",o]]);export{b as __pageData,d as default};
