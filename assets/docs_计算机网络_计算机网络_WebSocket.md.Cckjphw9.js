import{_ as a,c as t,o as l,ag as o}from"./chunks/framework.BDwTZuFy.js";const T=JSON.parse('{"title":"WebSocket","description":"","frontmatter":{},"headers":[],"relativePath":"docs/计算机网络/计算机网络/WebSocket.md","filePath":"docs/计算机网络/计算机网络/WebSocket.md","lastUpdated":null}'),i={name:"docs/计算机网络/计算机网络/WebSocket.md"};function c(r,e,s,n,d,b){return l(),t("div",null,e[0]||(e[0]=[o('<h1 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h1><ul><li>WebSocket 协议运行在 TCP 协议之上，与 HTTP 协议同属于应用层网络数据传输协议。WebSocket 相比于 HTTP 协议最大的特点是: 允许服务端主动向客户端推送数据(从而解决 HTTP 协议实现中客户端只能通过轮询方式获取服务端推送数据造成的资源消耗和消息延时等问题)</li><li>WebSocket 是全双工的协议</li></ul><h2 id="轮询" tabindex="-1">轮询 <a class="header-anchor" href="#轮询" aria-label="Permalink to &quot;轮询&quot;">​</a></h2><ul><li>短轮询：一般是由客户端每隔一段时间（如每隔5s）向服务器发起一次普通 HTTP 请求。服务端查询当前接口是否有数据更新，若有数据更新则向客户端返回最新数据，若无则提示客户端无数据更新。</li><li>长轮询：一般是由客户端向服务端发出一个设置较长网络超时时间的 HTTP 请求，并在 HTTP 连接超时前，不主动断开连接；待客户端超时或有数据返回后，再次建立一个同样的 HTTP 请求，重复以上过程</li></ul><h2 id="协议握手" tabindex="-1">协议握手 <a class="header-anchor" href="#协议握手" aria-label="Permalink to &quot;协议握手&quot;">​</a></h2><p>WebSocket 协议握手复用了 HTTP 协议：</p><ol><li>客户端通过 HTTP 请求与 WebSocket 服务端协商升级协议到 Websocket 协议。</li><li>服务端通过 HTTP 响应数据回应客户端的升级请求，完成协议握手。</li></ol><p>完成协议握手后，后续的数据交换则遵照 WebSocket 的协议进行。</p><h2 id="关闭连接" tabindex="-1">关闭连接 <a class="header-anchor" href="#关闭连接" aria-label="Permalink to &quot;关闭连接&quot;">​</a></h2><ul><li>由于 WebSocket 是全双工的协议，因此客户端和服务端都可以选择关闭 WebSocket 连接</li></ul><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><ul><li>WebSockets 适用于多个客户端和一个服务器端实现实时通信的场合</li></ul><ol><li>多人在线游戏网站</li><li>在线聊天室</li><li>实时体育或者新闻评论网站</li><li>实时交互用户信息的社交网站</li></ol>',13)]))}const k=a(i,[["render",c]]);export{T as __pageData,k as default};
