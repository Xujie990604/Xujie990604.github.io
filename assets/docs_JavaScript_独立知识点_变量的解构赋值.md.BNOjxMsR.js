import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"变量的解构赋值","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/独立知识点/变量的解构赋值.md","filePath":"docs/JavaScript/独立知识点/变量的解构赋值.md","lastUpdated":1735478813000}'),o={name:"docs/JavaScript/独立知识点/变量的解构赋值.md"};function e(r,s,c,t,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="变量的解构赋值" tabindex="-1">变量的解构赋值 <a class="header-anchor" href="#变量的解构赋值" aria-label="Permalink to &quot;变量的解构赋值&quot;">​</a></h1><h2 id="一、数组的解构赋值" tabindex="-1">一、数组的解构赋值 <a class="header-anchor" href="#一、数组的解构赋值" aria-label="Permalink to &quot;一、数组的解构赋值&quot;">​</a></h2><ul><li>数组是按照<code>顺序</code>来进行解构</li><li>解构不成功，变量的值等于 undefined</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, [[</span><span style="color:#005CC5;">bar</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, [[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]];</span></span>
<span class="line"><span style="color:#24292E;">foo; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">bar; </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">baz; </span><span style="color:#6A737D;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="二、对象的解构赋值" tabindex="-1">二、对象的解构赋值 <a class="header-anchor" href="#二、对象的解构赋值" aria-label="Permalink to &quot;二、对象的解构赋值&quot;">​</a></h2><ul><li>对象是按照<code>同名属性</code>进行解构</li><li>解构失败的值为 undefined</li><li>对象的解构赋值可以取到对象继承的属性。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 解构的简写</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">foo</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bar</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">bar</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;aaa&quot;</span><span style="color:#24292E;">, bar: </span><span style="color:#032F62;">&quot;bbb&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bar</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;aaa&quot;</span><span style="color:#24292E;">, bar: </span><span style="color:#032F62;">&quot;bbb&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 解构的同时修改变量名称</span></span>
<span class="line"><span style="color:#6A737D;">// foo 是匹配的模式，baz 才是变量。真正被赋值的是变量 baz，而不是模式 foo。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">foo</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;aaa&quot;</span><span style="color:#24292E;">, bar: </span><span style="color:#032F62;">&quot;bbb&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">baz; </span><span style="color:#6A737D;">// &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#24292E;">foo; </span><span style="color:#6A737D;">// error: foo is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 解构时使用默认值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">baz</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;ccc&quot;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;aaa&quot;</span><span style="color:#24292E;">, bar: </span><span style="color:#032F62;">&quot;bbb&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">baz; </span><span style="color:#6A737D;">// &#39;ccc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4. 解构访问原型上的数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;aaa&quot;</span><span style="color:#24292E;">, bar: </span><span style="color:#032F62;">&quot;bbb&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">.sss </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;sss&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">sss</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">sss; </span><span style="color:#6A737D;">// &#39;sss&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 5. 嵌套解构</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> userInfo</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: {</span></span>
<span class="line"><span style="color:#24292E;">    first: </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    last: </span><span style="color:#032F62;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">first</span><span style="color:#24292E;"> } } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfo</span></span>
<span class="line"><span style="color:#24292E;">first;         </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span>
<span class="line"><span style="color:#24292E;">name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// true </span></span>
<span class="line"><span style="color:#6F42C1;">TODO</span><span style="color:#24292E;">: name 没有解构到值我能理解，但是是个空字符串我理解不了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_2-1-数组对象" tabindex="-1">2.1 数组对象 <a class="header-anchor" href="#_2-1-数组对象" aria-label="Permalink to &quot;2.1 数组对象&quot;">​</a></h3><ul><li>由于数组<code>本质是特殊的对象</code>，因此可以对数组进行对象属性的解构。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 使用解构对象的形式来解构数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">first</span><span style="color:#24292E;">, [arr.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]: </span><span style="color:#005CC5;">last</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">first; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">last; </span><span style="color:#6A737D;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="三、字符串的解构赋值" tabindex="-1">三、字符串的解构赋值 <a class="header-anchor" href="#三、字符串的解构赋值" aria-label="Permalink to &quot;三、字符串的解构赋值&quot;">​</a></h2><ul><li>字符串在解构赋值的时候会被转换成类数组，既有数组的特点，又有对象的特点</li><li>字符串可以通过<code>数组解构</code>的方式来按照顺序得到<code>数值</code></li><li>字符串可以通过<code>对象解构</code>的方式得到 length <code>属性</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 按照数组的形式解构</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">d</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">e</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// a = h, b = e, c = l  ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 按照对象的形式解构</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">length</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">len</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// len = 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="四、数值和布尔值的解构赋值" tabindex="-1">四、数值和布尔值的解构赋值 <a class="header-anchor" href="#四、数值和布尔值的解构赋值" aria-label="Permalink to &quot;四、数值和布尔值的解构赋值&quot;">​</a></h2><ul><li>解构赋值的规则时，只要等号的右边不是对象或者数组，就会先被转换为对象然后在进行解构赋值。</li><li><code>null</code> <code>undefined</code> 无法转为对象，因此<code>无法被解构</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">toString</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> Number</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">toString</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> Boolean</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString; </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="五、函数参数的解构赋值" tabindex="-1">五、函数参数的解构赋值 <a class="header-anchor" href="#五、函数参数的解构赋值" aria-label="Permalink to &quot;五、函数参数的解构赋值&quot;">​</a></h2><ul><li>函数的参数可以使用解构赋值</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1. 不带默认值的函数参数解构</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [x, y]; </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 参数默认值 + 解构</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [x, y]; </span><span style="color:#6A737D;">// [9, 10]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用时：可以不传参数，因为参数有默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 解构默认值</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 3</span><span style="color:#24292E;">}) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [x, y]; </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({}); </span><span style="color:#6A737D;">// 调用时：不可以不传参数，只是解构有默认值，并不是参数有默认值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,19)]))}const E=n(o,[["render",e]]);export{u as __pageData,E as default};
