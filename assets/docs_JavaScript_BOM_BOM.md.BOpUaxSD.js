import{_ as i,c as t,o,ag as l}from"./chunks/framework.BDwTZuFy.js";const p=JSON.parse('{"title":"BOM","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/BOM/BOM.md","filePath":"docs/JavaScript/BOM/BOM.md","lastUpdated":1712646874000}'),n={name:"docs/JavaScript/BOM/BOM.md"};function r(a,e,h,d,c,s){return o(),t("div",null,e[0]||(e[0]=[l('<h1 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h1><h2 id="screenleft-screentop-和-screenx-screeny" tabindex="-1">screenLeft/screenTop 和 screenX/screenY <a class="header-anchor" href="#screenleft-screentop-和-screenx-screeny" aria-label="Permalink to &quot;screenLeft/screenTop 和 screenX/screenY&quot;">​</a></h2><ul><li>相同的作用不过是不同的浏览器的支持情况不同。</li><li>返回的是浏览器窗口相对于屏幕的位置。</li><li>window.screenLeft</li></ul><h2 id="moveto-moveby" tabindex="-1">moveTo()/moveBy() <a class="header-anchor" href="#moveto-moveby" aria-label="Permalink to &quot;moveTo()/moveBy()&quot;">​</a></h2><ul><li>浏览器可能会禁用这两个方法</li><li>moveTo(x,y)是移动到这个坐标，moveBy(x,y)是在当前位置的基础上移动多少距离。</li><li>window.moveTo(x,y)</li></ul><h2 id="resizeto-和resizeby" tabindex="-1">resizeTo()和resizeBy() <a class="header-anchor" href="#resizeto-和resizeby" aria-label="Permalink to &quot;resizeTo()和resizeBy()&quot;">​</a></h2><ul><li>浏览器可能会禁用这两个属性</li><li>其中resizeTo(x,y)接收浏览器窗口的新宽度和新高度，而resizeBy(x,y)接收新窗口与原窗口的宽度和高度之差</li><li>window.resizeTo(x,y)</li></ul><h2 id="innerheight-innerwidth-和-outerwidth-outerheight" tabindex="-1">innerHeight/innerWidth 和 outerWidth/outerHeight <a class="header-anchor" href="#innerheight-innerwidth-和-outerwidth-outerheight" aria-label="Permalink to &quot;innerHeight/innerWidth 和 outerWidth/outerHeight&quot;">​</a></h2><ul><li>每个浏览器的支持情况都不一样</li><li>在Chrome中吗，这四个值都返回视口(控制台不算视口)的大小。</li><li>window.innerHeight</li></ul><h2 id="window-open-弹出窗口" tabindex="-1">window.open()弹出窗口 <a class="header-anchor" href="#window-open-弹出窗口" aria-label="Permalink to &quot;window.open()弹出窗口&quot;">​</a></h2><ul><li>导航到一个特定的URL，或者打开一个新的浏览器窗口。</li><li>四个参数：要加载的URL地址，窗口目标，一个特性字符串，新页面是否取代当前页面的布尔值。</li><li>var myWindow = window.open() myWindow.close()通过close方法可以关闭通过open创建的页面。</li><li>主窗口的页面没有得到用于的允许不同关闭，不过弹出窗口倒是可以通过top.close()在不经用户同意的情况下关闭。</li><li>myWindow.opener属性里面保存着打开它的原始窗口对象。</li><li>在chrome中可以把opener属性赋值为null，意味着切断与其他标签页的通信，且切断之后没有办法恢复。</li></ul><h2 id="clientwidth-clientheight" tabindex="-1">clientWidth/clientHeight <a class="header-anchor" href="#clientwidth-clientheight" aria-label="Permalink to &quot;clientWidth/clientHeight&quot;">​</a></h2><ul><li><p>元素的尺寸大小</p></li><li><p>clientWidth的实际宽度 clientWidth = width + 左右padding</p></li><li><p>clientHeigh的实际高度 clientHeigh = height + 上下padding</p></li></ul>',13)]))}const m=i(n,[["render",r]]);export{p as __pageData,m as default};
