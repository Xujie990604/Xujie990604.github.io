import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const b=JSON.parse('{"title":"Map","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/对象&原型/Map.md","filePath":"docs/JavaScript/对象&原型/Map.md","lastUpdated":1735478813000}'),e={name:"docs/JavaScript/对象&原型/Map.md"};function o(r,s,t,c,i,y){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h1><ul><li>JavaScript 的对象本质上是<code>键值对</code>的集合，但是传统上只能把<code>字符串</code>当做 key 值。</li><li>Map 类似于对象，也是键值对的集合，但是<code>键的范围不限制于字符串</code>，各种类型的值(包括对象)都可以当做键。</li></ul><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 任何具有 Iterator 接口, 且每个成员都是一个双元素的数组的数据结构都可以当作 Map 构造函数的参数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Author&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">map </span><span style="color:#6A737D;">// Map(2) {&#39;name&#39; =&gt; &#39;张三&#39;, &#39;title&#39; =&gt; &#39;Author&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="一、属性和方法" tabindex="-1">一、属性和方法 <a class="header-anchor" href="#一、属性和方法" aria-label="Permalink to &quot;一、属性和方法&quot;">​</a></h2><h3 id="_1-1-size-属性" tabindex="-1">1.1 size 属性 <a class="header-anchor" href="#_1-1-size-属性" aria-label="Permalink to &quot;1.1 size 属性&quot;">​</a></h3><ul><li>返回成员个数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Author&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">map.size; </span><span style="color:#6A737D;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_1-2-set" tabindex="-1">1.2 set <a class="header-anchor" href="#_1-2-set" aria-label="Permalink to &quot;1.2 set&quot;">​</a></h3><ul><li>当键为引用类型时，判断键是否相等的依据是内存地址是否相等</li><li>当键为基本数据类型时，判断键是否相等 使用了 SameValueZero 相等性比较算法</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 因为 set 返回值为整个 map, 所以可以实现链式调用</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key, value).</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key2, value2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SameValueZero 认为 NaN 和 NaN 相等， +0 和 -0 相等</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> a</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> /</span><span style="color:#032F62;"> &quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#005CC5;">  b</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> /</span><span style="color:#032F62;"> &quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#005CC5;">  pz</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> +</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  nz</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> -</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">pz </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> nz; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(a, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(pz, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(b); </span><span style="color:#6A737D;">// foo</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(nz); </span><span style="color:#6A737D;">// bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_1-3-get" tabindex="-1">1.3 get <a class="header-anchor" href="#_1-3-get" aria-label="Permalink to &quot;1.3 get&quot;">​</a></h3><ul><li>读取数据</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> objKey</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [objKey, </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(objKey); </span><span style="color:#6A737D;">// &quot;张三&quot;</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;李四&quot;</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-4-has-方法" tabindex="-1">1.4 has 方法 <a class="header-anchor" href="#_1-4-has-方法" aria-label="Permalink to &quot;1.4 has 方法&quot;">​</a></h3><ul><li>是否存在某个键值</li><li>返回值: Boolean</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> objKey</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [objKey, </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(objKey); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-5-delete-方法" tabindex="-1">1.5 delete 方法 <a class="header-anchor" href="#_1-5-delete-方法" aria-label="Permalink to &quot;1.5 delete 方法&quot;">​</a></h3><ul><li>map.delete(key)</li><li>返回值: Boolean</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> objKey</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [objKey, </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(objKey); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-6-clear-方法" tabindex="-1">1.6 clear 方法 <a class="header-anchor" href="#_1-6-clear-方法" aria-label="Permalink to &quot;1.6 clear 方法&quot;">​</a></h3><ul><li>清除所有成员</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> objKey</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [objKey, </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">map; </span><span style="color:#6A737D;">// Map(0) {size: 0}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="二、遍历方法" tabindex="-1">二、遍历方法 <a class="header-anchor" href="#二、遍历方法" aria-label="Permalink to &quot;二、遍历方法&quot;">​</a></h2><ul><li>和 Object 的主要差异：Map 实例会维护键值对的插入顺序(Object 的属性是没有顺序的)</li></ul><h3 id="_2-1-方法" tabindex="-1">2.1 方法 <a class="header-anchor" href="#_2-1-方法" aria-label="Permalink to &quot;2.1 方法&quot;">​</a></h3><ul><li>Map.prototype.keys()：返回键名的遍历器</li><li>Map.prototype.values()：返回键值的遍历器</li><li>Map.prototype.entries()：返回所有成员的遍历器</li><li>Map.prototype.forEach()：遍历 Map 的所有成员</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// map 本身是没有 filter 功能的，但是可以先转成数组，再执行 filter 方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 使用迭代器特性和 entries 特性来生成数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> mapArray</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 使用 Map 参数可以为数组的特性</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> newMap</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">(mapArray.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(([</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="三、与其他数据结构转化" tabindex="-1">三、与其他数据结构转化 <a class="header-anchor" href="#三、与其他数据结构转化" aria-label="Permalink to &quot;三、与其他数据结构转化&quot;">​</a></h2><h3 id="_3-1-map-转换成数组" tabindex="-1">3.1 map 转换成数组 <a class="header-anchor" href="#_3-1-map-转换成数组" aria-label="Permalink to &quot;3.1 map 转换成数组&quot;">​</a></h3><ul><li>使用扩展运算符将 Map 转化为数组</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> map</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">// map[Symbol.iterator] === map.entries</span></span>
<span class="line"><span style="color:#6A737D;">// 访问了map结构的默认遍历接口，本质执行代码是[...map.entries()]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> array</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">map];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-2-数组转化成-map" tabindex="-1">3.2 数组转化成 map <a class="header-anchor" href="#_3-2-数组转化成-map" aria-label="Permalink to &quot;3.2 数组转化成 map&quot;">​</a></h3><ul><li>把数组传入 Map 构造函数，就可以转化为 Map</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 利用了 map 构造函数的参数可以是数组的特性</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [{ foo: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }, [</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">]],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-3-对象转成-map" tabindex="-1">3.3 对象转成 map <a class="header-anchor" href="#_3-3-对象转成-map" aria-label="Permalink to &quot;3.3 对象转成 map&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;xujie&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Map</span><span style="color:#24292E;">(Object.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">(obj));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="四、weakmap" tabindex="-1">四、WeakMap <a class="header-anchor" href="#四、weakmap" aria-label="Permalink to &quot;四、WeakMap&quot;">​</a></h2><h3 id="_4-1-弱映射" tabindex="-1">4.1 弱映射 <a class="header-anchor" href="#_4-1-弱映射" aria-label="Permalink to &quot;4.1 弱映射&quot;">​</a></h3><ul><li>WeakMap 对 key 是弱引用，不影响垃圾回收器的工作, 如果一个引用类型值除了被 WeakMap 当做键之外没有其他的地方引用它，那这个引用类型值会被回收</li><li>所以 WeakMap 经常用于存储那些只有当 key 所引用的对象存在时(没有被回收)才有价值的信息</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 手动消除对键的引用之后，键值对会消失</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> objKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> weakMap</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> WeakMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">weakMap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(objKey, { name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">weakMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(objKey); </span><span style="color:#6A737D;">// { name: &quot;foo&quot; }</span></span>
<span class="line"><span style="color:#24292E;">objKey </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  weakMap; </span><span style="color:#6A737D;">// WeakMap {}</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4-1-weakmap-和-map-的区别" tabindex="-1">4.1 WeakMap 和 Map 的区别 <a class="header-anchor" href="#_4-1-weakmap-和-map-的区别" aria-label="Permalink to &quot;4.1 WeakMap 和 Map 的区别&quot;">​</a></h3><ul><li>WeakMap 键名只能是 Object 或者继承自 Object 的类型</li><li>WeakMap 的键名所指向的对象，不计入垃圾回收机制的引用数。(weakMap 结构有助于防止内存泄漏)</li></ul><h3 id="_4-2-方法" tabindex="-1">4.2 方法 <a class="header-anchor" href="#_4-2-方法" aria-label="Permalink to &quot;4.2 方法&quot;">​</a></h3><ul><li>只支持四个方法：set get delete has</li></ul><h2 id="五、如何选择-object-和-map" tabindex="-1">五、如何选择 Object 和 Map <a class="header-anchor" href="#五、如何选择-object-和-map" aria-label="Permalink to &quot;五、如何选择 Object 和 Map&quot;">​</a></h2><ul><li>对于大多数 WEB 开发任务来说，这个选择只是个人偏好问题。但是对于在乎内存和性能的场景来说，对象和映射存在显著差别</li></ul><h3 id="_5-1-内存占用" tabindex="-1">5.1 内存占用 <a class="header-anchor" href="#_5-1-内存占用" aria-label="Permalink to &quot;5.1 内存占用&quot;">​</a></h3><ul><li>在给固定大小的内存中，Map 大约可以比 Object 多存储 50% 键值对</li></ul><h3 id="_5-2-插入性能" tabindex="-1">5.2 插入性能 <a class="header-anchor" href="#_5-2-插入性能" aria-label="Permalink to &quot;5.2 插入性能&quot;">​</a></h3><ul><li>Map 性能稍好，如果涉及大量插入操作，推荐 Map</li></ul><h3 id="_5-3-查找速度" tabindex="-1">5.3 查找速度 <a class="header-anchor" href="#_5-3-查找速度" aria-label="Permalink to &quot;5.3 查找速度&quot;">​</a></h3><ul><li>差异极小， 少量查找操作时 Object 的性能也许更好</li></ul><h3 id="_5-4-删除性能" tabindex="-1">5.4 删除性能 <a class="header-anchor" href="#_5-4-删除性能" aria-label="Permalink to &quot;5.4 删除性能&quot;">​</a></h3><ul><li>Map 性能稍好，如果涉及大量删除操作，推荐 Map</li></ul>`,54)]))}const d=a(e,[["render",o]]);export{b as __pageData,d as default};
