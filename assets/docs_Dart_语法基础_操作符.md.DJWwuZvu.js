import{_ as e,c as t,o as l,ag as r}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"操作符","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Dart/语法基础/操作符.md","filePath":"docs/Dart/语法基础/操作符.md","lastUpdated":1740575512000}'),o={name:"docs/Dart/语法基础/操作符.md"};function i(n,a,s,d,c,h){return l(),t("div",null,a[0]||(a[0]=[r('<h1 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;操作符&quot;">​</a></h1><h2 id="两个操作数的运算符" tabindex="-1">两个操作数的运算符 <a class="header-anchor" href="#两个操作数的运算符" aria-label="Permalink to &quot;两个操作数的运算符&quot;">​</a></h2><ul><li>对于接受两个操作数的运算符，最左边的操作数决定使用哪个方法。例如，如果您有一个 Vector 对象和一个 Point 对象，则 aVector + aPoint 将使用 Vector 的加法（+）</li></ul><h2 id="类型操作符" tabindex="-1">类型操作符 <a class="header-anchor" href="#类型操作符" aria-label="Permalink to &quot;类型操作符&quot;">​</a></h2><ul><li>Dart 的类型操作符可以在运行时起作用</li></ul><ol><li>as</li><li>is</li><li>is！</li></ol><h2 id="位运算符和移位运算法" tabindex="-1">位运算符和移位运算法 <a class="header-anchor" href="#位运算符和移位运算法" aria-label="Permalink to &quot;位运算符和移位运算法&quot;">​</a></h2><p>TODO： 后续了解</p><h2 id="级联表示法" tabindex="-1">级联表示法 <a class="header-anchor" href="#级联表示法" aria-label="Permalink to &quot;级联表示法&quot;">​</a></h2><ol><li>.. 在前面的对象上进行操作，简化代码书写</li><li>?.. 在前面的对象上进行操作, 并且适配了对象为 null 的情况，简化代码书写</li></ol>',10)]))}const m=e(o,[["render",i]]);export{u as __pageData,m as default};
