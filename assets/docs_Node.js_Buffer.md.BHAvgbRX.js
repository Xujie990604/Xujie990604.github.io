import{_ as a,c as o,o as r,ag as t}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"Buffer 缓冲区","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Node.js/Buffer.md","filePath":"docs/Node.js/Buffer.md","lastUpdated":1712646874000}'),d={name:"docs/Node.js/Buffer.md"};function l(i,e,c,f,s,u){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="buffer-缓冲区" tabindex="-1">Buffer 缓冲区 <a class="header-anchor" href="#buffer-缓冲区" aria-label="Permalink to &quot;Buffer 缓冲区&quot;">​</a></h1><ul><li>Buffer 用于表示<code>固定长度</code>的<code>字节序列</code>，JavaScript 语言没有读取或操作二进制数据流的机制。 Buffer 类被引入作为 Node.js API 的一部分，使其可以在 TCP 流或文件系统操作等场景中处理二进制数据流。</li><li>Buffer 所占用的内存不是通过 V8 分配的，属于堆外内存</li></ul><h2 id="二进制数据" tabindex="-1">二进制数据 <a class="header-anchor" href="#二进制数据" aria-label="Permalink to &quot;二进制数据&quot;">​</a></h2><ul><li>计算机存储和表示数据使用二进制 <code>0101</code> 每个数字代表一位(bit 比特)</li></ul><h2 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h2><ul><li>计算机中想要存储字符，就必须先将字符转化为数字，然后再计算为二进制数据</li><li>字符集就是定义<code>数字所代表的字符</code>的一个<code>规则表</code></li><li>常见的字符编码有 UTF-8, 它规定了字符应该以<code>字节</code>为单位来表示，一个字节8bit</li></ul>',6)]))}const h=a(d,[["render",l]]);export{_ as __pageData,h as default};
