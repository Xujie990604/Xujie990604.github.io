import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"双向绑定","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vue/Vue官方文档解读/双向绑定.md","filePath":"docs/Vue/Vue官方文档解读/双向绑定.md","lastUpdated":1712646874000}'),p={name:"docs/Vue/Vue官方文档解读/双向绑定.md"};function o(c,s,r,t,i,u){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="双向绑定" tabindex="-1">双向绑定 <a class="header-anchor" href="#双向绑定" aria-label="Permalink to &quot;双向绑定&quot;">​</a></h1><h2 id="v-model-指令" tabindex="-1">v-model 指令 <a class="header-anchor" href="#v-model-指令" aria-label="Permalink to &quot;v-model 指令&quot;">​</a></h2><ul><li>双向绑定：数据可以影响视图，视图的更改也能影响数据</li><li>两个指令的结合：v-bind 指令和 v-on：input 的结合</li><li>input 事件使用 $event.target.value 来获取当前表单的最新值</li></ul><h2 id="双向绑定的强大" tabindex="-1">双向绑定的强大 <a class="header-anchor" href="#双向绑定的强大" aria-label="Permalink to &quot;双向绑定的强大&quot;">​</a></h2><ul><li>v-model 会根据不同的控件类型来选取正确的方法来更新元素</li><li>v-model 会忽略所有表单元素的 value,checked，selected attribute 的初始值总是把 Vue 实例的数据作为数据来源</li></ul><h2 id="v-model-的实现原理" tabindex="-1">v-model 的实现原理 <a class="header-anchor" href="#v-model-的实现原理" aria-label="Permalink to &quot;v-model 的实现原理&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;custom-input&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  props: [</span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    &lt;input</span></span>
<span class="line"><span style="color:#032F62;">    // 父组件通过 props 来传递这个值</span></span>
<span class="line"><span style="color:#032F62;">      v-bind:value=&quot;value&quot;</span></span>
<span class="line"><span style="color:#032F62;">    // 提交这个input的input事件和值</span></span>
<span class="line"><span style="color:#032F62;">      v-on:input=&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span></span>
<span class="line"><span style="color:#032F62;">    &gt;</span></span>
<span class="line"><span style="color:#032F62;">  \`</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 组件调用的地方，直接使用v-model来声明值</span></span>
<span class="line"><span style="color:#6A737D;">// 默认情况下，只需要在调用自定义组件的时候。绑定一个v-model就行了。</span></span>
<span class="line"><span style="color:#6A737D;">// 会自动的把 v-model 绑定的值，通过 value (除非通过 model 模块重新指定)属性传到子组件中，父组件也会自动将子组件的 input (除非通过 model 模块重新指定) 事件的参数赋给。v-model 绑定的值。</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">custom-input</span><span style="color:#6F42C1;"> v-model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;searchText&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">custom-input</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="model-模块" tabindex="-1">model 模块 <a class="header-anchor" href="#model-模块" aria-label="Permalink to &quot;model 模块&quot;">​</a></h2><ul><li>一个组件上的 v-model 会默认利用名为 value 的 prop 和名为 input 的事件，但是像单选框，复选框类型的输入控件会不同，所以引用 model 模块来规范</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;base-checkbox&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  model: {</span></span>
<span class="line"><span style="color:#6A737D;">    // 使用 model 模块将默认的 value 指定为 checked，input 事件指定为 change 事件</span></span>
<span class="line"><span style="color:#24292E;">    prop: </span><span style="color:#032F62;">&#39;checked&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    event: </span><span style="color:#032F62;">&#39;change&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#6A737D;">    // checked 必须要在 props中声明</span></span>
<span class="line"><span style="color:#24292E;">    checked: Boolean</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    &lt;input</span></span>
<span class="line"><span style="color:#032F62;">      type=&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#032F62;">      v-bind:checked=&quot;checked&quot;</span></span>
<span class="line"><span style="color:#032F62;">      &lt;!-- $event.target.checked 是 checked 不是 value --&gt;</span></span>
<span class="line"><span style="color:#032F62;">      v-on:change=&quot;$emit(&#39;change&#39;, $event.target.checked)&quot;</span></span>
<span class="line"><span style="color:#032F62;">    &gt;</span></span>
<span class="line"><span style="color:#032F62;">  \`</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">base-checkbox</span><span style="color:#6F42C1;"> v-model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;lovingVue&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">base-checkbox</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;!-- 这里的 lovingVue 的值将会传入这个名为 checked 的 prop。同时当 &lt;base-checkbox&gt; 触发一个 change 事件并附带一个新的值的时候，这个 lovingVue 的 property 将会被更新。 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="双向绑定的原理" tabindex="-1">双向绑定的原理 <a class="header-anchor" href="#双向绑定的原理" aria-label="Permalink to &quot;双向绑定的原理&quot;">​</a></h2><ul><li>数据劫持和观察者模式</li></ul>`,12)]))}const m=n(p,[["render",o]]);export{d as __pageData,m as default};
