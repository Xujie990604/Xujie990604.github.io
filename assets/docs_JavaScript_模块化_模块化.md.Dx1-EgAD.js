import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"模块化","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/模块化/模块化.md","filePath":"docs/JavaScript/模块化/模块化.md","lastUpdated":1712646874000}'),e={name:"docs/JavaScript/模块化/模块化.md"};function o(r,s,c,t,i,m){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h1><ul><li>以前使用立即执行函数或者使用对象来解决这种问题，但是使用立即执行函数的话，函数外面的 JS 语句无法使用立即执行函数内的变量和方法。需要使用 return 来返回一个对象。(ES5的模块化)</li><li>在浏览器侧使用 import 导入非常严格，服务器需要设置 mime type 类型：application/javascript。</li></ul><h2 id="一、es6的模块化-本地使用的话-需要把网页在服务器打开" tabindex="-1">一、ES6的模块化（本地使用的话，需要把网页在服务器打开） <a class="header-anchor" href="#一、es6的模块化-本地使用的话-需要把网页在服务器打开" aria-label="Permalink to &quot;一、ES6的模块化（本地使用的话，需要把网页在服务器打开）&quot;">​</a></h2><ul><li>带有 type=&quot;module&quot; 的 <code>&lt;script&gt;</code> 标签告诉浏览器相关代码需要按照模块的方式执行(必须使用导入导出才能使用其他模块的变量)</li><li>带有 type=&quot;module&quot; 的 <code>&lt;script&gt;</code> 标签和带有 <code>defer</code> <code>&lt;script&gt;</code> 标签的行为一样。被立即下载，但是延迟到文档加载完再执行。</li><li>完全支持 ES6 的浏览器，会从顶层模块加载整个依赖图，并且是异步完成的。模块文件按需加载(没有被使用的话就不会被加载, 只会加载解构中涉及的方法)(commonJS 会把整个文件加载进来)</li><li>module 中默认开启严格模式，代码书写需要遵循严格模式的要求</li><li>module 是在编译时导入的(编译时代码并未执行，import 并不清楚变量的具体值。所以 import 不支持 <code>条件导入</code> 和 <code>动态导入</code> )，并且是异步的</li><li>由于 import 不支持条件导入和动态导入，因此提案出现了 import() 函数。支持动态加载模块，是运行时导入(和 commonJS 类似，只不过 import() 是异步的，返回值为 Promise, commonJS 是同步的)</li><li>module 进行导出是并不是直接导出一个对象的引用(和 commonJS 进行区分)。 a 模块中导入 b 模块时，b 模块中对于变量的修改会实时反映到 a 模块中(无论是基本数据类型还是引用数据类型)。但是在 a 模块中无法修改 b 导出的基本数据类型，只能修改引用数据类型的属性(相当于导出的变量被 const 修饰)</li></ul><h3 id="_1-1-模块的导出" tabindex="-1">1.1 模块的导出 <a class="header-anchor" href="#_1-1-模块的导出" aria-label="Permalink to &quot;1.1 模块的导出&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 不允许 export 定义在某个块中</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    export</span><span style="color:#D73A49;"> ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 导出单个变量</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#005CC5;"> foo</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;aaa&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 导出多个变量</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;xujie&quot;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 11</span></span>
<span class="line"><span style="color:#6A737D;">// 这个 {} 并不是对象，和 commonJS 规范有差异</span></span>
<span class="line"><span style="color:#6A737D;">// {} 代表的是一个导出列表，和对象字面量不是一个概念</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id, </span><span style="color:#6A737D;">// 使用别名的导出方式必须在 {} 中</span></span>
<span class="line"><span style="color:#24292E;">  age</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认导出</span></span>
<span class="line"><span style="color:#6A737D;">// 但是每个模块只能默认导出一个东西</span></span>
<span class="line"><span style="color:#6A737D;">// 并且导入的时候不能使用 {}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { name </span><span style="color:#D73A49;">as</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">//和上面的语句是等价的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认导出和一般的导出是相互独立的，可以同时定义默认导出和一般的导出</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { name, phone }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { name, phone, a </span><span style="color:#D73A49;">as</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">//等价于上面的两条语句</span></span>
<span class="line"><span style="color:#6A737D;">// 默认导出和一般的导出同时定义时的接收</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> a, { name, phone } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./tool.js&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">default</span><span style="color:#D73A49;"> as</span><span style="color:#24292E;"> a, name, phone } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./tool.js&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_1-2-模块的导入" tabindex="-1">1.2 模块的导入 <a class="header-anchor" href="#_1-2-模块的导入" aria-label="Permalink to &quot;1.2 模块的导入&quot;">​</a></h3><ul><li>加载一个模块的时候，即使没有公共的接口，也会执行模块体中的代码。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// import语句不能声明在块级中</span></span>
<span class="line"><span style="color:#6A737D;">// 如果想要在块中导入模块的话可以使用 import() 函数进行导入，使用 Promise 来进行后续处理</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    import</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// import 语句会被提升到模块的顶部</span></span>
<span class="line"><span style="color:#6A737D;">// 可以但是要避免在 import 之前使用导入的变量</span></span>
<span class="line"><span style="color:#6A737D;">// 模块的路径只能是静态的，不能是动态计算的结果，不能使用变量。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 默认的导入</span></span>
<span class="line"><span style="color:#6A737D;">// 这两种方式等价</span></span>
<span class="line"><span style="color:#24292E;">import name </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./tool.js&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { name </span><span style="color:#D73A49;">as</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;">  } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./tool.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 import 导入的变量就像是 const 声明的一样</span></span>
<span class="line"><span style="color:#6A737D;">// 基本数据类型的值不能被修改</span></span>
<span class="line"><span style="color:#6A737D;">// 引用类型的值(例如对象)能够添加，删除，修改属性。但是不能够赋值为一个新对象</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { name, person } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./tool.js&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="二、commonjs-与-esmodule-互相引用" tabindex="-1">二、CommonJS 与 ESModule 互相引用 <a class="header-anchor" href="#二、commonjs-与-esmodule-互相引用" aria-label="Permalink to &quot;二、CommonJS 与 ESModule 互相引用&quot;">​</a></h2><ul><li>可以使用 import 语法来导入以 CommonJS 规范书写的代码，但是导入时不能使用解构语法（前提是指定 package.json 的 type 字段为 module）</li><li>不能使用 require() 来导入以 ESModule 规范书写的代码</li><li>尽量不要在业务代码中混用</li></ul><h2 id="三、指定文件的模块机制" tabindex="-1">三、指定文件的模块机制 <a class="header-anchor" href="#三、指定文件的模块机制" aria-label="Permalink to &quot;三、指定文件的模块机制&quot;">​</a></h2><ul><li>使用 .mjs 后缀指定当前文件是 ESModule 规范代码</li><li>使用 .cjs 后缀指定当前文件是 CommonJS 规范代码</li></ul>`,13)]))}const y=n(e,[["render",o]]);export{u as __pageData,y as default};
