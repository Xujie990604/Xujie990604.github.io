import{_ as s,c as l,o as n,ag as e}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"JavaScript 中的数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/语言基础/数据类型.md","filePath":"docs/JavaScript/语言基础/数据类型.md","lastUpdated":1748684767000}'),o={name:"docs/JavaScript/语言基础/数据类型.md"};function r(p,a,i,t,c,d){return n(),l("div",null,a[0]||(a[0]=[e(`<h1 id="javascript-中的数据类型" tabindex="-1">JavaScript 中的数据类型 <a class="header-anchor" href="#javascript-中的数据类型" aria-label="Permalink to &quot;JavaScript 中的数据类型&quot;">​</a></h1><h2 id="一、原始值和引用值" tabindex="-1">一、原始值和引用值 <a class="header-anchor" href="#一、原始值和引用值" aria-label="Permalink to &quot;一、原始值和引用值&quot;">​</a></h2><h3 id="_1-1-原始值" tabindex="-1">1.1 原始值 <a class="header-anchor" href="#_1-1-原始值" aria-label="Permalink to &quot;1.1 原始值&quot;">​</a></h3><ul><li>原始值: Number、Boolean、String、undefined（未定义，未赋值）、null（空值）、Symbol</li><li>访问方式：<code>按值（by value）访问</code>，操作的就是存储在变量中的实际值</li><li>在栈内存中 <code>直接存放数据</code></li><li>复制变量：开辟一个新的栈空间，将变量的值添加到新的栈空间中。<code>新旧两个变量值互不干扰</code></li><li>修改变量：为变量开辟一个新的栈空间，并将新值添加到新的栈空间中</li></ul><h3 id="_1-2-引用值" tabindex="-1">1.2 引用值 <a class="header-anchor" href="#_1-2-引用值" aria-label="Permalink to &quot;1.2 引用值&quot;">​</a></h3><ul><li>引用值: Arr、Object、Function</li><li>访问方式：<code>按引用（by reference）访问</code>，操作的是该对象的引用</li><li>在栈内存中存放是 <code>对象实际地址的引用</code>，(引用地址指向堆), 对象本身存储在<code>堆</code>中</li><li>复制变量: 开辟一个新的栈空间，新的栈空间中存放的是对象在堆上的地址。<code>新旧两个变量都操作同一个对象</code></li></ul><h2 id="二、typeof-操作符" tabindex="-1">二、typeof 操作符 <a class="header-anchor" href="#二、typeof-操作符" aria-label="Permalink to &quot;二、typeof 操作符&quot;">​</a></h2><ul><li>因为 ECMAScript 的 <code>类型系统</code> 是松散的，所以需要一种鉴定手段来确定变量的数据类型</li><li>typeof 是判断变量是否为 String、Number、undefined、Boolean、Symbol 的好助手，但是<code>对引用值的用处不大</code></li></ul><h3 id="typeof-返回值-字符串类型" tabindex="-1">typeof 返回值(字符串类型) <a class="header-anchor" href="#typeof-返回值-字符串类型" aria-label="Permalink to &quot;typeof 返回值(字符串类型)&quot;">​</a></h3><ol><li>number</li><li>string</li><li>boolean</li><li>undefined(变量未初始化、变量未定义 <code>!JS设计糟粕</code> 明明这两种情况是天差地别，但是返回值却一样)</li><li>symbol</li><li>object(数组、对象、null <code>null 是 Object 属于历史遗留问题</code>)</li><li>function(虽然函数也是对象，但是由于<code>函数的特殊性</code>，特意做了区分)</li><li>bigint 任意精度格式的整数</li></ol><h2 id="三、javascript-的数据类型" tabindex="-1">三、JavaScript 的数据类型 <a class="header-anchor" href="#三、javascript-的数据类型" aria-label="Permalink to &quot;三、JavaScript 的数据类型&quot;">​</a></h2><ul><li>七个基本数据类型：Number Boolean String undefined（未定义, 未赋值) null(占位置, 空值) Symbol bigint</li><li>复杂数据类型: Object(数组，函数，对象)</li></ul><h3 id="_3-1-undefined" tabindex="-1">3.1 undefined <a class="header-anchor" href="#_3-1-undefined" aria-label="Permalink to &quot;3.1 undefined&quot;">​</a></h3><ul><li><code>已声明但是未初始化</code>的变量默认为 undefined，</li><li>引入 undefined 是为了正式明确<code>空对象指针(null)</code>和<code>未经初始化的变量</code>的区别</li></ul><h3 id="_3-2-null-空对象指针" tabindex="-1">3.2 null（空对象指针） <a class="header-anchor" href="#_3-2-null-空对象指针" aria-label="Permalink to &quot;3.2 null（空对象指针）&quot;">​</a></h3><ul><li>定义一个将来要<code>保存对象值的变量</code>时，使用 null 来进行初始化</li><li>undefined <code>派生</code>自 null。所以 undefined == null</li></ul><h3 id="_3-3-boolean" tabindex="-1">3.3 Boolean <a class="header-anchor" href="#_3-3-boolean" aria-label="Permalink to &quot;3.3 Boolean&quot;">​</a></h3><ul><li>0 - false</li><li>1 - true</li></ul><h3 id="_3-4-number" tabindex="-1">3.4 Number <a class="header-anchor" href="#_3-4-number" aria-label="Permalink to &quot;3.4 Number&quot;">​</a></h3><h4 id="ieee-754-格式-双精度值" tabindex="-1">IEEE 754 格式(双精度值) <a class="header-anchor" href="#ieee-754-格式-双精度值" aria-label="Permalink to &quot;IEEE 754 格式(双精度值)&quot;">​</a></h4><ul><li>经典问题 <code>0.1 + 0.2 == 0.3 // false</code></li><li>这不是 JS 独有的问题，采用该规范的语言都有这个问题。根本原因是<code>二进制存储小数</code>时的<code>精度缺失</code>问题</li><li>十进制转二进制：整数采用<code>除2取余</code>、小数采用<code>乘2取整</code>(二进制中，小数点后的每一位表示的是 2 的幂次方的倒数, 二进制小数 0.1 表示的是 1/2)</li></ul><h4 id="数值范围" tabindex="-1">数值范围 <a class="header-anchor" href="#数值范围" aria-label="Permalink to &quot;数值范围&quot;">​</a></h4><ul><li>使用 64 位(8 字节)来存储 Number 类型变量</li><li>JS 中数值有一个最大和最小的区间。infinity 就是正无穷。</li><li>使用 isFinite() 函数来判断是否介于最大数值和最小数值区间内。超过范围的数值将无法参加下一次计算</li></ul><h4 id="nan" tabindex="-1">NAN <a class="header-anchor" href="#nan" aria-label="Permalink to &quot;NAN&quot;">​</a></h4><ul><li>不是数值, 用于表示<code>本来要返回数值</code>的操作数<code>并没有返回数值</code>的情况(而不是抛出错误)</li><li>NAN 与任何数都不相等，包括自身</li><li>任何涉及到 NAN 的操作都会返回 NAN</li><li>isNAN() 方法，用于判断数值是否为 NAN 类型(isNAN() 会先调用一次 Number())</li></ul><h3 id="_3-5-string" tabindex="-1">3.5 String <a class="header-anchor" href="#_3-5-string" aria-label="Permalink to &quot;3.5 String&quot;">​</a></h3><ol><li>字符串中支持使用<code>转义字符串</code></li><li>ECMAScript 中的字符串是不可变的，要想改变字符串的值就要销毁原来的字符串，然后再用另一个新的字符串填充变量。</li></ol><h4 id="模版自变量" tabindex="-1">模版自变量 <a class="header-anchor" href="#模版自变量" aria-label="Permalink to &quot;模版自变量&quot;">​</a></h4><ol><li>使用 \`\` 声明</li><li>模板字面量保存换行字符、可以跨行定义字符串(跨行格式本质上就是一个 <code>\\n</code>)</li><li>通过 <code>\${value}</code> 来插入变量</li></ol><h3 id="_3-6-symbol" tabindex="-1">3.6 Symbol <a class="header-anchor" href="#_3-6-symbol" aria-label="Permalink to &quot;3.6 Symbol&quot;">​</a></h3><ul><li>ES6 引入了一种新的原始数据类型 Symbol，生成的实例是唯一的、不变的。</li><li>用途：对象属性的唯一标识、不会发生属性冲突的危险</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// s 是一个独一无二的值</span></span>
<span class="line"><span style="color:#6A737D;">// 不能使用 new 运算符调用</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// foo 和 bar 只是描述信息，用于调试使用</span></span>
<span class="line"><span style="color:#6A737D;">// 和 Symbol 生成的值没有任何关系，即使参数填写的一样。生成的值也都是独一无二的</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="symbol-for-string" tabindex="-1">Symbol.for(string) <a class="header-anchor" href="#symbol-for-string" aria-label="Permalink to &quot;Symbol.for(string)&quot;">​</a></h4><ul><li>用于共享和重用符号实例</li><li>会创建一个全局的注册表，并把字符串当做键</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> s2); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s3 </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s4 </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> s4); </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="symbol-keyfor-symbol" tabindex="-1">Symbol.keyFor(symbol) <a class="header-anchor" href="#symbol-keyfor-symbol" aria-label="Permalink to &quot;Symbol.keyFor(symbol)&quot;">​</a></h4><ul><li>查询 symbol 实例在全局注册表中的键名</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Symbol.</span><span style="color:#6F42C1;">keyFor</span><span style="color:#24292E;">(s1)); </span><span style="color:#6A737D;">// bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>// TODO: Symbol 上还有很多方法没有去了解，按需学习</p><h3 id="_3-7-object" tabindex="-1">3.7 Object <a class="header-anchor" href="#_3-7-object" aria-label="Permalink to &quot;3.7 Object&quot;">​</a></h3><ul><li>ECMAScript 中的对象就是一组<code>数据和功能的集合</code></li><li>Object() 类型是所有它的实例的基础、由于 ECMAScript 并不定义 DOM, BOM 所以他们可能不会继承自 Object()</li></ul><h3 id="_3-8-bigint" tabindex="-1">3.8 bigint <a class="header-anchor" href="#_3-8-bigint" aria-label="Permalink to &quot;3.8 bigint&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> n1</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 100</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 100n</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> n2</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 200n</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> n1; </span><span style="color:#6A737D;">// bigint</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> n2; </span><span style="color:#6A737D;">// bigint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,43)]))}const y=s(o,[["render",r]]);export{u as __pageData,y as default};
